##########################################
# Search Extension API
##########################################
GET     /search                     @com.keepit.controllers.ext.ExtSearchController.search(q: String, f: Option[String], maxHits: Int, lastUUID: Option[String], context: Option[String], kifiVersion: Option[KifiVersion] ?= None, start: Option[String], end: Option[String], tz: Option[String], coll: Option[String])
GET     /search/warmUp              @com.keepit.controllers.ext.ExtSearchController.warmUp()
GET     /search/message             @com.keepit.controllers.ext.ExtMessageSearchController.search(q: String, page: Int ?= 0)
POST    /search/events/resultClicked @com.keepit.controllers.ext.ExtSearchEventController.clickedSearchResult()
POST    /search/events/searchEnded  @com.keepit.controllers.ext.ExtSearchEventController.endedSearch()
POST    /search/events/browsed      @com.keepit.controllers.ext.ExtSearchEventController.updateBrowsingHistory()
GET     /search/users/page          @com.keepit.controllers.ext.ExtUserSearchController.page(query: String, filter: Option[String], pageNum: Int, pageSize: Int)
GET     /search/users/search        @com.keepit.controllers.ext.ExtUserSearchController.search(query: String, filter: Option[String], context: Option[String], maxHits: Int)

# INTERNAL ROUTES/Search
GET     /internal/search            @com.keepit.controllers.ext.ExtSearchController.internalSearch(userId: Long, nse: Boolean, al: String, q: String, f: Option[String], maxHits: Int, lastUUID: Option[String], context: Option[String], kifiVersion: Option[KifiVersion] ?= None, start: Option[String], end: Option[String], tz: Option[String], coll: Option[String])

GET     /internal/search/warmUp/:userId        @com.keepit.controllers.search.SearchController.warmUpUser(userId: Id[User])

POST    /internal/search/events/resultClicked  @com.keepit.controllers.search.SearchEventController.logResultClicked()
POST    /internal/search/events/searchEnded    @com.keepit.controllers.search.SearchEventController.logSearchEnded()
POST    /internal/search/events/browsed/:userId @com.keepit.controllers.search.SearchEventController.updateBrowsingHistory(userId: Id[User])

GET     /internal/search/uriGraph/info         @com.keepit.controllers.search.URIGraphController.indexInfo()
POST    /internal/search/uriGraph/sharingUserInfo/:userId @com.keepit.controllers.search.URIGraphController.sharingUserInfo(userId: Id[User])
POST    /internal/search/uriGraph/update       @com.keepit.controllers.search.URIGraphController.updateURIGraph()
POST    /internal/search/uriGraph/reindex      @com.keepit.controllers.search.URIGraphController.reindex()
POST    /internal/search/uriGraph/dumpDoc/:id  @com.keepit.controllers.search.URIGraphController.dumpLuceneDocument(id: Id[User])

POST    /internal/search/collection/reindex    @com.keepit.controllers.search.URIGraphController.reindexCollection()
POST    /internal/search/collection/dumpDoc    @com.keepit.controllers.search.URIGraphController.dumpCollectionLuceneDocument(id: Id[Collection], userId: Id[User])

GET     /internal/search/index/info            @com.keepit.controllers.search.ArticleIndexerController.indexInfo()
POST    /internal/search/index/update          @com.keepit.controllers.search.ArticleIndexerController.index()
POST    /internal/search/index/reindex         @com.keepit.controllers.search.ArticleIndexerController.reindex()
GET     /internal/search/index/sequenceNumber  @com.keepit.controllers.search.ArticleIndexerController.getSequenceNumber()
POST    /internal/search/index/refreshSearcher @com.keepit.controllers.search.ArticleIndexerController.refreshSearcher()
POST    /internal/search/index/refreshPhrases  @com.keepit.controllers.search.ArticleIndexerController.refreshPhrases()
POST    /internal/search/index/dumpDoc/:id     @com.keepit.controllers.search.ArticleIndexerController.dumpLuceneDocument(id: Id[NormalizedURI])


POST     /internal/search/search/users          @com.keepit.controllers.search.SearchController.searchUsers()
POST    /internal/search/search/keeps          @com.keepit.controllers.search.SearchController.searchKeeps(userId: Id[User], query: String)
GET     /internal/search/search/explainResult  @com.keepit.controllers.search.SearchController.explain(query: String, userId: Id[User], uriId: Id[NormalizedURI], lang: Option[String])
GET     /internal/search/search/causeError     @com.keepit.controllers.search.SearchController.causeError()
GET     /internal/search/search/causeHandbrakeError  @com.keepit.controllers.search.SearchController.causeHandbrakeError()

GET     /internal/search/searchConfig/:id        @com.keepit.controllers.search.SearchConfigController.showUserConfig(id: Id[User])
POST    /internal/search/searchConfig/:id/set    @com.keepit.controllers.search.SearchConfigController.setUserConfig(id: Id[User])
GET     /internal/search/searchConfig/:id/reset  @com.keepit.controllers.search.SearchConfigController.resetUserConfig(id: Id[User])
GET     /internal/search/defaultSearchConfig/defaultSearchConfig  @com.keepit.controllers.search.SearchConfigController.getSearchDefaultConfig

GET     /internal/search/search/friendMapJson  @com.keepit.controllers.search.SearchController.friendMapJson(userId: Id[User], query: Option[String] ?= None, minKeeps: Option[Int] ?= None)

GET     /internal/search/semanticVector/leaveOneOut @com.keepit.controllers.search.SemanticVectorController.leaveOneOut(queryText: String, stem: Boolean, useSketch: Boolean)
GET     /internal/search/semanticVector/allSubsets @com.keepit.controllers.search.SemanticVectorController.allSubsets(queryText: String, stem: Boolean, useSketch: Boolean)

GET 	/internal/search/cache/warmResultClick   @com.keepit.controllers.search.SearchCacheController.warmResultClick()

GET     /internal/search/spell/suggest          @com.keepit.controllers.search.SpellCorrectorController.correct(input: String, enableBoost: Boolean)

->  / common.Routes
