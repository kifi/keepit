##########################################
# Search Extension API
##########################################
GET         /search        @com.keepit.controllers.ext.ExtSearchController.search(q: String, f: Option[String], maxHits: Int, lastUUID: Option[String], context: Option[String], kifiVersion: Option[KifiExtVersion] ?= None, start: Option[String], end: Option[String], tz: Option[String], coll: Option[String], debug: Option[String])
GET         /search2       @com.keepit.controllers.ext.ExtSearchController.search2(q: String, f: Option[String], l: Option[String], maxHits: Int, lastUUID: Option[String], context: Option[String], kifiVersion: Option[KifiExtVersion] ?= None, debug: Option[String])
GET         /search/warmUp        @com.keepit.controllers.ext.ExtSearchController.warmUp()
GET         /search/instance      @com.keepit.controllers.ext.ExtSearchController.instance()
GET         /search/message        @com.keepit.controllers.ext.ExtMessageSearchController.search(q: String, page: Int ?= 0)
POST        /search/events/resultClicked        @com.keepit.controllers.ext.ExtSearchEventController.clickedSearchResult()
POST        /search/events/searched        @com.keepit.controllers.ext.ExtSearchEventController.searched()
POST        /search/events/browsed        @com.keepit.controllers.ext.ExtSearchEventController.updateBrowsingHistory()
GET         /search/users/page        @com.keepit.controllers.ext.ExtUserSearchController.page(query: String, filter: Option[String], pageNum: Int, pageSize: Int)
GET         /search/users/search        @com.keepit.controllers.ext.ExtUserSearchController.search(query: String, filter: Option[String], context: Option[String], maxHits: Int)

##########################################
# Mobile V1
##########################################
GET         /m/1/search        @com.keepit.controllers.mobile.MobileSearchController.searchV1(q: String, f: Option[String], maxHits: Int, lastUUID: Option[String], context: Option[String], kifiVersion: Option[KifiExtVersion] ?= None, start: Option[String], end: Option[String], tz: Option[String], coll: Option[String], withUriSummary: Boolean ?= false)
GET         /m/1/search/users/page        @com.keepit.controllers.mobile.MobileUserSearchController.pageV1(query: String, filter: Option[String], pageNum: Int, pageSize: Int)
GET         /m/1/search/users/search        @com.keepit.controllers.mobile.MobileUserSearchController.searchV1(query: String, filter: Option[String], context: Option[String], maxHits: Int)
POST        /m/1/search/events/clickedSearchResult        @com.keepit.controllers.mobile.MobileSearchEventController.clickedSearchResult()
POST        /m/1/search/events/searched        @com.keepit.controllers.mobile.MobileSearchEventController.searched()
GET         /m/1/search/message        @com.keepit.controllers.mobile.MobileMessageSearchController.search(q: String, page: Int ?= 0)


##########################################
# Search Website API
##########################################
GET         /site/search                        @com.keepit.controllers.website.WebsiteSearchController.search(q: String, f: Option[String], maxHits: Int, lastUUID: Option[String], context: Option[String], start: Option[String], end: Option[String], tz: Option[String], coll: Option[String], debug: Option[String], withUriSummary: Boolean ?= false)
GET         /site/search2                       @com.keepit.controllers.website.WebsiteSearchController.search2(q: String, f: Option[String], l: Option[String], maxHits: Int, lastUUID: Option[String], context: Option[String], auth: Option[String], debug: Option[String], withUriSummary: Boolean ?= false)
GET         /site/search/warmUp                 @com.keepit.controllers.website.WebsiteSearchController.warmUp()
POST        /site/search/events/resultClicked   @com.keepit.controllers.website.WebsiteSearchEventController.clickedKifiResult()
POST        /site/search/events/searched        @com.keepit.controllers.website.WebsiteSearchEventController.searched()
GET         /site/search/library                @com.keepit.controllers.website.WebsiteSearchController.librarySearch(q: String, f: Option[String], maxHits: Int, context: Option[String], debug: Option[String])


##########################################
# INTERNAL ROUTES/Search
##########################################

POST        /internal/search/dist/search          @com.keepit.controllers.search.SearchController.distSearch()
POST        /internal/search/dist/search2         @com.keepit.controllers.search.SearchController.distSearch2()
POST        /internal/search/dist/langFreqs       @com.keepit.controllers.search.SearchController.distLangFreqs()
POST        /internal/search/dist/langFreqs2      @com.keepit.controllers.search.SearchController.distLangFreqs2()
POST        /internal/search/dist/augmentation    @com.keepit.controllers.search.SearchController.distAugmentation()
POST        /internal/search/dist/librarySearch   @com.keepit.controllers.search.SearchController.distLibrarySearch()

GET         /internal/search/warmUp/:userId        @com.keepit.controllers.search.SearchController.warmUpUser(userId: Id[User])

POST        /internal/search/events/browsed/:userId        @com.keepit.controllers.search.SearchEventController.updateBrowsingHistory(userId: Id[User])

POST        /internal/search/uriGraph/update        @com.keepit.controllers.search.URIGraphController.updateURIGraph()
POST        /internal/search/uriGraph/reindex        @com.keepit.controllers.search.URIGraphController.reindex()
POST        /internal/search/uriGraph/dumpDoc/:id        @com.keepit.controllers.search.URIGraphController.dumpLuceneDocument(id: Id[User])

POST        /internal/search/collection/dumpDoc        @com.keepit.controllers.search.URIGraphController.dumpCollectionLuceneDocument(id: Id[Collection], userId: Id[User])

POST        /internal/search/user/reindex        @com.keepit.controllers.search.UserIndexController.reindex()
POST        /internal/search/user/update        @com.keepit.controllers.search.UserIndexController.update()
POST        /internal/search/userGraph/update        @com.keepit.controllers.search.UserGraphController.updateUserGraph()
POST        /internal/search/searchFriendGraph/update        @com.keepit.controllers.search.UserGraphController.updateSearchFriends()
POST        /internal/search/userGraphs/reindex        @com.keepit.controllers.search.UserGraphController.reindex()

POST        /internal/search/index/update        @com.keepit.controllers.search.ArticleIndexerController.index()
POST        /internal/search/index/reindex        @com.keepit.controllers.search.ArticleIndexerController.reindex()
GET         /internal/search/index/sequenceNumber        @com.keepit.controllers.search.ArticleIndexerController.getSequenceNumber()
POST        /internal/search/index/refreshSearcher        @com.keepit.controllers.search.ArticleIndexerController.refreshSearcher()
POST        /internal/search/index/refreshPhrases        @com.keepit.controllers.search.ArticleIndexerController.refreshPhrases()
POST        /internal/search/index/dumpDoc/:id        @com.keepit.controllers.search.ArticleIndexerController.dumpLuceneDocument(id: Id[NormalizedURI])
GET         /internal/search/index/refreshWriter        @com.keepit.controllers.search.ArticleIndexerController.refreshWriter()

GET         /internal/search/indexInfo/listAll        @com.keepit.controllers.search.IndexInfoController.listAll


POST        /internal/search/search/users        @com.keepit.controllers.search.SearchController.searchUsers()
POST        /internal/search/search/userTypeahead        @com.keepit.controllers.search.SearchController.userTypeahead()
GET         /internal/search/search/explainResult        @com.keepit.controllers.search.SearchController.explain(query: String, userId: Id[User], uriId: Id[NormalizedURI], lang: Option[String])
POST        /internal/searchWithConfig        @com.keepit.controllers.search.SearchController.searchWithConfig

GET         /internal/search/searchConfig/:id        @com.keepit.controllers.search.SearchConfigController.showUserConfig(id: Id[User])
POST        /internal/search/searchConfig/:id/set        @com.keepit.controllers.search.SearchConfigController.setUserConfig(id: Id[User])
GET         /internal/search/searchConfig/:id/reset        @com.keepit.controllers.search.SearchConfigController.resetUserConfig(id: Id[User])
GET         /internal/search/defaultSearchConfig/defaultSearchConfig        @com.keepit.controllers.search.SearchConfigController.getSearchDefaultConfig

GET         /internal/search/cache/warmResultClick        @com.keepit.controllers.search.SearchCacheController.warmResultClick()

GET         /internal/search/spell/suggest        @com.keepit.controllers.search.SpellCorrectorController.correct(input: String, enableBoost: Boolean)

GET         /internal/search/searchMessages @com.keepit.controllers.search.MessageSearchController.search(userId: Id[User], query: String, page: Int ?= 0)
POST        /internal/search/augmentation   @com.keepit.controllers.search.SearchController.augmentation()

->          /        common.Routes
