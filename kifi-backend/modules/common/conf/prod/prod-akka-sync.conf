iteratee-threadpool-size=32

# See:
# * http://www.playframework.com/documentation/2.1.0/ThreadPools
# * http://doc.akka.io/docs/akka/2.1.0/general/configuration.html#Listing_of_the_Reference_Configuration
# * http://doc.akka.io/docs/akka/snapshot/general/configuration.html

play {
  akka {
    event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
    loglevel = INFO
    log-config-on-start = true
    # JVM shutdown, System.exit(-1), in case of a fatal error,
    # such as OutOfMemoryError
    jvm-exit-on-fatal-error = off
    actor {
      actions-dispatcher = {
        fork-join-executor {
          parallelism-factor = 128
          parallelism-max = 48
        }
        throughput = 1
        mailbox-capacity = 1000
        mailbox-push-timeout-time = 10s
        mailbox-type = "akka.dispatch.BoundedMailbox"
      }
      promises-dispatcher = {
        fork-join-executor {
          parallelism-factor = 128
          parallelism-max = 32
        }
        throughput = 1
        mailbox-capacity = 1000
        mailbox-push-timeout-time = 10s
        mailbox-type = "akka.dispatch.BoundedMailbox"
      }
      default-dispatcher {
        # Must be one of the following
        # Dispatcher, (BalancingDispatcher, only valid when all actors using it are
        # of the same type), PinnedDispatcher, or a FQCN to a class inheriting
        # MessageDispatcherConfigurator with a constructor with
        # both com.typesafe.config.Config parameter and
        # akka.dispatch.DispatcherPrerequisites parameters.
        # PinnedDispatcher must be used toghether with executor=thread-pool-executor.
        type = "Dispatcher"

        # Which kind of ExecutorService to use for this dispatcher
        # Valid options:
        #  - "fork-join-executor" requires a "fork-join-executor" section
        #  - "thread-pool-executor" requires a "thread-pool-executor" section
        #  - A FQCN of a class extending ExecutorServiceConfigurator
        executor = "fork-join-executor"

        # This will be used if you have set "executor = "fork-join-executor""
        fork-join-executor {
          # The parallelism factor is used to determine thread pool size using the
          # following formula: ceil(available processors * factor). Resulting size
          # is then bounded by the parallelism-min and parallelism-max values.
          parallelism-factor = 128

          # Max number of threads to cap factor-based parallelism number to
          parallelism-max = 64
        }

        # How long time the dispatcher will wait for new actors until it shuts down
        shutdown-timeout = 1s

        # Throughput defines the number of messages that are processed in a batch
        # before the thread is returned to the pool. Set to 1 for as fair as possible.
        throughput = 1

        # Throughput deadline for Dispatcher, set to 0 or negative for no deadline
        throughput-deadline-time = 1ms

        # If negative (or zero) then an unbounded mailbox is used (default)
        # If positive then a bounded mailbox is used and the capacity is set using
        # the property
        # NOTE: setting a mailbox to 'blocking' can be a bit dangerous, could lead
        # to deadlock, use with care
        # The following mailbox-push-timeout-time is only used for type=Dispatcher
        # and only if mailbox-capacity > 0
        mailbox-capacity = 10000

        # Specifies the timeout to add a new message to a mailbox that is full -
        # negative number means infinite timeout. It is only used for type=Dispatcher
        # and only if mailbox-capacity > 0
        mailbox-push-timeout-time = 1s

        # FQCN of the MailboxType, if not specified the default bounded or unbounded
        # mailbox is used. The Class of the FQCN must have a constructor with
        # (akka.actor.ActorSystem.Settings, com.typesafe.config.Config) parameters.
        mailbox-type = "akka.dispatch.BoundedMailbox"

        # For BalancingDispatcher: If the balancing dispatcher should attempt to
        # schedule idle actors using the same dispatcher when a message comes in,
        # and the dispatchers ExecutorService is not fully busy already.
        attempt-teamwork = on

        # For Actor with Stash: The default capacity of the stash.
        # If negative (or zero) then an unbounded stash is used (default)
        # If positive then a bounded stash is used and the capacity is set using
        # the property
        stash-capacity = -1
      }
    }
  }
}

db-thread-pool-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "thread-pool-executor"
  # Configuration for the thread pool
  thread-pool-executor {
    # minimum number of threads to cap factor-based core number to
    core-pool-size-min = 5
    # No of core threads ... ceil(available processors * factor)
    core-pool-size-factor = 5.0
    # maximum number of threads to cap factor-based number to
    core-pool-size-max = 100
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 1
}

slow-running-execution-context {
  fork-join-executor {
    parallelism-max = 1
  }
}

real-time-user-facing-context {
  fork-join-executor {
    parallelism-max = 12
  }
}

