package com.keepit.common.db.slick

import java.sql._
import scala.collection.mutable
import scala.slick.session.{Session, ResultSetConcurrency, ResultSetType, ResultSetHoldability }
import scala.concurrent._
import scala.util.Try

import play.api.Logger
import com.keepit.common.time._
import java.util.concurrent.Executor
import java.{util, sql}
import java.util.Properties
import scala.Some
import scala.Array

class ConnectionWrapper(conn: Connection, dbLog: Logger, clock: Clock) extends Connection {
  def createStatement(): Statement = conn.createStatement()
  def prepareStatement(sql: String): PreparedStatement = {
    dbLog.info(s"t:${clock.now}\ttype:USE_PRP_STMT\tsql:$sql")
    conn.prepareStatement(sql)
  }
  def prepareCall(sql: String): CallableStatement = {
    dbLog.info(s"t:${clock.now}\ttype:USE_PRP_CALL\tsql:$sql")
    conn.prepareCall(sql)
  }
  def nativeSQL(sql: String): String = {
    dbLog.info(s"t:${clock.now}\ttype:USE_PRP_STMT\tsql:$sql")
    conn.nativeSQL(sql)
  }
  def setAutoCommit(autoCommit: Boolean): Unit = conn.setAutoCommit(autoCommit)
  def getAutoCommit: Boolean = conn.getAutoCommit
  def commit(): Unit = conn.commit()
  def rollback(): Unit = conn.rollback()
  def close(): Unit = conn.close()
  def isClosed: Boolean = conn.isClosed
  def getMetaData: DatabaseMetaData = conn.getMetaData
  def setReadOnly(readOnly: Boolean): Unit = conn.setReadOnly(readOnly)
  def isReadOnly: Boolean = conn.isReadOnly
  def setCatalog(catalog: String): Unit = conn.setCatalog(catalog)
  def getCatalog: String = conn.getCatalog
  def setTransactionIsolation(level: Int): Unit = conn.setTransactionIsolation(level)
  def getTransactionIsolation: Int = conn.getTransactionIsolation
  def getWarnings: SQLWarning = conn.getWarnings
  def clearWarnings(): Unit = conn.clearWarnings()
  def createStatement(resultSetType: Int, resultSetConcurrency: Int): Statement = conn.createStatement(resultSetType, resultSetConcurrency)
  def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int): PreparedStatement = {
    dbLog.info(s"t:${clock.now}\ttype:USE_PRP_STMT\tsql:$sql")
    conn.prepareStatement(sql, resultSetType, resultSetConcurrency)
  }
  def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int): CallableStatement = {
    dbLog.info(s"t:${clock.now}\ttype:USE_PRP_CALL\tsql:$sql")
    conn.prepareCall(sql, resultSetType, resultSetConcurrency)
  }
  def getTypeMap: util.Map[String, Class[_]] = conn.getTypeMap
  def setTypeMap(map: util.Map[String, Class[_]]): Unit = conn.setTypeMap(map)
  def setHoldability(holdability: Int): Unit = conn.setHoldability(holdability)
  def getHoldability: Int = conn.getHoldability
  def setSavepoint(): Savepoint = conn.setSavepoint()
  def setSavepoint(name: String): Savepoint = conn.setSavepoint(name)
  def rollback(savepoint: Savepoint): Unit = conn.rollback(savepoint)
  def releaseSavepoint(savepoint: Savepoint): Unit = conn.releaseSavepoint(savepoint)
  def createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): Statement = conn.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability)
  def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): PreparedStatement = {
    dbLog.info(s"t:${clock.now}\ttype:USE_PRP_STMT\tsql:$sql")
    conn.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability)
  }
  def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): CallableStatement = {
    dbLog.info(s"t:${clock.now}\ttype:USE_PRP_CALL\tsql:$sql")
    conn.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability)
  }
  def prepareStatement(sql: String, autoGeneratedKeys: Int): PreparedStatement = {
    dbLog.info(s"t:${clock.now}\ttype:USE_PRP_STMT\tsql:$sql")
    conn.prepareStatement(sql, autoGeneratedKeys)
  }
  def prepareStatement(sql: String, columnIndexes: Array[Int]): PreparedStatement = {
    dbLog.info(s"t:${clock.now}\ttype:USE_PRP_STMT\tsql:$sql")
    conn.prepareStatement(sql, columnIndexes)
  }
  def prepareStatement(sql: String, columnNames: Array[String]): PreparedStatement = {
    dbLog.info(s"t:${clock.now}\ttype:USE_PRP_STMT\tsql:$sql")
    conn.prepareStatement(sql, columnNames)
  }
  def createClob(): Clob = conn.createClob()
  def createBlob(): Blob = conn.createBlob()
  def createNClob(): NClob = conn.createNClob()
  def createSQLXML(): SQLXML = conn.createSQLXML()
  def isValid(timeout: Int): Boolean = conn.isValid(timeout)
  def setClientInfo(name: String, value: String): Unit = conn.setClientInfo(name, value)
  def setClientInfo(properties: Properties): Unit = conn.setClientInfo(properties)
  def getClientInfo(name: String): String = conn.getClientInfo(name)
  def getClientInfo: Properties = conn.getClientInfo
  def createArrayOf(typeName: String, elements: Array[AnyRef]): sql.Array = conn.createArrayOf(typeName, elements)
  def createStruct(typeName: String, attributes: Array[AnyRef]): Struct = conn.createStruct(typeName, attributes)
  def setSchema(schema: String): Unit = conn.setSchema(schema)
  def getSchema: String = conn.getSchema
  def abort(executor: Executor): Unit = conn.abort(executor)
  def setNetworkTimeout(executor: Executor, milliseconds: Int): Unit = conn.setNetworkTimeout(executor, milliseconds)
  def getNetworkTimeout: Int = conn.getNetworkTimeout
  def unwrap[T](iface: Class[T]): T = conn.unwrap(iface)
  def isWrapperFor(iface: Class[_]): Boolean = conn.isWrapperFor(iface)
}

object DBSession {
  abstract class SessionWrapper(val name: String, val masterSlave: Database.DBMasterSlave, _session: => Session) extends Session {
    private var open = false
    private var doRollback = false
    private var transaction: Option[Promise[Unit]] = None
    private var startTime: Long = -1
    lazy val session = {
      val s = _session
      if (inTransaction) s.conn.setAutoCommit(false)
      open = true
      startTime = System.currentTimeMillis
      s
    }
    lazy val clock = new SystemClock

    private def transactionFuture: Future[Unit] = {
      require(inTransaction, "Not in a transaction.")
      transaction.get.future
    }

    private val dbLog = Logger("com.keepit.db")
    def conn: Connection = new ConnectionWrapper(session.conn, dbLog, clock)
    def metaData = session.metaData
    def capabilities = session.capabilities
    override def resultSetType = session.resultSetType
    override def resultSetConcurrency = session.resultSetConcurrency
    override def resultSetHoldability = session.resultSetHoldability

    def close(): Unit = if (open) {
      session.close()
      val time = System.currentTimeMillis - startTime
      dbLog.info(s"t:${clock.now}\ttype:SESSION\tduration:${time}\tname:$name\ttype:$masterSlave")
    }

    def rollback() { doRollback = true }
    def inTransaction = transaction.nonEmpty

    def onTransactionSuccess[U](f: => U)(implicit executor: ExecutionContext): Unit = transactionFuture.onSuccess { case _: Unit => f }
    def onTransactionFailure [U](f: PartialFunction[Throwable, U])(implicit executor: ExecutionContext): Unit = transactionFuture.onFailure(f)
    def onTransactionComplete[U](f: Function[Try[Unit], U])(implicit executor: ExecutionContext): Unit = transactionFuture.onComplete(f)

    def withTransaction[T](f: => T): T = if (inTransaction) f else {
      if (open) conn.setAutoCommit(false)
      transaction = Some(Promise())
      try {
        var done = false
        try {
          val res = f
          done = true
          res
        } finally {
          if (open && !done || doRollback) {
            conn.rollback()
            transaction.get.failure(new Exception("Transaction was rolled back."))
          } else transaction.get.success()
        }
      } finally {
        if (open) conn.setAutoCommit(true)
        transaction = None
      }
    }

    private val statementCache = new mutable.HashMap[String, PreparedStatement]
    def getPreparedStatement(statement: String): PreparedStatement = {
      val preparedStatement = statementCache.getOrElseUpdate(statement, {
        val newPreparedStatement = this.conn.prepareStatement(statement)
        dbLog.info(s"t:${clock.now}\ttype:NEW_PRP_STMT\tcacheSize:${statementCache.size}\tstatement:$statement")
        newPreparedStatement
      })
      dbLog.info(s"t:${clock.now}\ttype:USE_PRP_STMT\tstatement:$statement")
      preparedStatement
    }

    override def forParameters(rsType: ResultSetType = resultSetType, rsConcurrency: ResultSetConcurrency = resultSetConcurrency,
      rsHoldability: ResultSetHoldability = resultSetHoldability) =
        _session.forParameters(rsType, rsConcurrency, rsHoldability)
  }

  abstract class RSession(name: String, masterSlave: Database.DBMasterSlave, roSession: => Session) extends SessionWrapper(name, masterSlave, roSession)
  class ROSession(masterSlave: Database.DBMasterSlave, roSession: => Session) extends RSession("RO", masterSlave, roSession)
  class RWSession(rwSession: => Session) extends RSession("RW", Database.Master, rwSession) //RWSession is always reading from master

  implicit def roToSession(roSession: ROSession): Session = roSession
  implicit def rwToSession(rwSession: RWSession): Session = rwSession
}
