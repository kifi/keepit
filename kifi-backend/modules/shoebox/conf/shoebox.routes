
GET     /login                      securesocial.controllers.LoginPage.login
GET     /logout                     securesocial.controllers.LoginPage.logout

# Relevant when we support traditional user signups:
GET     /register                   securesocial.controllers.Registration.signUp(token: String)
POST    /register                   securesocial.controllers.Registration.handleSignUp(token: String)

# OAuth provider entry points (e.g. "facebook")
GET     /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)
POST    /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)
# custom auth routes which set some session state
GET     /login/:provider            @com.keepit.controllers.core.AuthController.login(provider)
POST    /login/:provider            @com.keepit.controllers.core.AuthController.loginByPost(provider)
GET     /link/:provider             @com.keepit.controllers.core.AuthController.link(provider)
POST    /link/:provider             @com.keepit.controllers.core.AuthController.linkByPost(provider)
POST    /mobileauth/:provider       @com.keepit.controllers.core.AuthController.mobileAuth(provider)

POST    /disconnect/:provider       @com.keepit.controllers.website.HomeController.disconnect(provider)

##########################################
# Extension API
##########################################

POST    /bookmarks/add              @com.keepit.controllers.ext.ExtBookmarksController.addBookmarks
POST    /bookmarks/remove           @com.keepit.controllers.ext.ExtBookmarksController.remove()
POST    /bookmarks/private          @com.keepit.controllers.ext.ExtBookmarksController.updatePrivacy()
GET     /bookmarks/mutual/:id       @com.keepit.controllers.ext.ExtBookmarksController.getNumMutualKeeps(id: ExternalId[User])

POST    /messages                   @com.keepit.controllers.ext.ExtCommentController.sendMessageAction()
POST    /messages/:parentId         @com.keepit.controllers.ext.ExtCommentController.sendMessageReplyAction(parentId: ExternalId[Comment])

POST    /users/slider/suppress      @com.keepit.controllers.ext.ExtUserController.suppressSliderForSite

POST    /users/events               @com.keepit.controllers.ext.ExtEventController.logUserEvents
POST    /error/report               @com.keepit.controllers.ext.ExtErrorReportController.addErrorReport

# This should match the output format of S3ImageConfig#keyByExternalId
GET     /users/:id/pics/:size/0.jpg @com.keepit.controllers.assets.UserPictureController.get(size: Int, id: ExternalId[User])
POST    /users/pics/update      @com.keepit.controllers.assets.UserPictureController.update()

POST    /kifi/start                 @com.keepit.controllers.ext.ExtAuthController.start
GET     /whois                      @com.keepit.controllers.ext.ExtAuthController.whois
GET     /session/end                @com.keepit.controllers.ext.ExtAuthController.logOut

GET     /ext/ws                     @com.keepit.controllers.ext.ExtStreamController.ws()
GET     /ext/normalize              @com.keepit.controllers.ext.ExtPreferenceController.normalize(url: String)
GET     /ext/pref/rules                  @com.keepit.controllers.ext.ExtPreferenceController.getRules(version: String ?= "")
GET     /ext/prefs                  @com.keepit.controllers.ext.ExtPreferenceController.getPrefs()
POST    /ext/pref/keeperPosition         @com.keepit.controllers.ext.ExtPreferenceController.setKeeperPosition()
POST    /ext/pref/enterToSend            @com.keepit.controllers.ext.ExtPreferenceController.setEnterToSend(enterToSend: Boolean)
GET     /ext/user/friends                @com.keepit.controllers.ext.ExtUserController.getFriends()
GET     /ext/user/networks               @com.keepit.controllers.ext.ExtUserController.getNetworks(friendExtId: ExternalId[User])
POST    /ext/pageDetails            @com.keepit.controllers.ext.ExtPageController.getPageDetails()


POST    /search/chatter             @com.keepit.controllers.ext.ExtCommentController.getCounts
GET     /r/:id                      @com.keepit.controllers.ext.ExtDeepLinkController.handle(id: String)

POST    /devices/:deviceType        @com.keepit.controllers.website.UserController.registerDevice(deviceType: String)

##########################################
# Website
##########################################

GET     /                           @com.keepit.controllers.website.HomeController.home
GET     /install                    @com.keepit.controllers.website.HomeController.install
GET     /getting-started            @com.keepit.controllers.website.HomeController.gettingStarted

GET     /invite                     @com.keepit.controllers.website.InviteController.invite
POST    /invite                     @com.keepit.controllers.website.InviteController.inviteConnection
GET     /invite/:id                 @com.keepit.controllers.website.InviteController.acceptInvite(id: ExternalId[Invitation])
GET     /invite/confirm/:id         @com.keepit.controllers.website.InviteController.confirmInvite(id:ExternalId[Invitation], error_msg: Option[String], error_code: Option[Int])
GET     /sign-up                    @com.keepit.controllers.website.OnboardingController.signup(inviteId: String ?= "")
GET     /sign-up/terms              @com.keepit.controllers.website.OnboardingController.tos
POST    /sign-up/terms              @com.keepit.controllers.website.OnboardingController.tosAccept

GET     /feedback                   @com.keepit.controllers.website.FeedbackController.feedback
GET     /feedback/form              @com.keepit.controllers.website.FeedbackController.feedbackForm

##########################################
# Web API
##########################################

GET     /site/keeps/all             @com.keepit.controllers.website.BookmarksController.allKeeps(before: Option[String], after: Option[String], collection: Option[String], count: Int ?= Integer.MAX_VALUE)
POST    /site/keeps/add             @com.keepit.controllers.website.BookmarksController.keepMultiple()
POST    /site/keeps/remove          @com.keepit.controllers.website.BookmarksController.unkeepMultiple()
GET     /site/keeps/count           @com.keepit.controllers.website.BookmarksController.numKeeps()
GET     /site/keeps/:id             @com.keepit.controllers.website.BookmarksController.getKeepInfo(id: ExternalId[Bookmark])
POST    /site/keeps/:id/update      @com.keepit.controllers.website.BookmarksController.updateKeepInfo(id: ExternalId[Bookmark])
POST    /site/keeps/:id/delete      @com.keepit.controllers.website.BookmarksController.unkeep(id: ExternalId[Bookmark])
GET     /site/keeps/mutual/:id      @com.keepit.controllers.website.BookmarksController.mutualKeeps(id: ExternalId[User])
POST    /site/keeps/screenshot      @com.keepit.controllers.website.BookmarksController.getScreenshotUrl()

GET     /site/collections/all       @com.keepit.controllers.website.BookmarksController.allCollections(sort: String ?= "last_kept")
POST    /site/collections/ordering  @com.keepit.controllers.website.BookmarksController.updateCollectionOrdering()
POST    /site/collections/create @com.keepit.controllers.website.BookmarksController.saveCollection(id = "")
POST    /site/collections/:id/update @com.keepit.controllers.website.BookmarksController.saveCollection(id: String)
POST    /site/collections/:id/delete @com.keepit.controllers.website.BookmarksController.deleteCollection(id: ExternalId[Collection])
POST    /site/collections/:id/removeKeeps @com.keepit.controllers.website.BookmarksController.removeKeepsFromCollection(id: ExternalId[Collection])
POST    /site/collections/:id/addKeeps @com.keepit.controllers.website.BookmarksController.keepToCollection(id: ExternalId[Collection], removeOthers: Boolean = false)
POST    /site/collections/:id/setKeeps @com.keepit.controllers.website.BookmarksController.keepToCollection(id: ExternalId[Collection], removeOthers: Boolean = true)

POST    /site/chatter               @com.keepit.controllers.website.CommentController.getChatter

GET     /site/user/me               @com.keepit.controllers.website.UserController.currentUser()
POST    /site/user/me               @com.keepit.controllers.website.UserController.updateCurrentUser()
GET     /site/user/networks         @com.keepit.controllers.website.UserController.socialNetworkInfo()
GET     /site/user/:id/networks     @com.keepit.controllers.website.UserController.friendNetworkInfo(id: ExternalId[User])
POST    /site/user/:id/unfriend     @com.keepit.controllers.website.UserController.unfriend(id: ExternalId[User])
POST    /site/user/:id/friend       @com.keepit.controllers.website.UserController.friend(id: ExternalId[User])
POST    /site/user/:id/ignoreRequest @com.keepit.controllers.website.UserController.ignoreFriendRequest(id: ExternalId[User])
POST    /site/user/:id/cancelRequest @com.keepit.controllers.website.UserController.cancelFriendRequest(id: ExternalId[User])
POST    /site/user/:id/exclude      @com.keepit.controllers.website.UserController.excludeFriend(id: ExternalId[User])
POST    /site/user/:id/include      @com.keepit.controllers.website.UserController.includeFriend(id: ExternalId[User])
GET     /site/user/outgoingFriendRequests @com.keepit.controllers.website.UserController.outgoingFriendRequests
GET     /site/user/incomingFriendRequests @com.keepit.controllers.website.UserController.incomingFriendRequests
GET     /site/user/connections      @com.keepit.controllers.website.UserController.connections()
GET     /site/user/connections/count @com.keepit.controllers.website.UserController.connectionCount()
GET     /site/user/all-connections  @com.keepit.controllers.website.UserController.getAllConnections()
GET     /site/user/prefs            @com.keepit.controllers.website.UserController.getPrefs()
POST    /site/user/prefs            @com.keepit.controllers.website.UserController.savePrefs()

# Temporary hack for kifi.com site before we fully integrate it with Play!
GET     /site/                      @com.keepit.controllers.website.HomeController.kifiSite(path = "index.html", id = "")
GET     /site/collection/:id        @com.keepit.controllers.website.HomeController.kifiSite(path = "index.html", id: String)
GET     /site/search                @com.keepit.controllers.website.HomeController.kifiSite(path = "index.html", id = "")
GET     /site/profile               @com.keepit.controllers.website.HomeController.kifiSite(path = "index.html", id = "")
GET     /site/friends               @com.keepit.controllers.website.HomeController.kifiSite(path = "index.html", id = "")
GET     /site/friends/invite        @com.keepit.controllers.website.HomeController.kifiSite(path = "index.html", id = "")
GET     /site/friends/requests      @com.keepit.controllers.website.HomeController.kifiSite(path = "index.html", id = "")
GET     /site/*path                 @com.keepit.controllers.website.HomeController.kifiSite(path: String, id = "")
# NOTE: /site/*path route above must be last /site/ route because it will break any below it!

##########################################
# External Services API
##########################################

#todo(eishay): change routes and callback in sendgrid
POST    /admin/logging/emails       @com.keepit.controllers.admin.ElectronicMailLoggingController.doLog()

##########################################
# Admin
##########################################

GET     /admin                      @com.keepit.controllers.admin.AdminDashboardController.index
GET     /admin/graphs/users.json    @com.keepit.controllers.admin.AdminDashboardController.usersByDate
GET     /admin/graphs/bookmarks.json    @com.keepit.controllers.admin.AdminDashboardController.bookmarksByDate
GET     /admin/engineering/overview @com.keepit.controllers.admin.AdminEngineeringDashboardController.overview

GET     /admin/events               @com.keepit.controllers.admin.AdminEventController.reportList
POST    /admin/events/buildReport   @com.keepit.controllers.admin.AdminEventController.buildReport
GET     /admin/events/report        @com.keepit.controllers.admin.AdminEventController.getReport(reportName: String)
GET     /admin/events/activityData  @com.keepit.controllers.admin.AdminEventController.activityDataAsCsv

GET     /admin/realtime/event       @com.keepit.controllers.admin.AdminEventController.eventViewer
GET     /admin/realtime/event/stream      @com.keepit.controllers.admin.AdminEventController.eventStream

GET     /admin/bookmarks/page/:page @com.keepit.controllers.admin.AdminBookmarksController.bookmarksView(page: Int)
GET     /admin/bookmarks/edit       @com.keepit.controllers.admin.AdminBookmarksController.edit(id: Id[Bookmark])
POST    /admin/bookmarks/rescrape   @com.keepit.controllers.admin.AdminBookmarksController.rescrape
POST    /admin/bookmarks/update     @com.keepit.controllers.admin.AdminBookmarksController.updateBookmarks
POST    /admin/bookmarks/delete     @com.keepit.controllers.admin.AdminBookmarksController.delete(id: Id[Bookmark])


GET     /admin/screenshot/uri       @com.keepit.controllers.admin.AdminScreenshotController.updateUri(uriId: Id[NormalizedURI])
GET     /admin/screenshot/user      @com.keepit.controllers.admin.AdminScreenshotController.updateUser(userId: Id[User], drop: Int ?= 0, take: Int ?= 999999)

GET     /admin/scrape               @com.keepit.controllers.admin.ScraperController.scrape
GET     /admin/scraped/:uriId       @com.keepit.controllers.admin.ScraperController.getScraped(uriId: Id[NormalizedURI])

GET     /admin/data/integrity       @com.keepit.controllers.admin.UrlController.documentIntegrity(page: Int ?= 0, size: Int ?= 50)
GET     /admin/data/dupe            @com.keepit.controllers.admin.UrlController.duplicateDocumentDetection
GET     /admin/data/orphan          @com.keepit.controllers.admin.UrlController.orphanCleanup
GET     /admin/data/unscrapable     @com.keepit.controllers.admin.ScraperController.getUnscrapable()
POST    /admin/data/previewUnscrapable     @com.keepit.controllers.admin.ScraperController.previewUnscrapable()
POST    /admin/data/unscrapable     @com.keepit.controllers.admin.ScraperController.createUnscrapable()
GET     /admin/data/renormalize     @com.keepit.controllers.admin.UrlController.renormalize(readOnly: Boolean ?= true, domain: Option[String] ?= None)
POST    /admin/data/handleDuplicate @com.keepit.controllers.admin.UrlController.handleDuplicate
POST    /admin/data/handleDuplicates @com.keepit.controllers.admin.UrlController.handleDuplicates
GET     /admin/data/fixSeqNum       @com.keepit.controllers.admin.UrlController.fixSeqNum


GET     /admin/article/index        @com.keepit.controllers.admin.AdminArticleIndexerController.index
GET     /admin/article/reindex      @com.keepit.controllers.admin.AdminArticleIndexerController.reindex
GET     /admin/article/sequenceNumber @com.keepit.controllers.admin.AdminArticleIndexerController.getSequenceNumber
GET     /admin/article/index/:state @com.keepit.controllers.admin.AdminArticleIndexerController.indexByState(state: State[NormalizedURI])
GET     /admin/article/indexInfo    @com.keepit.controllers.admin.AdminArticleIndexerController.indexInfo
GET     /admin/article/refreshSearcher @com.keepit.controllers.admin.AdminArticleIndexerController.refreshSearcher
GET     /admin/article/dumpDoc/:uriId  @com.keepit.controllers.admin.AdminArticleIndexerController.dumpLuceneDocument(uriId: Id[NormalizedURI])

POST     /admin/search/spell/buildDict         @com.keepit.controllers.admin.AdminSpellCorrectorController.buildDictionary
GET     /admin/search/spell         @com.keepit.controllers.admin.AdminSpellCorrectorController.spellController
GET     /admin/search/spell/test-correct  @com.keepit.controllers.admin.AdminSpellCorrectorController.correctSpelling(query: String)
GET     /admin/search/scrape        @com.keepit.controllers.admin.ScraperController.searchScraper
GET     /admin/search/scrape/regex  @com.keepit.controllers.admin.ScraperController.rescrapeByRegex(urlRegex: String ?= "", withinHours: Int ?= 8)
GET     /admin/search/performance/viewPerformance @com.keepit.controllers.admin.AdminSearchPerformanceController.viewSearchPerformance


GET     /admin/uriGraph/reindex     @com.keepit.controllers.admin.AdminURIGraphController.reindex
GET     /admin/uriGraph/load        @com.keepit.controllers.admin.AdminURIGraphController.load
GET     /admin/uriGraph/update/:userId @com.keepit.controllers.admin.AdminURIGraphController.update(userId: Id[User])
GET     /admin/uriGraph/dumpDoc/:userId  @com.keepit.controllers.admin.AdminURIGraphController.dumpLuceneDocument(userId: Id[User])
GET     /admin/uriGraph/reindexCollection  @com.keepit.controllers.admin.AdminURIGraphController.reindexCollection
GET     /admin/uriGraph/dumpCollectionDoc/:colId  @com.keepit.controllers.admin.AdminURIGraphController.dumpCollectionLuceneDocument(colId: Id[Collection])

GET     /admin/commentIndex/reindex @com.keepit.controllers.admin.AdminCommentIndexController.reindex
GET     /admin/commentIndex/dumpDoc/:commentId  @com.keepit.controllers.admin.AdminCommentIndexController.dumpLuceneDocument(commentId: Id[Comment])

GET     /admin/users                @com.keepit.controllers.admin.AdminUserController.allUsersView
POST    /admin/users/merge          @com.keepit.controllers.admin.AdminUserController.merge
GET     /admin/users/page/:page     @com.keepit.controllers.admin.AdminUserController.usersView(page: Int)
POST    /admin/users/search         @com.keepit.controllers.admin.AdminUserController.searchUsers()
GET     /admin/user/:id             @com.keepit.controllers.admin.AdminUserController.userView(id: Id[User])
POST    /admin/user/:id             @com.keepit.controllers.admin.AdminUserController.userView(id: Id[User])
GET     /admin/user/:id/more-info   @com.keepit.controllers.admin.AdminUserController.moreUserInfoView(id: Id[User])
POST    /admin/user/:id/experiment/:exp  @com.keepit.controllers.admin.AdminUserController.addExperiment(id: Id[User], exp: String)
POST    /admin/user/bookmarks/:id/collections @com.keepit.controllers.admin.AdminUserController.updateCollectionsForBookmark(id: Id[Bookmark])
DELETE  /admin/user/:id/experiment/:exp  @com.keepit.controllers.admin.AdminUserController.removeExperiment(id: Id[User], exp: String)
POST    /admin/user/:id/state/:state  @com.keepit.controllers.admin.AdminUserController.changeState(id: Id[User], state: String)
POST    /admin/user/:id/update      @com.keepit.controllers.admin.AdminUserController.updateUser(id: Id[User])
POST    /admin/user/:id/setInvitesCount      @com.keepit.controllers.admin.AdminUserController.setInvitesCount(id: Id[User])
GET     /admin/user/:id/social_users/refresh @com.keepit.controllers.admin.AdminUserController.refreshAllSocialInfo(id: Id[User])
POST    /admin/user/:id/impersonate @com.keepit.controllers.admin.AdminAuthController.impersonate(id: Id[User])
POST    /admin/unimpersonate        @com.keepit.controllers.admin.AdminAuthController.unimpersonate()
GET     /admin/users/notify         @com.keepit.controllers.admin.AdminUserController.notification()
POST    /admin/users/sendNotification @com.keepit.controllers.admin.AdminUserController.sendNotificationToAllUsers()

GET     /admin/social_users/:page   @com.keepit.controllers.admin.AdminSocialUserController.socialUsersView(page: Int)
GET     /admin/social_user/:id      @com.keepit.controllers.admin.AdminSocialUserController.socialUserView(id: Id[SocialUserInfo])
GET     /admin/social_user/:id/refresh @com.keepit.controllers.admin.AdminSocialUserController.refreshSocialInfo(id: Id[SocialUserInfo])
GET     /admin/social_user/:id/reset @com.keepit.controllers.admin.AdminSocialUserController.resetSocialUser(id: Id[SocialUserInfo])

GET     /admin/ec2-instance         @com.keepit.controllers.admin.AmazonInstanceController.instanceInfo()
GET     /admin/cache                @com.keepit.controllers.admin.AdminCacheController.serviceView
GET     /admin/websocket            @com.keepit.controllers.admin.AdminWebSocketController.serviceView

GET     /admin/emails/comment       @com.keepit.controllers.admin.AdminEmailPreviewController.newComment
GET     /admin/emails/message       @com.keepit.controllers.admin.AdminEmailPreviewController.newMessage
GET     /admin/emails/message-reply @com.keepit.controllers.admin.AdminEmailPreviewController.newMessageReply

GET     /admin/electronicMails       @com.keepit.controllers.admin.ElectronicMailController.electronicMailsViewFirstPage
GET     /admin/electronicMails/:page @com.keepit.controllers.admin.ElectronicMailController.electronicMailsView(page: Int)

GET     /admin/follows              @com.keepit.controllers.admin.AdminCommentController.followsView
GET     /admin/comments             @com.keepit.controllers.admin.AdminCommentController.commentsViewFirstPage
GET     /admin/comments/:page       @com.keepit.controllers.admin.AdminCommentController.commentsView(page: Int)
GET     /admin/messages             @com.keepit.controllers.admin.AdminCommentController.messagesViewFirstPage
GET     /admin/messages/:page       @com.keepit.controllers.admin.AdminCommentController.messagesView(page: Int)
POST    /admin/notify/rebuild       @com.keepit.controllers.admin.AdminCommentController.recreateNotificationDetails(safeMode: Boolean ?= true)

GET     /admin/searchConfig/:id     @com.keepit.controllers.admin.AdminSearchConfigController.showUserConfig(id: Id[User])
POST    /admin/searchConfig/:id/set   @com.keepit.controllers.admin.AdminSearchConfigController.setUserConfig(id: Id[User])
GET     /admin/searchConfig/:id/reset @com.keepit.controllers.admin.AdminSearchConfigController.resetUserConfig(id: Id[User])

GET     /admin/searchExperiments    @com.keepit.controllers.admin.AdminSearchConfigController.getExperiments
POST    /admin/searchExperiments    @com.keepit.controllers.admin.AdminSearchConfigController.addNewExperiment
POST    /admin/searchExperiments/delete    @com.keepit.controllers.admin.AdminSearchConfigController.deleteExperiment
POST    /admin/searchExperiments/update    @com.keepit.controllers.admin.AdminSearchConfigController.updateExperiment
GET     /admin/searchExperiments/kvg/:id   @com.keepit.controllers.admin.AdminSearchConfigController.getKifiVsGoogle(id: Id[SearchConfigExperiment])
GET     /admin/searchExperiments/kifiHadResults/:id   @com.keepit.controllers.admin.AdminSearchConfigController.getKifiHadResults(id: Id[SearchConfigExperiment])

GET     /admin/explainResult        @com.keepit.controllers.admin.AdminSearchController.explain(query: String, uriId: Id[NormalizedURI], lang: String)
GET     /admin/search/results/:id   @com.keepit.controllers.admin.AdminSearchController.articleSearchResult(id: ExternalId[ArticleSearchResultRef])

GET     /admin/slider/rules         @com.keepit.controllers.admin.SliderAdminController.getRules
POST    /admin/slider/rules         @com.keepit.controllers.admin.SliderAdminController.saveRules
GET     /admin/slider/patterns      @com.keepit.controllers.admin.SliderAdminController.getPatterns
POST    /admin/slider/patterns      @com.keepit.controllers.admin.SliderAdminController.savePatterns
GET     /admin/slider/domainTags    @com.keepit.controllers.admin.SliderAdminController.getDomainTags
POST    /admin/slider/domainTags    @com.keepit.controllers.admin.SliderAdminController.saveDomainTags
GET     /admin/slider/domains       @com.keepit.controllers.admin.SliderAdminController.getDomainOverrides
GET     /admin/slider/classifications @com.keepit.controllers.admin.SliderAdminController.getClassifications(domain: Option[String])
POST    /admin/slider/domains       @com.keepit.controllers.admin.SliderAdminController.saveDomainOverrides
POST    /admin/slider/domains/fetch @com.keepit.controllers.admin.SliderAdminController.refetchClassifications
GET     /admin/slider/importEvents  @com.keepit.controllers.admin.SliderAdminController.getImportEvents
GET     /admin/slider/version       @com.keepit.controllers.admin.SliderAdminController.getVersionForm
POST    /admin/slider/version       @com.keepit.controllers.admin.SliderAdminController.broadcastLatestVersion(ver: String)

GET     /admin/phrases              @com.keepit.controllers.admin.PhraseController.displayPhrases(page: Int ?= 0)
POST    /admin/phrases/add          @com.keepit.controllers.admin.PhraseController.addPhrase
POST    /admin/phrases/refresh      @com.keepit.controllers.admin.PhraseController.refreshPhrases
POST    /admin/phrases/save         @com.keepit.controllers.admin.PhraseController.savePhrases

GET     /admin/invites              @com.keepit.controllers.admin.AdminInvitationController.displayInvitations(page: Int ?= 0, show: String ?= "all")
POST    /admin/invites/accept       @com.keepit.controllers.admin.AdminInvitationController.acceptUser(id: Id[SocialUserInfo])
POST    /admin/invites/reject       @com.keepit.controllers.admin.AdminInvitationController.rejectUser(id: Id[SocialUserInfo])

GET     /admin/labs/friendMap       @com.keepit.controllers.admin.AdminSearchLabsController.friendMap(q: Option[String] ?= None, minKeeps: Option[Int] ?= None)
GET     /admin/labs/friendMap.json  @com.keepit.controllers.admin.AdminSearchLabsController.friendMapJson(q: Option[String] ?= None, minKeeps: Option[Int] ?= None)

GET     /admin/learning/docTopic        @com.keepit.controllers.admin.TopicModelController.documentTopic(content: Option[String] ?= None, topicId: Option[String] ?= None)
POST    /admin/learning/inferDocTopic   @com.keepit.controllers.admin.TopicModelController.inferTopic
GET     /admin/learning/wordTopic       @com.keepit.controllers.admin.TopicModelController.wordTopic(word: Option[String] ?= None, topic: Option[String] ?= None)
POST    /admin/learning/getWordTopic    @com.keepit.controllers.admin.TopicModelController.getWordTopic
GET     /admin/learning/userTopic       @com.keepit.controllers.admin.TopicModelController.userTopic(userId: Option[String] ?= None, topic: Option[String] ?= None)
POST    /admin/learning/getUserTopic    @com.keepit.controllers.admin.TopicModelController.getUserTopic
GET     /admin/learning/topic/remodel   @com.keepit.controllers.admin.TopicModelController.remodel()
GET     /admin/learning/topics          @com.keepit.controllers.admin.TopicModelController.topicsViewDefault
GET     /admin/learning/topics/:flag/:page            @com.keepit.controllers.admin.TopicModelController.topicsView(flag: String, page: Int)
POST    /admin/learning/topics/updateTopicName/:id    @com.keepit.controllers.admin.TopicModelController.updateTopicName(id: Id[TopicName])
GET     /admin/learning/addTopics/:flag               @com.keepit.controllers.admin.TopicModelController.addTopics(flag: String)
POST    /admin/learning/saveAddedTopics/:flag         @com.keepit.controllers.admin.TopicModelController.saveAddedTopics(flag: String)
GET     /admin/learning/genTopicModelS3Files/:flag    @com.keepit.controllers.admin.TopicModelController.genModelFiles(flag: String)
GET     /admin/learning/viewTopicWords/:flag          @com.keepit.controllers.admin.TopicModelController.viewTopicWords(flag: String)
GET     /admin/learning/topicDetails/:flag/:index     @com.keepit.controllers.admin.TopicModelController.viewTopicDetails(flag: String, index: Int)
GET     /admin/learning/topic/summary                 @com.keepit.controllers.admin.TopicModelController.summary

GET     /admin/clusters/overview        @com.keepit.controllers.admin.AdminClusterController.clustersView

##########################################
# Common Healthcheck / service routes
##########################################
# Using a get so we can invoke from browser and have it take care of the auth part
GET     /admin/server               @com.keepit.controllers.admin.AdminHealthController.serviceView()
GET     /admin/benchmark            @com.keepit.controllers.admin.AdminBenchmarkController.benchmarks()
GET     /admin/healthcheck/error    @com.keepit.controllers.admin.AdminHealthController.causeError()
GET     /admin/healthcheck/emailErrors    @com.keepit.controllers.admin.AdminHealthController.reportErrors()
GET     /admin/healthcheck/errors   @com.keepit.controllers.admin.AdminHealthController.getErrors()
GET     /admin/healthcheck/resetErrorCount    @com.keepit.controllers.admin.AdminHealthController.resetErrorCount()

##########################################
#INTERNAL ROUTES/Shoebox
##########################################

GET     /internal/version                             @com.keepit.controllers.website.HomeController.version

GET     /internal/shoebox/database/getNormalizedURI   @com.keepit.controllers.shoebox.ShoeboxController.getNormalizedURI(id: Long)
GET     /internal/shoebox/database/getNormalizedURIs  @com.keepit.controllers.shoebox.ShoeboxController.getNormalizedURIs(ids: String)
GET     /internal/shoebox/database/normalizeURL       @com.keepit.controllers.shoebox.ShoeboxController.normalizeURL(url: String)
GET     /internal/shoebox/database/getUsers           @com.keepit.controllers.shoebox.ShoeboxController.getUsers(ids: String)
GET     /internal/shoebox/database/userIdsByExternalIds @com.keepit.controllers.shoebox.ShoeboxController.getUserIdsByExternalIds(ids: String)
GET     /internal/shoebox/database/getBasicUsers      @com.keepit.controllers.shoebox.ShoeboxController.getBasicUsers(ids: String)
GET     /internal/shoebox/database/collectionIdsByExternalIds @com.keepit.controllers.shoebox.ShoeboxController.getCollectionIdsByExternalIds(ids: String)
GET     /internal/shoebox/database/getUserOpt         @com.keepit.controllers.shoebox.ShoeboxController.getUserOpt(id: ExternalId[User])
GET     /internal/shoebox/database/getUserExperiments           @com.keepit.controllers.shoebox.ShoeboxController.getUserExperiments(id: Id[User])

GET     /internal/shoebox/database/getConnectedUsers  @com.keepit.controllers.shoebox.ShoeboxController.getConnectedUsers(userId: Id[User])
GET     /internal/shoebox/tracker/browsingHistory     @com.keepit.controllers.shoebox.ShoeboxController.getBrowsingHistoryFilter(userId: Id[User])
GET     /internal/shoebox/tracker/clickHistory        @com.keepit.controllers.shoebox.ShoeboxController.getClickHistoryFilter(userId: Id[User])
GET     /internal/shoebox/database/bookmark           @com.keepit.controllers.shoebox.ShoeboxController.getBookmarks(userId: Id[User])
GET     /internal/shoebox/database/changedBookmark    @com.keepit.controllers.shoebox.ShoeboxController.getBookmarksChanged(seqNum: Long, fetchSize: Int)
GET     /internal/shoebox/database/bookmarkByUriUser  @com.keepit.controllers.shoebox.ShoeboxController.getBookmarkByUriAndUser(uriId: Id[NormalizedURI], userId: Id[User])
GET     /internal/shoebox/database/changedComment     @com.keepit.controllers.shoebox.ShoeboxController.getCommentsChanged(seqNum: Long, fetchSize: Int)
GET     /internal/shoebox/database/commentRecipientIds  @com.keepit.controllers.shoebox.ShoeboxController.getCommentRecipientIds(commentId: Id[Comment])
POST    /internal/shoebox/persistServerSearchEvent    @com.keepit.controllers.shoebox.ShoeboxController.persistServerSearchEvent
POST    /internal/shoebox/database/sendMail           @com.keepit.controllers.shoebox.ShoeboxController.sendMail
GET     /internal/shoebox/database/getPhrasesByPage   @com.keepit.controllers.shoebox.ShoeboxController.getPhrasesByPage(page: Int, size: Int)
GET     /internal/shoebox/database/getCollectionsChanged @com.keepit.controllers.shoebox.ShoeboxController.getCollectionsChangedDeprecated(seqNum: Long, fetchSize: Int)
GET     /internal/shoebox/database/changedCollections @com.keepit.controllers.shoebox.ShoeboxController.getCollectionsChanged(seqNum: Long, fetchSize: Int)
GET     /internal/shoebox/database/getBookmarksInCollection @com.keepit.controllers.shoebox.ShoeboxController.getBookmarksInCollection(collectionId: Id[Collection])
GET     /internal/shoebox/database/getCollectionsByUser @com.keepit.controllers.shoebox.ShoeboxController.getCollectionsByUser(userId: Id[User])
GET     /internal/shoebox/database/getIndexable       @com.keepit.controllers.shoebox.ShoeboxController.getIndexable(seqNum: Long, fetchSize: Int)
POST    /internal/shoebox/database/createDeepLink      @com.keepit.controllers.ext.ExtDeepLinkController.createDeepLink()

GET     /internal/shoebox/database/getActiveExperiments @com.keepit.controllers.shoebox.ShoeboxController.getActiveExperiments
GET     /internal/shoebox/database/getExperiments     @com.keepit.controllers.shoebox.ShoeboxController.getExperiments
GET     /internal/shoebox/database/getExperiment      @com.keepit.controllers.shoebox.ShoeboxController.getExperiment(id: Id[SearchConfigExperiment])
POST    /internal/shoebox/database/saveExperiment     @com.keepit.controllers.shoebox.ShoeboxController.saveExperiment
POST    /internal/shoebox/database/reportArticleSearchResult  @com.keepit.controllers.shoebox.ShoeboxController.reportArticleSearchResult
GET     /internal/shoebox/database/socialUserInfoByNetworkAndSocialId @com.keepit.controllers.shoebox.ShoeboxController.getSocialUserInfoByNetworkAndSocialId(id: String, networkType: String)
GET     /internal/shoebox/database/socialUserInfosByUserId @com.keepit.controllers.shoebox.ShoeboxController.getSocialUserInfosByUserId(id: Id[User])
GET     /internal/shoebox/database/sessionByExternalId @com.keepit.controllers.shoebox.ShoeboxController.getSessionByExternalId(sessionId: ExternalId[UserSession])
GET     /internal/shoebox/database/searchFriends @com.keepit.controllers.shoebox.ShoeboxController.searchFriends(userId: Id[User])

POST    /internal/shoebox/channel/user                @com.keepit.controllers.shoebox.ShoeboxController.userChannelFanout()
POST    /internal/shoebox/channel/userBroadcast       @com.keepit.controllers.shoebox.ShoeboxController.userChannelBroadcastFanout()
POST    /internal/shoebox/channel/userCount           @com.keepit.controllers.shoebox.ShoeboxController.userChannelCountFanout()
POST    /internal/shoebox/channel/uri                 @com.keepit.controllers.shoebox.ShoeboxController.uriChannelFanout()
POST    /internal/shoebox/channel/uriCount            @com.keepit.controllers.shoebox.ShoeboxController.uriChannelCountFanout()

POST    /internal/shoebox/device/sendPushNotification @com.keepit.controllers.shoebox.ShoeboxController.sendPushNotification()

POST     /internal/shoebox/learning/suggestExperts    @com.keepit.controllers.shoebox.ExpertRecommenderController.suggestExperts()

POST    /internal/shoebox/logEvent                    @com.keepit.controllers.ext.ExtEventController.logEvent()

POST    /internal/geckoboard/refresh                  @com.keepit.reports.GeckoboardReporterController.refreshAll()

GET     /internal/migrateToEliza                      @com.keepit.controllers.shoebox.ShoeboxChatMigrationController.migrateToEliza()




->  / common.Routes
