

GET     /login                      @com.keepit.controllers.core.AuthController.loginPage(intent: Option[String] ?= None, publicLibraryId: Option[String] ?= None, libAuthToken: Option[String] ?= None, publicOrgId: Option[String] ?= None, orgAuthToken: Option[String] ?= None, publicKeepId: Option[String] ?= None, keepAuthToken: Option[String] ?= None)
GET     /ss/login                   com.keepit.social.providers.LoginPage.login
GET     /logout                     com.keepit.social.providers.LoginPage.logout

GET     /-ss/login                   securesocial.controllers.LoginPage.login
GET     /-logout                     securesocial.controllers.LoginPage.logout

GET     /contacts/import            @com.keepit.controllers.core.OAuth2Controller.importContacts(provider:Option[String], approvalPromptOpt:Option[String], redirectUrl:Option[String])
GET     /contacts/import/success    @com.keepit.controllers.website.ContactsImportController.importContactsSuccess(redirectUrl: Option[String], numContacts: Option[Int])
GET     /contacts/import/failure    @com.keepit.controllers.website.ContactsImportController.importContactsFailure(redirectUrl: Option[String])
GET     /contacts/refresh           @com.keepit.controllers.core.OAuth2Controller.refreshContacts(abookId:ExternalId[ABookInfo], provider:Option[String])
GET     /oauth2/start/:provider     @com.keepit.controllers.core.OAuth2Controller.start(provider:String, stateToken:Option[String], approvalPromptOpt:Option[String])
GET     /oauth2/callback/:provider  @com.keepit.controllers.core.OAuth2Controller.callback(provider:String)
GET     /oauth2/slack               @com.keepit.controllers.website.SlackOAuthController.registerSlackAuthorization(code: Option[String] ?= None, state: String)

# These really need to be non-site endpoints
GET     /site/slack/add                      @com.keepit.controllers.website.SlackOAuthController.addSlackTeam(slackTeamId: Option[SlackTeamId] ?= None, extraScopes: Option[String] ?= None)

GET     /signup                     @com.keepit.controllers.core.AuthController.signupPage()

# End new signup pages

POST    /auth/sign-up                 @com.keepit.controllers.core.AuthController.userPasswordSignup()
POST    /auth/email-finalize          @com.keepit.controllers.core.AuthController.userPassFinalizeAccountAction()
POST    /auth/social-finalize         @com.keepit.controllers.core.AuthController.socialFinalizeAccountAction()
POST    /auth/token-login/:provider   @com.keepit.controllers.core.AuthController.accessTokenLogin(provider: String)
POST    /auth/token-signup/:provider  @com.keepit.controllers.core.AuthController.accessTokenSignup(provider: String)
POST    /auth/oauth1-login/:provider  @com.keepit.controllers.core.AuthController.oauth1TokenLogin(provider: String)
POST    /auth/oauth1-signup/:provider @com.keepit.controllers.core.AuthController.oauth1TokenSignup(provider: String)
POST    /auth/token-finalize          @com.keepit.controllers.core.AuthController.tokenFinalizeAccountAction()
POST    /auth/email-signup            @com.keepit.controllers.core.AuthController.emailSignup()
POST    /auth/upload-binary-image     @com.keepit.controllers.core.AuthController.uploadBinaryPicture()
POST    /auth/upload-multipart-image  @com.keepit.controllers.core.AuthController.uploadFormEncodedPicture()
POST    /auth/cancel                  @com.keepit.controllers.core.AuthController.cancelAuth()

# See common.routes for our better ProviderController routes.

# SecureSocial routes need to exist, or it complains and dies.
GET     /-authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)
POST    /-authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)
GET     /authenticate/:provider      com.keepit.social.providers.ProviderController.authenticate(provider)
POST    /authenticate/:provider      com.keepit.social.providers.ProviderController.authenticateByPost(provider)


# custom auth routes which set some session state

GET     /login/after                @com.keepit.controllers.core.AuthController.afterLogin()
GET     /login/close                @com.keepit.controllers.core.AuthController.afterLoginClosePopup()
GET     /login/:provider            @com.keepit.controllers.core.AuthController.loginSocial(provider, close: Boolean ?= false)
POST    /auth/log-in                @com.keepit.controllers.core.AuthController.logInWithUserPass(link: String ?= "")

GET     /link/:provider             @com.keepit.controllers.core.AuthController.link(provider: String)

GET     /slack-connect              @com.keepit.controllers.core.AuthController.connectWithSlack()
GET     /slack-connect/go           @com.keepit.controllers.core.AuthController.connectWithSlackGo()
GET     /integrations/slack/start   @com.keepit.controllers.core.AuthController.startWithSlack(slackTeamId: Option[SlackTeamId] ?= None, extraScopes: Option[String] ?= None)

GET     /signup/:provider           @com.keepit.controllers.core.AuthController.signup(provider: String, publicLibraryId: Option[String] ?= None, intent: Option[String] ?= None, libAuthToken: Option[String] ?= None, publicOrgId: Option[String] ?= None, orgAuthToken: Option[String] ?= None, publicKeepId: Option[String] ?= None, keepAuthToken: Option[String] ?= None, slackTeamId: Option[String] ?= None, slackExtraScopes: Option[String] ?= None, returnOnFail: Boolean ?= false)

# do we still use this endpoint?
POST    /mobileauth/:provider       @com.keepit.controllers.mobile.MobileAuthController.accessTokenLogin(provider)

GET     /verify/:code               @com.keepit.controllers.core.AuthController.verifyEmail(code: EmailVerificationCode, orgPubId: Option[String] ?= None)

POST    /password/forgot            @com.keepit.controllers.core.AuthController.forgotPassword()
GET     /password/:code             @com.keepit.controllers.core.AuthController.setPasswordPage(code: String)
POST    /password/set               @com.keepit.controllers.core.AuthController.setPassword()

POST    /disconnect/:provider       @com.keepit.controllers.website.HomeController.disconnect(provider)

GET     /unsubscribe/*token         @com.keepit.controllers.website.EmailOptOutController.optOut(token: String)
POST    /unsubscribe/*token         @com.keepit.controllers.website.EmailOptOutController.optOutAction(token: String)
GET     /admin/unsubscribe          @com.keepit.controllers.website.EmailOptOutController.getToken(email: EmailAddress)

GET     /extmsg/email/mute          @com.keepit.controllers.website.EmailNonUserMuteController.optOut(publicId: String)
POST    /extmsg/email/mute          @com.keepit.controllers.website.EmailNonUserMuteController.optOutAction(publicId: String)


GET     /get                        @com.keepit.controllers.website.HomeController.get()


POST    /up/report                  @com.keepit.controllers.tracking.EventProxyController.report()


##########################################
# Special projects
##########################################

GET     /site/twitterQueuePosition  @com.keepit.controllers.website.TwitterWaitlistController.getFakeWaitlistPosition()

GET     /integrations/twitter         @com.keepit.controllers.website.TwitterWaitlistController.twitterWaitlistLandingRedirectHack()
GET     /integrations/twitter/request @com.keepit.controllers.website.TwitterWaitlistController.requestToTwitterWaitlistRedirectHack()
GET     /integrations/twitter/thanks  @com.keepit.controllers.website.TwitterWaitlistController.thanksForTwitterWaitlistRedirectHack()

GET     /twitter                    @com.keepit.controllers.website.TwitterWaitlistController.twitterWaitlistLanding()
GET     /twitter/request            @com.keepit.controllers.website.TwitterWaitlistController.requestToTwitterWaitlist()
GET     /twitter/thanks             @com.keepit.controllers.website.TwitterWaitlistController.thanksForTwitterWaitlist(target: Option[String])
GET     /twitter/sync-favorites     @com.keepit.controllers.website.TwitterWaitlistController.createFavoritesSync(k: String)

GET     /i/:id                      @com.keepit.controllers.website.InviteController.userInvite(id: ExternalId[User])
GET     /join/:creditCodeStr        @com.keepit.controllers.website.InviteController.creditInvite(creditCodeStr: String)
GET     /k/cached                   @com.keepit.controllers.website.KeepCacheController.getCachedKeep(id: ExternalId[Keep])

##########################################
# Extension API
##########################################

POST    /ext/events                 @com.keepit.controllers.tracking.EventProxyController.track()
GET     /ext/guide                  @com.keepit.controllers.ext.ExtUserController.getGuideInfo

POST    /ext/start                  @com.keepit.controllers.ext.ExtAuthController.start
POST    /ext/auth/:provider         @com.keepit.controllers.ext.ExtAuthController.jsTokenLogin(provider: String)
GET     /ext/auth                   @com.keepit.controllers.ext.ExtAuthController.getLoggedIn()
DELETE  /ext/auth                   @com.keepit.controllers.ext.ExtAuthController.logOut

POST    /ext/page                   @com.keepit.controllers.ext.ExtPageController.getPageInfo()

POST    /ext/keeps/new              @com.keepit.controllers.ext.ExtKeepController.createKeep()
POST    /ext/keeps/:id/messages     @com.keepit.controllers.ext.ExtKeepController.sendMessageOnKeep(id: PublicId[Keep])

GET     /ext/pref/rules             @com.keepit.controllers.ext.ExtPreferenceController.getRules()
GET     /ext/prefs                  @com.keepit.controllers.ext.ExtPreferenceController.getPrefs(version: Int ?= 1)
POST    /ext/pref/keeperPosition    @com.keepit.controllers.ext.ExtPreferenceController.setKeeperPositionOnSite()
POST    /ext/pref/keeperHidden      @com.keepit.controllers.ext.ExtPreferenceController.setKeeperHiddenOnSite()
POST    /ext/pref/lookHereMode      @com.keepit.controllers.ext.ExtPreferenceController.setLookHereMode(on: Boolean)
POST    /ext/pref/enterToSend       @com.keepit.controllers.ext.ExtPreferenceController.setEnterToSend(enterToSend: Boolean)
POST    /ext/pref/maxResults        @com.keepit.controllers.ext.ExtPreferenceController.setMaxResults(n: Int)
POST    /ext/pref/showExtMsgIntro   @com.keepit.controllers.ext.ExtPreferenceController.setShowExtMsgIntro(show: Boolean)
POST    /ext/pref/showLibraryIntro  @com.keepit.controllers.ext.ExtPreferenceController.setShowLibraryIntro(show: Boolean)
POST    /ext/pref/showExtMoveIntro  @com.keepit.controllers.ext.ExtPreferenceController.setShowExtMoveIntro(show: Boolean)
POST    /ext/pref/quoteAnywhereFtue @com.keepit.controllers.ext.ExtPreferenceController.setQuoteAnywhereFtue(show: Boolean)
POST    /ext/pref/hideSocialTooltip @com.keepit.controllers.ext.ExtPreferenceController.setHideSocialTooltip(hideTooltips: Boolean)
POST    /ext/pref/email/:kind/:send @com.keepit.controllers.ext.ExtPreferenceController.setEmailNotifyPreference(kind: com.keepit.common.mail.ElectronicMailCategory, send: Boolean)

GET     /ext/contacts/search        @com.keepit.controllers.ext.ExtUserController.searchForContacts(query:Option[String], limit: Option[Int])
POST    /ext/contacts/hide          @com.keepit.controllers.ext.ExtNonUserSearchController.hideEmailFromUser()
GET     /ext/keeps/suggestRecipients @com.keepit.controllers.ext.ExtUserController.suggestRecipient(query:Option[String], limit: Option[Int], drop: Option[Int], requested: Option[String])

POST    /ext/keeps/:id/recipients   @com.keepit.controllers.ext.ExtKeepController.modifyConnectionsForKeep(id: PublicId[Keep])

GET     /ext/libraries              @com.keepit.controllers.ext.ExtLibraryController.getLibraries(allowOpenCollab: Boolean ?= false)
POST    /ext/libraries              @com.keepit.controllers.ext.ExtLibraryController.createLibrary()
GET     /ext/libraries/:id          @com.keepit.controllers.ext.ExtLibraryController.getLibrary(id: PublicId[Library])
DELETE  /ext/libraries/:id          @com.keepit.controllers.ext.ExtLibraryController.deleteLibrary(id: PublicId[Library])
POST    /ext/libraries/:id/join     @com.keepit.controllers.ext.ExtLibraryController.joinLibrary(id: PublicId[Library])
POST    /ext/libraries/:id/leave    @com.keepit.controllers.ext.ExtLibraryController.leaveLibrary(id: PublicId[Library])
POST    /ext/libraries/:id/bookmarks @com.keepit.controllers.ext.ExtLibraryController.importBrowserBookmarks(id: PublicId[Library])
POST    /ext/libraries/:id/keeps    @com.keepit.controllers.ext.ExtLibraryController.addKeep(id: PublicId[Library])
GET     /ext/libraries/:id/keeps/:k @com.keepit.controllers.ext.ExtLibraryController.getKeep(id: PublicId[Library], k: ExternalId[Keep], is: Option[String] = None)
POST    /ext/libraries/:id/keeps/:k @com.keepit.controllers.ext.ExtLibraryController.updateKeep(id: PublicId[Library], k: ExternalId[Keep])
DELETE  /ext/libraries/:id/keeps/:k @com.keepit.controllers.ext.ExtLibraryController.removeKeep(id: PublicId[Library], k: ExternalId[Keep])
POST    /ext/libraries/:id/keeps/:k/note  @com.keepit.controllers.ext.ExtLibraryController.editKeepNote(id: PublicId[Library], k: ExternalId[Keep])
POST    /ext/libraries/:id/subscription @com.keepit.controllers.ext.ExtLibraryController.setSubscribedToUpdates(id: PublicId[Library], subscribed: Boolean)


GET     /ext/libraries/:id/keeps/:k/tags/suggest  @com.keepit.controllers.ext.ExtLibraryController.suggestTags(id: PublicId[Library], k: ExternalId[Keep],  q: Option[String] ?= None, n: Int ?= 5)
POST    /ext/libraries/:id/keeps/:k/image/upload @com.keepit.controllers.ext.ExtKeepImageController.uploadKeepImage(id: PublicId[Library], k: ExternalId[Keep])
GET     /ext/libraries/:id/keeps/:k/image/:token @com.keepit.controllers.ext.ExtKeepImageController.checkImageStatus(id: PublicId[Library], k: ExternalId[Keep], token: String)
POST    /ext/libraries/:id/keeps/:k/image @com.keepit.controllers.ext.ExtKeepImageController.changeKeepImage(id: PublicId[Library], k: ExternalId[Keep], is: Option[String] = None)

##########################################
# Mobile
##########################################

POST    /m/1/events                         @com.keepit.controllers.tracking.EventProxyController.track()

GET     /m/1/whatismyip                     @com.keepit.controllers.mobile.MobileAuthController.whatIsMyIp()

POST    /m/1/reportData                     @com.keepit.controllers.mobile.MobileUserController.reportData()

GET     /m/1/user/friendsDetails            @com.keepit.controllers.mobile.MobileUserController.friends(page: Int ?= 0, pageSize: Int ?= 1000)
GET     /m/1/user/networks                  @com.keepit.controllers.mobile.MobileUserController.socialNetworkInfo()
POST    /m/1/user/:origin/uploadContacts    @com.keepit.controllers.mobile.MobileUserController.uploadContacts(origin:ABookOriginType)
GET     /m/1/user/abooks                    @com.keepit.controllers.mobile.MobileUserController.abookInfo()
GET     /m/1/user/friends/recommended       @com.keepit.controllers.mobile.MobilePeopleRecommendationController.getFriendRecommendations(offset: Int ?= 0, limit: Int ?= 5)
POST    /m/1/user/friends/:id/hide          @com.keepit.controllers.mobile.MobilePeopleRecommendationController.hideFriendRecommendation(id: ExternalId[User])

GET     /m/2/keeps/all                      @com.keepit.controllers.mobile.MobileKeepsController.allKeepsV2(before: Option[String], after: Option[String], collection: Option[String], helprank: Option[String], count: Int ?= Integer.MAX_VALUE, withPageInfo: Boolean ?= false)

GET     /m/1/keeps/stream                   @com.keepit.controllers.mobile.MobileKeepsController.getKeepStream(limit: Int ?= 10, beforeId: Option[String], afterId: Option[String], filterKind: Option[String] ?= None, filterId: Option[String] ?= None, maxMessagesShown: Int ?= 8)

GET     /m/1/keeps/:id                      @com.keepit.controllers.mobile.MobileKeepsController.getKeepInfoV1(id: ExternalId[Keep], withFullInfo: Boolean ?= false, imageWidth: Option[Int] ?= None, imageHeight: Option[Int] ?= None, maxMessagesShown: Int ?= 8)
GET     /m/2/keeps/:id                      @com.keepit.controllers.mobile.MobileKeepsController.getKeepInfoV2(id: ExternalId[Keep], withFullInfo: Boolean ?= false, imageWidth: Option[Int] ?= None, imageHeight: Option[Int] ?= None, maxMessagesShown: Int ?= 8)
POST    /m/2/keeps/:id                      @com.keepit.controllers.mobile.MobileKeepsController.editKeepInfoV2(id: ExternalId[Keep])

GET     /m/1/collections/all                @com.keepit.controllers.mobile.MobileKeepsController.allCollections(sort: String ?= "last_kept")
GET     /m/1/user/me                        @com.keepit.controllers.mobile.MobileUserController.currentUser()
POST    /m/1/user/me                        @com.keepit.controllers.mobile.MobileUserController.updateCurrentUser()
POST    /m/1/user/me/name                   @com.keepit.controllers.mobile.MobileUserController.updateName()
POST    /m/1/user/me/biography              @com.keepit.controllers.mobile.MobileUserController.updateBiography()
GET     /m/1/user/prefs                     @com.keepit.controllers.mobile.MobileUserController.getPrefs()
POST    /m/1/user/notifyPrefs               @com.keepit.controllers.mobile.MobilePreferenceController.setNotifyPreferences()
POST    /m/1/user/pic/upload                @com.keepit.controllers.mobile.MobileUserController.uploadBinaryUserPicture()
GET     /m/1/tags/suggest                   @com.keepit.controllers.mobile.MobileKeepsController.suggestTags(keepId: Option[String], query: Option[String] ?= None, limit: Int ?= 5)

POST    /m/1/auth/accessTokenSignup/:provider   @com.keepit.controllers.mobile.MobileAuthController.accessTokenSignup(provider)
POST    /m/1/auth/accessTokenLogin/:provider    @com.keepit.controllers.mobile.MobileAuthController.accessTokenLogin(provider)
POST    /m/1/auth/oauth1TokenSignup/:provider   @com.keepit.controllers.mobile.MobileAuthController.oauth1TokenSignup(provider)
POST    /m/1/auth/oauth1TokenLogin/:provider    @com.keepit.controllers.mobile.MobileAuthController.oauth1TokenLogin(provider)
POST    /m/1/auth/log-in                        @com.keepit.controllers.mobile.MobileAuthController.loginWithUserPass(link: String ?= "")
POST    /m/1/auth/upload-binary-image           @com.keepit.controllers.mobile.MobileAuthController.uploadBinaryPicture()
POST    /m/1/auth/upload-multipart-image        @com.keepit.controllers.mobile.MobileAuthController.uploadFormEncodedPicture()
POST    /m/1/auth/sign-up                       @com.keepit.controllers.mobile.MobileAuthController.userPasswordSignup()
POST    /m/1/auth/email-finalize                @com.keepit.controllers.mobile.MobileAuthController.userPassFinalizeAccountAction()
POST    /m/1/auth/social-finalize               @com.keepit.controllers.mobile.MobileAuthController.socialFinalizeAccountAction()

POST    /m/1/password/forgot                    @com.keepit.controllers.mobile.MobileAuthController.forgotPassword()
POST    /m/1/password/change                    @com.keepit.controllers.mobile.MobileUserController.changePassword()

POST    /m/1/iphone/version/register            @com.keepit.controllers.mobile.MobileAuthController.registerIPhoneVersion()
POST    /m/1/android/version/register           @com.keepit.controllers.mobile.MobileAuthController.registerAndroidVersion()
POST    /m/1/android/store/params               @com.keepit.controllers.mobile.AndroidAppStoreParamsController.processAppStoreParams()

GET     /m/1/contacts/search                    @com.keepit.controllers.mobile.MobileContactsController.searchForNonUserContacts(q: String, n: Int ?= 4)
GET     /m/2/contacts/search                    @com.keepit.controllers.mobile.MobileContactsController.searchForAllContacts(query:Option[String], limit:Option[Int])


POST    /m/1/invite                             @com.keepit.controllers.mobile.MobileInviteController.inviteConnection

# Profile Page
GET     /m/1/user/:username/profile             @com.keepit.controllers.mobile.MobileUserProfileController.profile(username)
GET     /m/2/user/:id/profile                   @com.keepit.controllers.mobile.MobileUserProfileController.profileFromUserId(id: ExternalId[User])
GET     /m/1/user/:username/connections         @com.keepit.controllers.mobile.MobileUserProfileController.getProfileConnections(username: Username, limit: Int)
GET     /m/1/user/:username/libraries           @com.keepit.controllers.mobile.MobileUserProfileController.getProfileLibraries(username: Username, page: Int ?= 0, size: Int ?= 12, filter: String ?= "own")
GET     /m/1/user/:username/followers           @com.keepit.controllers.mobile.MobileUserProfileController.getProfileFollowers(username: Username, page: Int ?= 0, size: Int ?= 12)

GET     /m/2/user/:id/libraries                 @com.keepit.controllers.mobile.MobileUserProfileController.getProfileLibrariesV2(id: ExternalId[User], page: Int ?= 0, size: Int ?= 12, filter: LibraryFilter ?= LibraryFilter.OWN, ordering: Option[LibraryOrdering] ?= None, sortDirection: Option[SortDirection] ?= None, starredFirst: Boolean)

POST    /m/1/user/:id/unfriend                  @com.keepit.controllers.mobile.MobileUserController.unfriend(id: ExternalId[User])
POST    /m/1/user/:id/friend                    @com.keepit.controllers.mobile.MobileUserController.friend(id: ExternalId[User])
POST    /m/1/user/:id/ignoreRequest             @com.keepit.controllers.mobile.MobileUserController.ignoreFriendRequest(id: ExternalId[User])
GET     /m/1/user/:id/connections/mutual        @com.keepit.controllers.mobile.MobileMutualUserController.getMutualConnections(id: ExternalId[User], page: Int ?= 0, size: Int ?= 10)
GET     /m/1/user/:id/libraries/mutual          @com.keepit.controllers.mobile.MobileMutualUserController.getMutualLibraries(id: ExternalId[User], page: Int ?= 0, size: Int ?= 10)
GET     /m/1/user/outgoingFriendRequests        @com.keepit.controllers.mobile.MobileUserController.outgoingFriendRequests
GET     /m/1/user/incomingFriendRequests        @com.keepit.controllers.mobile.MobileUserController.incomingFriendRequests
POST    /m/1/user/delighted/answer              @com.keepit.controllers.mobile.MobileUserController.postDelightedAnswer()
POST    /m/1/user/delighted/cancel              @com.keepit.controllers.mobile.MobileUserController.cancelDelightedSurvey()
GET     /m/1/user/$id<[0-9a-f-]{36}> 			@com.keepit.controllers.mobile.MobileUserController.basicUserInfo(id: ExternalId[User], friendCount: Boolean ?= false)
POST    /m/1/user/:id/include                   @com.keepit.controllers.mobile.MobileUserController.includeFriend(id: ExternalId[User])
POST    /m/1/user/:id/exclude                   @com.keepit.controllers.mobile.MobileUserController.excludeFriend(id: ExternalId[User])
GET     /m/1/user/settings                      @com.keepit.controllers.mobile.MobileUserController.getSettings()
POST    /m/1/user/settings                      @com.keepit.controllers.mobile.MobileUserController.setSettings()
GET     /m/1/user/pending                       @com.keepit.controllers.mobile.MobileUserController.getPendingRequests(before: Option[DateTime] ?= None, limit: Int ?= 10)

POST    /m/1/attribution/appsflyer              @com.keepit.controllers.mobile.MobileUserController.setAppsflyerAttribution()

POST    /m/1/disconnect/:provider               @com.keepit.controllers.mobile.MobileUserController.disconnect(provider)

GET     /m/2/recos/top                          @com.keepit.controllers.mobile.MobileRecommendationsController.topRecosV2(recency: Float, more: Boolean ?= false)
GET     /m/3/recos/top                          @com.keepit.controllers.mobile.MobileRecommendationsController.topRecosV3(recency: Float, uriContext: Option[String] ?= None, libContext: Option[String] ?= None, uctx: Option[String] ?= None, lctx: Option[String] ?= None)
POST    /m/3/recos/top                          @com.keepit.controllers.mobile.MobileRecommendationsController.topRecosV3Post()
GET     /m/1/recos/public                       @com.keepit.controllers.mobile.MobileRecommendationsController.topPublicRecos()
POST    /m/1/recos/trash                        @com.keepit.controllers.mobile.MobileRecommendationsController.trash(id: ExternalId[NormalizedURI])
POST    /m/1/recos/feedback                     @com.keepit.controllers.website.RecommendationsController.updateUriRecommendationFeedback(id: ExternalId[NormalizedURI])

#DEPRECATED: use instead /m/1/keeps/stream
GET     /m/1/recos/keepUpdates                  @com.keepit.controllers.mobile.MobileRecommendationsController.keepUpdates(limit: Int ?= 10, beforeId: Option[String], afterId: Option[String])

POST    /m/1/feed                               @com.keepit.controllers.mobile.MobileRecommendationsController.feedV1Post()

GET     /m/1/libraries/marketing-suggestions    @com.keepit.controllers.mobile.MobileLibraryController.marketingSiteSuggestedLibraries()

GET     /m/1/users/:handle/libraries/:slug     @com.keepit.controllers.mobile.MobileLibraryController.getLibraryByPathV1(handle: Handle, slug: LibrarySlug, is: Option[String] ?= None)
GET     /m/2/users/:handle/libraries/:slug     @com.keepit.controllers.mobile.MobileLibraryController.getLibraryByPathV2(handle: Handle, slug: LibrarySlug, is: Option[String] ?= None)
POST    /m/1/libraries/add                      @com.keepit.controllers.mobile.MobileLibraryController.createLibrary()
POST    /m/1/libraries/:id/modify               @com.keepit.controllers.mobile.MobileLibraryController.modifyLibrary(id: PublicId[Library])
POST    /m/2/libraries/:id/modify               @com.keepit.controllers.mobile.MobileLibraryController.modifyLibraryV2(id: PublicId[Library])
POST    /m/1/libraries/:id/delete               @com.keepit.controllers.mobile.MobileLibraryController.deleteLibrary(id: PublicId[Library])
GET     /m/1/libraries                          @com.keepit.controllers.mobile.MobileLibraryController.getLibrarySummariesByUser()
POST    /m/1/libraries                          @com.keepit.controllers.mobile.MobileLibraryController.getWriteableLibrariesWithUrlV1()
POST    /m/2/libraries                          @com.keepit.controllers.mobile.MobileLibraryController.getWriteableLibrariesWithUrlV2()
POST    /m/3/libraries                          @com.keepit.controllers.mobile.MobileLibraryController.getWriteableLibrariesWithUrlV3()
GET     /m/1/libraries/:id                      @com.keepit.controllers.mobile.MobileLibraryController.getLibraryByIdV1(id: PublicId[Library], is: Option[String] ?= None)
GET     /m/2/libraries/:id                      @com.keepit.controllers.mobile.MobileLibraryController.getLibraryByIdV2(id: PublicId[Library], is: Option[String] ?= None)
POST    /m/1/libraries/:id/join                 @com.keepit.controllers.mobile.MobileLibraryController.joinLibrary(id: PublicId[Library])
POST    /m/1/libraries/joinMultiple             @com.keepit.controllers.mobile.MobileLibraryController.joinLibraries()
POST    /m/1/libraries/:id/decline              @com.keepit.controllers.mobile.MobileLibraryController.declineLibrary(id: PublicId[Library])
POST    /m/1/libraries/:id/leave                @com.keepit.controllers.mobile.MobileLibraryController.leaveLibrary(id: PublicId[Library])
GET     /m/1/libraries/:id/keeps                @com.keepit.controllers.mobile.MobileLibraryController.getKeepsV1(id: PublicId[Library], offset: Int ?= 0, limit: Int ?= 10, imageWidth: Option[Int] ?= None, imageHeight: Option[Int] ?= None, maxMessagesShown: Int ?= 8)
GET     /m/2/libraries/:id/keeps                @com.keepit.controllers.mobile.MobileLibraryController.getKeepsV2(id: PublicId[Library], offset: Int ?= 0, limit: Int ?= 10, imageWidth: Option[Int] ?= None, imageHeight: Option[Int] ?= None, maxMessagesShown: Int ?= 8)
POST    /m/2/libraries/:id/keeps                @com.keepit.controllers.mobile.MobileLibraryController.keepToLibraryV2(id: PublicId[Library])
DELETE  /m/1/libraries/:id/keeps/:kId           @com.keepit.controllers.mobile.MobileLibraryController.unkeepFromLibrary(id: PublicId[Library], kId: ExternalId[Keep])
DELETE  /m/1/libraries/:id/invite               @com.keepit.controllers.mobile.MobileLibraryController.revokeLibraryInvitation(id: PublicId[Library])
POST    /m/1/libraries/:id/invite               @com.keepit.controllers.mobile.MobileLibraryController.inviteUsersToLibrary(id: PublicId[Library])
POST    /m/1/libraries/:id/invite/link          @com.keepit.controllers.mobile.MobileLibraryController.createAnonymousInviteToLibrary(id: PublicId[Library])
# ↓↓↓ deprecated, do not use anymore ↓↓↓
GET     /m/1/libraries/:id/inviteInfo           @com.keepit.controllers.website.InviteController.getLibraryInviteInfo(id: PublicId[Library])
POST    /m/1/libraries/:id/subscription         @com.keepit.controllers.mobile.MobileLibraryController.setSubscribedToUpdates(id: PublicId[Library], subscribed: Boolean)
POST    /m/1/libraries/:id/image/upload         @com.keepit.controllers.mobile.MobileLibraryImageController.uploadLibraryImage(id: PublicId[Library], imageSize: Option[String] ?= None, posX: Option[Int] ?= None, posY: Option[Int] ?= None)
DELETE  /m/1/libraries/:id/image                @com.keepit.controllers.mobile.MobileLibraryImageController.removeLibraryImage(id: PublicId[Library])

GET     /m/1/libraries/:id/members              @com.keepit.controllers.mobile.MobileLibraryController.getLibraryMembersV1(id: PublicId[Library], offset: Int ?= 0, limit: Int ?= 20)
GET     /m/2/libraries/:id/members              @com.keepit.controllers.mobile.MobileLibraryController.getLibraryMembersV2(id: PublicId[Library], offset: Int ?= 0, limit: Int ?= 20)
GET     /m/1/libraries/:id/members/suggest      @com.keepit.controllers.mobile.MobileLibraryController.suggestMembers(id: PublicId[Library], q: Option[String] ?= None, n: Int ?= 5)
POST    /m/1/libraries/:id/members/:uId/access  @com.keepit.controllers.mobile.MobileLibraryController.updateLibraryMembership(id: PublicId[Library], uId: ExternalId[User])

POST    /m/1/content/flagUrl                @com.keepit.controllers.mobile.MobileUriController.flagContent()
GET     /m/1/inviteInfo                     @com.keepit.controllers.website.InviteController.getGeneralInviteInfo()

GET     /m/1/user/:id/organizations                      @com.keepit.controllers.mobile.MobileOrganizationController.getOrganizationsForUser(id: ExternalId[User])
GET     /m/1/organizations/invites                       @com.keepit.controllers.mobile.MobileOrganizationInviteController.getPendingOrganizationsForUser()
POST    /m/1/organizations/create                        @com.keepit.controllers.mobile.MobileOrganizationController.createOrganization()
GET     /m/1/organizations/sendCreateTeamEmail           @com.keepit.controllers.mobile.MobileOrganizationController.sendCreateTeamEmail(email: String)
GET     /m/1/organizations/:id                           @com.keepit.controllers.mobile.MobileOrganizationController.getOrganization(id: PublicId[Organization])
POST    /m/1/organizations/:id/modify                    @com.keepit.controllers.mobile.MobileOrganizationController.modifyOrganization(id: PublicId[Organization])
DELETE  /m/1/organizations/:id/delete                    @com.keepit.controllers.mobile.MobileOrganizationController.deleteOrganization(id: PublicId[Organization])
GET     /m/1/organizations/:id/members                   @com.keepit.controllers.mobile.MobileOrganizationMembershipController.getMembers(id: PublicId[Organization], offset: Int ?= 0, limit: Int ?= 20)
POST    /m/1/organizations/:id/members/invite            @com.keepit.controllers.mobile.MobileOrganizationInviteController.inviteUsers(id: PublicId[Organization])
POST    /m/1/organizations/:id/members/invites/accept    @com.keepit.controllers.mobile.MobileOrganizationInviteController.acceptInvitation(id: PublicId[Organization], authToken: Option[String] ?= None)
POST    /m/1/organizations/:id/members/invites/decline   @com.keepit.controllers.mobile.MobileOrganizationInviteController.declineInvitation(id: PublicId[Organization])
POST    /m/1/organizations/:id/members/invites/link      @com.keepit.controllers.mobile.MobileOrganizationInviteController.createAnonymousInviteToOrganization(id: PublicId[Organization])
POST    /m/1/organizations/:id/members/modify            @com.keepit.controllers.mobile.MobileOrganizationMembershipController.modifyMember(id: PublicId[Organization])
POST    /m/1/organizations/:id/members/remove            @com.keepit.controllers.mobile.MobileOrganizationMembershipController.removeMember(id: PublicId[Organization])
GET     /m/1/organizations/:id/libraries                 @com.keepit.controllers.mobile.MobileOrganizationController.getOrganizationLibraries(id: PublicId[Organization], offset: Int, limit: Int)

##########################################
# Website
##########################################

GET     /                           @com.keepit.controllers.website.HomeController.home
GET     /robots.txt                 @com.keepit.controllers.website.HomeController.robots
GET     /google25ae05cb8bf5b064.html @com.keepit.controllers.website.HomeController.googleWebmasterToolsSiteVerification
GET     /blog                       @com.keepit.controllers.website.HomeController.moved(uri = "http://blog.kifi.com")
GET     /blog/                      @com.keepit.controllers.website.HomeController.moved(uri = "http://blog.kifi.com")
GET     /about                      @com.keepit.controllers.website.HomeController.moved(uri = "/getting-started")
GET     /about/                     @com.keepit.controllers.website.HomeController.moved(uri = "/getting-started")
GET     /about/mission              @com.keepit.controllers.website.HomeController.moved(uri = "/getting-started")
GET     /about/culture              @com.keepit.controllers.website.HomeController.moved(uri = "/getting-started")
GET     /about/investors            @com.keepit.controllers.website.HomeController.moved(uri = "/")
GET     /about/team                 @com.keepit.controllers.website.HomeController.moved(uri = "/")
GET     /about/team.html            @com.keepit.controllers.website.HomeController.moved(uri = "/")
GET     /about/join_us              @com.keepit.controllers.website.HomeController.moved(uri = "/")
GET     /about/join_us.html         @com.keepit.controllers.website.HomeController.moved(uri = "/")
GET     /about/user_feedback        @com.keepit.controllers.website.HomeController.moved(uri = "/getting-started")
GET     /how_it_works               @com.keepit.controllers.website.HomeController.moved(uri = "/getting-started")
GET     /integrations/slack         @com.keepit.controllers.website.HomeController.slackIntegration
GET     /about/love                 @com.keepit.controllers.website.HomeController.route(path = "about/love")
GET     /getting-started/slack      @com.keepit.controllers.website.HomeController.route(path = "integrations/slack")
GET     /imports/pinboard           @com.keepit.controllers.website.HomeController.route(path = "imports/pinboard")
GET     /imports/kippt              @com.keepit.controllers.website.HomeController.route(path = "imports/kippt")
GET     /imports/instapaper         @com.keepit.controllers.website.HomeController.route(path = "imports/instapaper")
GET     /imports/evernote           @com.keepit.controllers.website.HomeController.route(path = "imports/evernote")
GET     /imports/diigo              @com.keepit.controllers.website.HomeController.route(path = "imports/diigo")
GET     /imports/pocket             @com.keepit.controllers.website.HomeController.route(path = "imports/pocket")
GET     /imports/delicious          @com.keepit.controllers.website.HomeController.route(path = "imports/delicious")
GET     /getting-started            @com.keepit.controllers.website.HomeController.route(path = "getting-started/users")
GET     /teams                      @com.keepit.controllers.website.HomeController.moved(uri = "/")
GET     /teams-confirmation         @com.keepit.controllers.website.HomeController.route(path = "teams-confirmation")
GET     /install                    @com.keepit.controllers.website.HomeController.install
GET     /getting-started            @com.keepit.controllers.website.HomeController.gettingStarted
GET     /terms                      @com.keepit.controllers.website.HomeController.route(path = "terms")
GET     /about/pricing              @com.keepit.controllers.website.HomeController.route(path = "about/pricing")
GET     /privacy                    @com.keepit.controllers.website.HomeController.route(path = "privacy")
GET     /parenting                  @com.keepit.controllers.website.HomeController.route(path = "parenting")
GET     /iphone                     @com.keepit.controllers.website.HomeController.iPhoneAppStoreRedirect
GET     /unsupported                @com.keepit.controllers.website.HomeController.unsupported
GET     /libraries/featured         @com.keepit.controllers.website.HomeController.route(path = "libraries/featured")

POST    /invite                     @com.keepit.controllers.website.InviteController.inviteConnection
GET     /invite/:id                 @com.keepit.controllers.website.InviteController.acceptInvite(id: ExternalId[Invitation])
GET     /invite/confirm/:id         @com.keepit.controllers.website.InviteController.confirmInvite(id:ExternalId[Invitation], source: String, error_msg: Option[String], error_code: Option[Int])

GET     /feedback                   @com.keepit.controllers.website.FeedbackController.feedback
GET     /feedback/form              @com.keepit.controllers.website.FeedbackController.feedbackForm

POST    /waitlist                   @com.keepit.controllers.website.FeatureWaitlistController.waitList
POST    /friends/invite/refresh     @com.keepit.controllers.website.InviteController.refreshAllSocialInfo

GET     /get-the-kifi-extension-on-your-iphone @com.keepit.controllers.website.HomeController.getKifiExtensionIPhone(s: String ?= "the other one is wrong")
GET     /get-the-kifi-extension-on-you-iphone @com.keepit.controllers.website.HomeController.getKifiExtensionIPhone(s: String ?= "this is wrong")

# This should match the output format of S3ImageConfig#keyByExternalId
GET     /users/:id/pics/:size/0.jpg @com.keepit.controllers.assets.UserPictureController.get(size: Int, id: ExternalId[User])
GET     /users/:id/pics/:size/:name @com.keepit.controllers.assets.UserPictureController.getPic(size: String, id: ExternalId[User], name: String)

GET     /default-pic/:name          @com.keepit.controllers.assets.UserPictureController.hackyRedirectForiOSv3(name: String)

##########################################
# Feeds (RSS)
##########################################
GET     /feeds/libraries/top        @com.keepit.controllers.website.FeedController.getTopLibraries()
GET     /feeds/libraries/new        @com.keepit.controllers.website.FeedController.getNewLibraries()

##########################################
# Web API
##########################################

POST    /site/events                @com.keepit.controllers.tracking.EventProxyController.track()

GET     /assets/sitemap.xml                     @com.keepit.controllers.website.SiteMapController.librariesSitemapLegacy()
GET     /assets/sitemap-libraries-0.xml         @com.keepit.controllers.website.SiteMapController.librariesSitemap()
GET     /assets/sitemap-users-0.xml             @com.keepit.controllers.website.SiteMapController.usersSitemap()

GET     /site/keeps/stream                    @com.keepit.controllers.website.KeepsController.getKeepStream(limit: Option[Int] ?= None, beforeId: Option[String], afterId: Option[String], filterKind: Option[String] ?= None, filterId: Option[String] ?= None, maxMessagesShown: Int ?= 8)
POST    /site/keeps/personalExport            @com.keepit.controllers.website.KeepsController.exportPersonalKeeps()
POST    /site/keeps/organizationExport        @com.keepit.controllers.website.KeepsController.exportOrganizationKeeps()
POST    /site/keeps/markAsRead                @com.keepit.controllers.website.DiscussionController.markKeepsAsRead()

POST    /site/keeps/:keepId/messages          @com.keepit.controllers.website.DiscussionController.sendMessageOnKeep(keepId: PublicId[Keep])
GET     /site/keeps/:keepId/messages          @com.keepit.controllers.website.DiscussionController.getMessagesOnKeep(keepId: PublicId[Keep], limit: Int ?= 10, fromId: Option[String] ?= None)
GET     /site/keeps/:keepId/activity          @com.keepit.controllers.website.KeepsController.getActivityForKeep(keepId: PublicId[Keep], eventsBefore: Option[DateTime] ?= None, maxEvents: Int ?= 10)
POST    /site/keeps/:keepId/messages/edit     @com.keepit.controllers.website.DiscussionController.editMessageOnKeep(keepId: PublicId[Keep])
POST    /site/keeps/:keepId/messages/delete   @com.keepit.controllers.website.DiscussionController.deleteMessageOnKeep(keepId: PublicId[Keep])
POST    /site/keeps/:keepId/title             @com.keepit.controllers.website.KeepsController.updateKeepTitle(keepId: PublicId[Keep])
POST    /site/keeps/:keepId/note              @com.keepit.controllers.website.KeepsController.editKeepNote(keepId: PublicId[Keep])
GET     /site/keeps/:id                       @com.keepit.controllers.website.KeepsController.getKeepInfo(id: InternalOrExternalId[Keep], maxMessagesShown: Int ?= 8, authToken: Option[String] ?= None)

GET     /site/collections/page      @com.keepit.controllers.website.KeepsController.pageCollections(sort: String ?= "last_kept", offset : Int ?= 0, pageSize: Int ?= 0)
POST    /site/collections/delete    @com.keepit.controllers.website.KeepsController.deleteCollectionByTag(tag: String)
POST    /site/collections/rename    @com.keepit.controllers.website.KeepsController.renameCollectionByTag()
GET     /site/collections/search    @com.keepit.controllers.website.KeepsController.searchUserTags(query: String, limit: Option[Int] = None)

# Profile pages
GET     /site/user/:name/profile    @com.keepit.controllers.website.UserProfileController.getProfile(name: Username)
GET     /site/user/:name/libraries  @com.keepit.controllers.website.UserProfileController.getProfileLibraries(name: Username, page: Int ?= 0, size: Int ?= 12, filter: String ?= "own")
GET     /site/users/:name/connections @com.keepit.controllers.website.UserProfileController.getProfileConnections(name: Username, n: Int ?= 12)
GET     /site/users/:name/followers  @com.keepit.controllers.website.UserProfileController.getProfileFollowers(name: Username, n: Int ?= 12)
GET     /site/users/:ids            @com.keepit.controllers.website.UserProfileController.getProfileUsers(ids)
GET     /site/users/:id/connections/mutual @com.keepit.controllers.website.UserProfileController.getMutualConnections(id: ExternalId[User])
GET     /site/users/:id/libraries/mutual  @com.keepit.controllers.website.UserProfileController.getMutualLibraries(id: ExternalId[User], page: Int ?= 0, size: Int ?= 12)
GET     /site/users/:id/basicLibraries   @com.keepit.controllers.website.LibraryController.getLHRLibrariesForUser(id: ExternalId[User], ordering: Option[String] ?= None, direction: Option[String] ?= None, offset: Int, limit: Int, windowSize: Option[Int] ?= None)

GET     /site/libraries             @com.keepit.controllers.website.LibraryController.getLibrarySummariesByUser()
GET     /site/keepableLibraries     @com.keepit.controllers.website.LibraryController.getKeepableLibraries(includeOrgLibraries: Boolean ?= false)
POST    /site/libraries/add         @com.keepit.controllers.website.LibraryController.addLibrary()
POST    /site/libraries/copy        @com.keepit.controllers.website.LibraryController.copyKeeps()
POST    /site/libraries/move        @com.keepit.controllers.website.LibraryController.moveKeeps()

GET     /site/libraries/marketing-suggestions   @com.keepit.controllers.website.LibraryController.marketingSiteSuggestedLibraries()

GET     /site/libraries/:id         @com.keepit.controllers.website.LibraryController.getLibraryById(id: PublicId[Library], showPublishedLibraries: Boolean ?= false, is: Option[String] ?= None)
GET     /site/libraries/:id/summary         @com.keepit.controllers.website.LibraryController.getLibrarySummaryById(id: PublicId[Library])
GET     /site/libraries/:id/updates         @com.keepit.controllers.website.LibraryController.getLibraryUpdates(id: PublicId[Library], since: DateTime)
POST    /site/libraries/:id/modify  @com.keepit.controllers.website.LibraryController.modifyLibrary(id: PublicId[Library])
POST    /site/libraries/:id/delete  @com.keepit.controllers.website.LibraryController.removeLibrary(id: PublicId[Library])
POST    /site/libraries/:id/invite  @com.keepit.controllers.website.LibraryController.inviteUsersToLibrary(id: PublicId[Library])
DELETE  /site/libraries/:id/invite  @com.keepit.controllers.website.LibraryController.revokeLibraryInvitation(id: PublicId[Library])
POST    /site/libraries/:id/join    @com.keepit.controllers.website.LibraryController.joinLibrary(id: PublicId[Library], authToken: Option[String] ?= None, subscribed: Option[Boolean] ?= None)
POST    /site/libraries/joinMultiple    @com.keepit.controllers.website.LibraryController.joinLibraries()
POST    /site/libraries/:id/decline @com.keepit.controllers.website.LibraryController.declineLibrary(id: PublicId[Library])
POST    /site/libraries/:id/leave   @com.keepit.controllers.website.LibraryController.leaveLibrary(id: PublicId[Library])
POST    /site/libraries/:id/subscription @com.keepit.controllers.website.LibraryController.setSubscribedToUpdates(id: PublicId[Library], subscribed: Boolean)

GET     /site/libraries/:id/keeps   @com.keepit.controllers.website.LibraryController.getKeeps(id: PublicId[Library], offset: Int ?= 0, limit: Int ?= 10, showPublishedLibraries: Boolean ?= false, maxMessagesShown: Int ?= 8)
POST    /site/libraries/:id/keeps   @com.keepit.controllers.website.LibraryController.addKeeps(id: PublicId[Library])
POST    /site/libraries/:id/keeps/delete   @com.keepit.controllers.website.LibraryController.removeKeeps(id: PublicId[Library])
DELETE  /site/libraries/:id/keeps/:k   @com.keepit.controllers.website.LibraryController.removeKeep(id: PublicId[Library], k: ExternalId[Keep])
GET     /site/libraries/:id/keeps/:k/tags/suggest  @com.keepit.controllers.website.LibraryController.suggestTags(id: PublicId[Library], k: ExternalId[Keep], q: Option[String] ?= None, n: Int ?= 5)
GET     /site/libraries/:id/tags/suggest  @com.keepit.controllers.website.LibraryController.suggestTagsSimple(id: PublicId[Library], n: Int ?= 5)
POST    /site/libraries/:id/keeps/:k/image        @com.keepit.controllers.website.LibraryController.changeKeepImage(id: PublicId[Library], k: ExternalId[Keep], is: Option[String] = None)

GET     /site/libraries/:id/related                @com.keepit.controllers.website.LibraryController.relatedLibraries(id: PublicId[Library])

GET     /site/libraries/:id/members               @com.keepit.controllers.website.LibraryController.getLibraryMembers(id: PublicId[Library], offset: Int ?= 0, limit: Int ?= 10)
GET     /site/libraries/:id/members/suggest       @com.keepit.controllers.website.LibraryController.suggestMembers(id: PublicId[Library], q: Option[String] ?= None, n: Int ?= 5)
POST    /site/libraries/:id/members/:uId/access   @com.keepit.controllers.website.LibraryController.updateLibraryMembership(id: PublicId[Library], uId: ExternalId[User])

POST    /site/libraries/:id/importTag   @com.keepit.controllers.website.LibraryController.copyKeepsFromCollectionToLibrary(id: PublicId[Library], tag: String)
POST    /site/libraries/:id/moveTag     @com.keepit.controllers.website.LibraryController.moveKeepsFromCollectionToLibrary(id: PublicId[Library], tag: String)
POST    /site/libraries/:id/import-file  @com.keepit.controllers.website.BookmarkImporter.importFileToLibrary(id: PublicId[Library])

POST    /site/libraries/:id/image/upload    @com.keepit.controllers.website.LibraryImageController.uploadLibraryImage(id: PublicId[Library], is: Option[String] ?= None, x: Option[Int] ?= None, y: Option[Int] ?= None)
POST    /site/libraries/:id/image/position  @com.keepit.controllers.website.LibraryImageController.positionLibraryImage(id: PublicId[Library])
DELETE  /site/libraries/:id/image           @com.keepit.controllers.website.LibraryImageController.removeLibraryImage(id: PublicId[Library])
GET     /site/libraries/:ids/images         @com.keepit.controllers.website.LibraryImageController.getLibraryImages(ids: String, is: Option[String] ?= None)

## endpoints only for testing, should be deleted by 2016-01-10
POST    /site/rpb/setArrangement           @com.keepit.controllers.website.UserController.setPreferredLibraryArrangement()
GET     /site/rpb/user/:userId/libraries   @com.keepit.controllers.website.UserController.rpbGetUserLibraries(userId: ExternalId[User], fromId: Option[String] ?= None, offset: Int ?= 0, limit: Int ?= 10)
GET     /site/rpb/org/:orgId/libraries     @com.keepit.controllers.website.UserController.rpbGetOrgLibraries(orgId: PublicId[Organization], fromId: Option[String] ?= None, offset: Int ?= 0, limit: Int ?= 10)

POST  /site/libraries/:id/slack/add         @com.keepit.controllers.website.SlackController.setupLibraryIntegrations(id: PublicId[Library])
POST  /site/libraries/:id/slack/push/:ltsId        @com.keepit.controllers.website.SlackController.pushLibrary(id: PublicId[Library], ltsId: String, turnOn: Boolean)
POST  /site/libraries/:id/slack/ingest/:stlId      @com.keepit.controllers.website.SlackController.ingestChannel(id: PublicId[Library], stlId: String, turnOn: Boolean)
POST  /site/libraries/:id/slack/delete      @com.keepit.controllers.website.SlackController.deleteIntegrations(id: PublicId[Library])

GET     /site/user/me               @com.keepit.controllers.website.UserController.currentUser()
POST    /site/user/me               @com.keepit.controllers.website.UserController.updateCurrentUser()
POST    /site/user/me/username      @com.keepit.controllers.website.UserController.updateUsername()
POST    /site/user/me/name          @com.keepit.controllers.website.UserController.updateName()
POST    /site/user/me/biography     @com.keepit.controllers.website.UserController.updateBiography()
POST    /site/user/me/email        @com.keepit.controllers.website.UserController.addEmail()
PUT     /site/user/me/email        @com.keepit.controllers.website.UserController.changePrimaryEmail()
DELETE  /site/user/me/email        @com.keepit.controllers.website.UserController.removeEmail()
GET     /site/user/email            @com.keepit.controllers.website.UserController.getEmailInfo(email: EmailAddress)
POST    /site/user/password         @com.keepit.controllers.website.UserController.changePassword()
GET     /site/user/import-status    @com.keepit.controllers.website.UserController.importStatus()
GET     /site/user/networks         @com.keepit.controllers.website.UserController.socialNetworkInfo()
GET     /site/user/abooks           @com.keepit.controllers.website.UserController.abookInfo()
GET     /site/user/settings         @com.keepit.controllers.website.UserController.getSettings()
POST    /site/user/settings         @com.keepit.controllers.website.UserController.setSettings()
GET     /site/user/leftHandRail     @com.keepit.controllers.website.UserProfileController.getLeftHandRail(numLibs: Int ?= 6, windowSize: Option[Int] ?= None)

GET     /user/buzzState             @com.keepit.controllers.website.UserController.getBuzzState(userId: Option[Long] ?= None)
POST    /user/updateLastSeenAnnouncement  @com.keepit.controllers.website.UserController.updateLastSeenAnnouncement()

# regex below prevents route from usurping requests intended for other routes, like /site/user/friends
GET     /site/user/$id<[0-9a-f-]{36}> @com.keepit.controllers.website.UserController.basicUserInfo(id: ExternalId[User], friendCount: Boolean ?= false)
GET     /site/user/:id/networks     @com.keepit.controllers.website.UserController.friendNetworkInfo(id: ExternalId[User])
POST    /site/user/:id/unfriend     @com.keepit.controllers.website.UserController.unfriend(id: ExternalId[User])
POST    /site/user/:id/friend       @com.keepit.controllers.website.UserController.friend(id: ExternalId[User])
POST    /site/user/:id/ignoreRequest @com.keepit.controllers.website.UserController.ignoreFriendRequest(id: ExternalId[User])
POST    /site/user/:id/cancelRequest @com.keepit.controllers.website.UserController.cancelFriendRequest(id: ExternalId[User])
POST    /site/user/:id/exclude      @com.keepit.controllers.website.UserController.excludeFriend(id: ExternalId[User])
POST    /site/user/:id/include      @com.keepit.controllers.website.UserController.includeFriend(id: ExternalId[User])
GET     /site/user/outgoingFriendRequests @com.keepit.controllers.website.UserController.outgoingFriendRequests
GET     /site/user/incomingFriendRequests @com.keepit.controllers.website.UserController.incomingFriendRequests

POST    /site/user/hideOrgDomain   @com.keepit.controllers.website.UserController.hideOrganizationDomain(orgId: PublicId[Organization])

GET     /site/user/friends          @com.keepit.controllers.website.UserController.friends(page: Int ?= 0, pageSize: Int ?= 1000)
GET     /site/user/friends/recommended   @com.keepit.controllers.website.PeopleRecommendationController.getFriendRecommendations(offset: Int ?= 0, limit: Int ?= 5)
GET     /site/user/friends/recommended/cards @com.keepit.controllers.website.UserProfileController.getFriendRecommendations(n: Int ?= 12, ids: Int ?= 12)
GET     /site/user/invite/recommended    @com.keepit.controllers.website.PeopleRecommendationController.getInviteRecommendations(offset: Int ?= 0, limit: Int ?= 5)
POST    /site/user/invite/hide           @com.keepit.controllers.website.PeopleRecommendationController.hideInviteRecommendation()
POST    /site/user/:id/hide              @com.keepit.controllers.website.PeopleRecommendationController.hideFriendRecommendation(id: ExternalId[User])

POST    /site/user/invite           @com.keepit.controllers.website.InviteController.inviteV2()
POST    /site/user/delighted/answer @com.keepit.controllers.website.UserController.postDelightedAnswer()
POST    /site/user/delighted/cancel @com.keepit.controllers.website.UserController.cancelDelightedSurvey()
POST    /site/user/close            @com.keepit.controllers.website.UserController.closeAccount()

GET     /site/user/connections/all/search    @com.keepit.controllers.website.TypeaheadController.searchWithInviteStatus(query:Option[String], limit:Option[Int], pictureUrl:Boolean ?= true)
GET     /site/user/contacts/search  @com.keepit.controllers.website.TypeaheadController.searchForContacts(query:Option[String], limit:Option[Int])

GET     /site/user/prefs            @com.keepit.controllers.website.UserController.getPrefs()
POST    /site/user/prefs            @com.keepit.controllers.website.UserController.savePrefs()
POST    /site/user/pic/upload       @com.keepit.controllers.website.UserController.uploadBinaryUserPicture()
POST    /site/user/pic              @com.keepit.controllers.website.UserController.setUserPicture()
POST    /site/user/resend-verification @com.keepit.controllers.website.UserController.resendVerificationEmail(email: EmailAddress)

POST    /site/sms                   @com.keepit.controllers.website.HomeController.sendSmsToGetKifi()
POST    /site/twitterSync           @com.keepit.controllers.website.TwitterWaitlistController.createSync(target: Option[String] ?= None)

POST          /site/organizations/create                        @com.keepit.controllers.website.OrganizationController.createOrganization()
GET           /site/user/:id/organizations                      @com.keepit.controllers.website.OrganizationController.getOrganizationsForUser(id: ExternalId[User])
GET           /site/organizations/:id                           @com.keepit.controllers.website.OrganizationController.getOrganization(id: PublicId[Organization])
POST          /site/organizations/:id/modify                    @com.keepit.controllers.website.OrganizationController.modifyOrganization(id: PublicId[Organization])
POST          /site/organizations/:id/transfer                  @com.keepit.controllers.website.OrganizationController.transferOrganization(id: PublicId[Organization])
DELETE        /site/organizations/:id/delete                    @com.keepit.controllers.website.OrganizationController.deleteOrganization(id: PublicId[Organization])
GET           /site/organizations/:id/members                   @com.keepit.controllers.website.OrganizationMembershipController.getMembers(id: PublicId[Organization], offset: Int ?= 0, limit: Int ?= 20)
POST          /site/organizations/:id/members/invite            @com.keepit.controllers.website.OrganizationInviteController.inviteUsers(id: PublicId[Organization])
POST          /site/organizations/:id/members/invites/cancel    @com.keepit.controllers.website.OrganizationInviteController.cancelInvites(id: PublicId[Organization])
POST          /site/organizations/:id/members/invites/accept    @com.keepit.controllers.website.OrganizationInviteController.acceptInvitation(id: PublicId[Organization], authToken: Option[String] ?= None)
POST          /site/organizations/:id/members/invites/decline   @com.keepit.controllers.website.OrganizationInviteController.declineInvitation(id: PublicId[Organization])
POST          /site/organizations/:id/members/invites/link      @com.keepit.controllers.website.OrganizationInviteController.createAnonymousInviteToOrganization(id: PublicId[Organization])
POST          /site/organizations/:id/members/modify            @com.keepit.controllers.website.OrganizationMembershipController.modifyMember(id: PublicId[Organization])
POST          /site/organizations/:id/members/remove            @com.keepit.controllers.website.OrganizationMembershipController.removeMember(id: PublicId[Organization])
GET           /site/organizations/:id/members/suggest           @com.keepit.controllers.website.OrganizationInviteController.suggestMembers(id: PublicId[Organization], query: Option[String], limit: Int)
GET           /site/organizations/:id/libraries                 @com.keepit.controllers.website.OrganizationController.getOrganizationLibraries(id: PublicId[Organization], offset: Int ?= 0, limit: Int ?= 20)
GET           /site/organizations/:id/basicLibraries            @com.keepit.controllers.website.OrganizationController.getLHRLibrariesForOrg(id: PublicId[Organization], offset: Int, limit: Int, windowSize: Option[Int] ?= None)
POST          /site/organizations/:id/avatar/upload             @com.keepit.controllers.website.OrganizationAvatarController.uploadAvatar(id: PublicId[Organization], x: Int, y: Int, s: Int)
GET           /site/organizations/:id/featureSettings           @com.keepit.controllers.website.OrganizationConfigController.getAccountFeatureSettings(id: PublicId[Organization])
POST          /site/organizations/:id/featureSettings           @com.keepit.controllers.website.OrganizationConfigController.setAccountFeatureSettings(id: PublicId[Organization])
POST          /site/organizations/:id/blacklistBackfill         @com.keepit.controllers.website.OrganizationConfigController.backfillSlackBlacklist(id: PublicId[Organization])
GET           /site/organizations/:id/getDomains                @com.keepit.controllers.website.OrganizationDomainOwnershipController.getDomains(id: PublicId[Organization])
POST          /site/organizations/:id/addDomain                 @com.keepit.controllers.website.OrganizationDomainOwnershipController.addDomain(id: PublicId[Organization])
POST          /site/organizations/:id/removeDomain              @com.keepit.controllers.website.OrganizationDomainOwnershipController.removeDomain(id: PublicId[Organization])
POST          /site/organizations/:id/addDomainAfterVerification  @com.keepit.controllers.website.OrganizationDomainOwnershipController.addDomainOwnershipAfterVerification(id: PublicId[Organization])
POST          /site/organizations/:id/sendMemberConfirmationEmail @com.keepit.controllers.website.OrganizationDomainOwnershipController.sendMemberConfirmationEmail(id: PublicId[Organization])
POST          /site/organizations/:id/sendOrganizationInviteViaSlack  @com.keepit.controllers.website.OrganizationInviteController.sendOrganizationInviteViaSlack(id: PublicId[Organization])

GET           /site/organizations/:id/referralCode              @com.keepit.controllers.website.PaymentsController.getReferralCode(id: PublicId[Organization])
POST          /site/organizations/:id/redeemCode                @com.keepit.controllers.website.PaymentsController.redeemCreditCode(id: PublicId[Organization])
GET           /site/organizations/:id/rewards                   @com.keepit.controllers.website.PaymentsController.getRewards(id: PublicId[Organization])

# ↓ Take out of /site/

GET           /site/slack/add/organizations                     @com.keepit.controllers.website.SlackController.getOrganizationsToConnectToSlackTeam()
POST          /site/organizations/create/slack                  @com.keepit.controllers.website.SlackController.createSlackTeam(slackTeamId: Option[SlackTeamId] ?= None, slackState: Option[String] ?= None)
POST          /site/organizations/slack/togglePersonalDigest    @com.keepit.controllers.website.SlackController.togglePersonalDigest(slackTeamId: SlackTeamId, slackUserId: SlackUserId, turnOn: Boolean)
POST          /site/organizations/:id/slack/connect             @com.keepit.controllers.website.SlackController.connectSlackTeam(id: PublicId[Organization], slackTeamId: Option[SlackTeamId] ?= None, slackState: Option[String] ?= None)
GET           /site/organizations/:id/slack/list                @com.keepit.controllers.website.SlackController.getOrgIntegrations(id: PublicId[Organization], max: Int ?= 100)
POST          /site/organizations/:id/slack/sync/public         @com.keepit.controllers.website.SlackController.syncPublicChannels(id: PublicId[Organization])
POST          /site/organizations/:id/slack/sync/private        @com.keepit.controllers.website.SlackController.syncPrivateChannels(id: PublicId[Organization])
POST          /site/organizations/:id/slack/mirrorComments      @com.keepit.controllers.website.SlackController.mirrorComments(id: PublicId[Organization], turnOn: Boolean)

GET           /site/user-or-org/:handle                   @com.keepit.controllers.website.UserOrOrganizationController.getByHandle(handle: Handle, authToken: Option[String] ?= None)
GET           /site/user-or-org/:handle/libraries         @com.keepit.controllers.website.UserOrOrganizationController.getLibrariesByHandle(handle: Handle, page: Int ?= 0, size: Int ?= 12, filter: String ?= "own")
GET           /site/user-or-org/:handle/libraries/:slug   @com.keepit.controllers.website.LibraryController.getLibraryByHandleAndSlug(handle: Handle, slug: LibrarySlug, authToken: Option[String] ?= None)

GET           /site/admin/billing/state                         @com.keepit.controllers.website.PaymentsController.getAccountState(pubId: PublicId[Organization])
POST          /site/admin/billing/state                         @com.keepit.controllers.website.PaymentsController.updateAccountState(pubId: PublicId[Organization], newPlanId: PublicId[com.keepit.payments.PaidPlan], newCardId: PublicId[com.keepit.payments.PaymentMethod])
GET           /site/admin/billing/state/preview                 @com.keepit.controllers.website.PaymentsController.previewAccountState(pubId: PublicId[Organization], newPlanId: PublicId[com.keepit.payments.PaidPlan], newCardId: PublicId[com.keepit.payments.PaymentMethod])
GET           /site/admin/billing/plans                         @com.keepit.controllers.website.PaymentsController.getAvailablePlans(pubId: PublicId[Organization])
GET           /site/admin/billing/ccToken                       @com.keepit.controllers.website.PaymentsController.getDefaultCreditCard(pubId: PublicId[Organization])
POST          /site/admin/billing/ccToken                       @com.keepit.controllers.website.PaymentsController.setCreditCardToken(pubId: PublicId[Organization])
POST          /site/admin/billing/card/add                      @com.keepit.controllers.website.PaymentsController.addCreditCard(pubId: PublicId[Organization])
POST          /site/admin/billing/card/default                  @com.keepit.controllers.website.PaymentsController.setDefaultCreditCard(pubId: PublicId[Organization])
GET           /site/admin/billing/card/default                  @com.keepit.controllers.website.PaymentsController.getDefaultCreditCard(pubId: PublicId[Organization])
GET           /site/admin/billing/contacts                      @com.keepit.controllers.website.OrganizationConfigController.getAccountContacts(pubId: PublicId[Organization])
POST          /site/admin/billing/contacts                      @com.keepit.controllers.website.OrganizationConfigController.setAccountContacts(pubId: PublicId[Organization])
GET           /site/admin/billing/featureSettings               @com.keepit.controllers.website.OrganizationConfigController.getAccountFeatureSettings(pubId: PublicId[Organization])
POST          /site/admin/billing/featureSettings               @com.keepit.controllers.website.OrganizationConfigController.setAccountFeatureSettings(pubId: PublicId[Organization])
POST          /site/admin/billing/plan                          @com.keepit.controllers.website.PaymentsController.updatePlan(pubId: PublicId[Organization], planPubId: PublicId[com.keepit.payments.PaidPlan])
GET           /site/admin/billing/events                        @com.keepit.controllers.website.PaymentsController.getEvents(pubId: PublicId[Organization], limit: Int, fromId: Option[String] ?= None, inclusive: Boolean ?= false)
##########################################
# Email-Link API
##########################################

GET     /r/$token<[0-9a-f-]{36}>    @com.keepit.controllers.email.EmailDeepLinkController.handle(token: String)
GET     /mr/:token                  @com.keepit.controllers.email.EmailDeepLinkController.handleMobile(token: String)
GET     /ir/:token                  @com.keepit.controllers.email.EmailDeepLinkController.handleIPhoneTempForDev(token: String)

##########################################
# External Services API
##########################################
POST    /api/sendgrid/webhook       @com.keepit.controllers.api.SendgridController.parseEvent()

##########################################
# Routes for testing purposes only
##########################################

GET     /test/me                    @com.keepit.controllers.testing.ForTestingOnlyController.me


##########################################
#INTERNAL ROUTES/Shoebox
##########################################

GET     /internal/shoebox/auth/getUserIdByIdentityId                   @com.keepit.controllers.internal.ShoeboxController.getUserIdByIdentityId(providerId: String, id: String)
GET     /internal/shoebox/database/getNormalizedURI   @com.keepit.controllers.internal.ShoeboxController.getNormalizedURI(id: Id[NormalizedURI])
POST    /internal/shoebox/database/getNormalizedURIByURL               @com.keepit.controllers.internal.ShoeboxController.getNormalizedURIByURL()
POST    /internal/shoebox/database/getNormalizedUriByUrlOrPrenormalize @com.keepit.controllers.internal.ShoeboxController.getNormalizedUriByUrlOrPrenormalize()
POST    /internal/shoebox/database/internNormalizedURI                 @com.keepit.controllers.internal.ShoeboxController.internNormalizedURI()
GET     /internal/shoebox/database/getUsers                            @com.keepit.controllers.internal.ShoeboxController.getUsers(ids: String)
POST    /internal/shoebox/database/userIdsByExternalIds                @com.keepit.controllers.internal.ShoeboxController.getUserIdsByExternalIds()
POST    /internal/shoebox/database/getBasicUsers                       @com.keepit.controllers.internal.ShoeboxController.getBasicUsers()
GET     /internal/shoebox/database/getRecipientsOnKeep                 @com.keepit.controllers.internal.ShoeboxController.getRecipientsOnKeep(keepId: Id[Keep])
POST    /internal/shoebox/database/getEmailAddressesForUsers           @com.keepit.controllers.internal.ShoeboxController.getEmailAddressesForUsers()
POST    /internal/shoebox/database/getEmailAddressForUsers             @com.keepit.controllers.internal.ShoeboxController.getEmailAddressForUsers()
GET     /internal/shoebox/database/getUserOpt                          @com.keepit.controllers.internal.ShoeboxController.getUserOpt(id: ExternalId[User])
GET     /internal/shoebox/database/getUserExperiments                  @com.keepit.controllers.internal.ShoeboxController.getUserExperiments(id: Id[User])
POST    /internal/shoebox/database/getExperimentsByUserIds             @com.keepit.controllers.internal.ShoeboxController.getExperimentsByUserIds()
GET     /internal/shoebox/database/getExperimentGenerators             @com.keepit.controllers.internal.ShoeboxController.getExperimentGenerators()
GET     /internal/shoebox/database/getNormalizedUriUpdates             @com.keepit.controllers.internal.ShoeboxDataPipeController.getNormalizedUriUpdates(lowSeq: SequenceNumber[ChangedURI], highSeq: SequenceNumber[ChangedURI])

GET     /internal/shoebox/database/getConnectedUsers  @com.keepit.controllers.internal.ShoeboxController.getConnectedUsers(userId: Id[User])
GET     /internal/shoebox/database/changedBookmark    @com.keepit.controllers.internal.ShoeboxDataPipeController.getBookmarksChanged(seqNum: SequenceNumber[Keep], fetchSize: Int)
GET     /internal/shoebox/database/bookmarkByUriUser  @com.keepit.controllers.internal.ShoeboxController.getBookmarkByUriAndUser(uriId: Id[NormalizedURI], userId: Id[User])
POST    /internal/shoebox/database/sendMail           @com.keepit.controllers.internal.ShoeboxController.sendMail
POST    /internal/shoebox/database/processAndSendMail @com.keepit.controllers.internal.ShoeboxController.processAndSendMail
GET     /internal/shoebox/database/getPhrasesChanged  @com.keepit.controllers.internal.ShoeboxDataPipeController.getPhrasesChanged(seqNum: SequenceNumber[Phrase], fetchSize: Int)
GET     /internal/shoebox/database/getIndexableUris   @com.keepit.controllers.internal.ShoeboxDataPipeController.getIndexableUris(seqNum: SequenceNumber[NormalizedURI], fetchSize: Int)
GET     /internal/shoebox/database/getIndexableUrisWithContent     @com.keepit.controllers.internal.ShoeboxDataPipeController.getIndexableUrisWithContent(seqNum: SequenceNumber[NormalizedURI], fetchSize: Int)
GET     /internal/shoebox/database/getHighestUriSeq   @com.keepit.controllers.internal.ShoeboxDataPipeController.getHighestUriSeq()
GET     /internal/shoebox/database/getUserIndexable   @com.keepit.controllers.internal.ShoeboxDataPipeController.getUserIndexable(seqNum: SequenceNumber[User], fetchSize: Int)
GET     /internal/shoebox/database/getUserConnectionsChanged       @com.keepit.controllers.internal.ShoeboxDataPipeController.getUserConnectionsChanged(seqNum: SequenceNumber[UserConnection], fetchSize: Int)
GET     /internal/shoebox/database/getSearchFriendsChanged         @com.keepit.controllers.internal.ShoeboxDataPipeController.getSearchFriendsChanged(seqNum: SequenceNumber[SearchFriend], fetchSize: Int)
GET     /internal/shoebox/database/getIndexableSocialConnections   @com.keepit.controllers.internal.ShoeboxDataPipeController.getIndexableSocialConnections(seqNum: SequenceNumber[SocialConnection], fetchSize: Int)
GET     /internal/shoebox/database/getIndexableSocialUserInfos     @com.keepit.controllers.internal.ShoeboxDataPipeController.getIndexableSocialUserInfos(seqNum: SequenceNumber[SocialUserInfo], fetchSize: Int)
GET     /internal/shoebox/database/getEmailAccountUpdates          @com.keepit.controllers.internal.ShoeboxDataPipeController.getEmailAccountUpdates(seqNum: SequenceNumber[EmailAccountUpdate], fetchSize: Int)
GET     /internal/shoebox/database/getKeepsAndTagsChanged                  @com.keepit.controllers.internal.ShoeboxDataPipeController.getKeepsAndTagsChanged(seqNum: SequenceNumber[Keep], fetchSize: Int)
GET     /internal/shoebox/database/getCrossServiceKeepsAndTagsChanged      @com.keepit.controllers.internal.ShoeboxDataPipeController.getCrossServiceKeepsAndTagsChanged(seqNum: SequenceNumber[Keep], fetchSize: Int)
GET     /internal/shoebox/database/getLibrariesChanged                     @com.keepit.controllers.internal.ShoeboxDataPipeController.getLibrariesChanged(seqNum: SequenceNumber[Library], fetchSize: Int)
GET     /internal/shoebox/database/getDetailedLibrariesChanged             @com.keepit.controllers.internal.ShoeboxDataPipeController.getDetailedLibrariesChanged(seqNum: SequenceNumber[Library], fetchSize: Int)
GET     /internal/shoebox/database/getLibraryMembershipsChanged            @com.keepit.controllers.internal.ShoeboxDataPipeController.getLibraryMembershipsChanged(seqNum: SequenceNumber[LibraryMembership], fetchSize: Int)
GET     /internal/shoebox/database/dumpLibraryURIIds                       @com.keepit.controllers.internal.ShoeboxDataPipeController.dumpLibraryURIIds(libId: Id[Library])
GET     /internal/shoebox/database/getIngestableOrganizations              @com.keepit.controllers.internal.ShoeboxDataPipeController.getIngestableOrganizations(seqNum: SequenceNumber[Organization], fetchSize: Int)
GET     /internal/shoebox/database/getIngestableOrganizationMemberships                 @com.keepit.controllers.internal.ShoeboxDataPipeController.getIngestableOrganizationMemberships(seqNum: SequenceNumber[OrganizationMembership], fetchSize: Int)
GET     /internal/shoebox/database/getIngestableOrganizationMembershipCandidates        @com.keepit.controllers.internal.ShoeboxDataPipeController.getIngestableOrganizationMembershipCandidates(seqNum: SequenceNumber[OrganizationMembershipCandidate], fetchSize: Int)
GET     /internal/shoebox/database/getIngestableUserIpAddresses           @com.keepit.controllers.internal.ShoeboxDataPipeController.getIngestableUserIpAddresses(seqNum: SequenceNumber[UserIpAddress], fetchSize: Int)
POST    /internal/shoebox/database/internDomainsByDomainNames            @com.keepit.controllers.internal.ShoeboxDataPipeController.internDomainsByDomainNames()
GET     /internal/shoebox/database/getIngestableOrganizationDomainOwnerships            @com.keepit.controllers.internal.ShoeboxDataPipeController.getIngestableOrganizationDomainOwnerships(seqNum: SequenceNumber[OrganizationDomainOwnership], fetchSize: Int)

POST    /internal/shoebox/database/createDeepLink     @com.keepit.controllers.internal.ShoeboxDeepLinkController.createDeepLink()
POST    /internal/shoebox/database/getDeepUrl         @com.keepit.controllers.internal.ShoeboxDeepLinkController.getDeepUrl()

GET     /internal/shoebox/database/getActiveExperiments @com.keepit.controllers.internal.ShoeboxController.getActiveExperiments
GET     /internal/shoebox/database/getExperiments     @com.keepit.controllers.internal.ShoeboxController.getExperiments
GET     /internal/shoebox/database/getExperiment      @com.keepit.controllers.internal.ShoeboxController.getExperiment(id: Id[SearchConfigExperiment])
POST    /internal/shoebox/database/saveExperiment     @com.keepit.controllers.internal.ShoeboxController.saveExperiment
GET     /internal/shoebox/database/socialUserInfosByUserId @com.keepit.controllers.internal.ShoeboxController.getSocialUserInfosByUserId(id: Id[User])
GET     /internal/shoebox/database/getPrimaryOrg      @com.keepit.controllers.internal.ShoeboxController.getPrimaryOrg(id: Id[User])
GET     /internal/shoebox/database/sessionViewByExternalId @com.keepit.controllers.internal.ShoeboxController.getSessionViewByExternalId(sessionId: UserSessionExternalId)
GET     /internal/shoebox/database/searchFriends      @com.keepit.controllers.internal.ShoeboxController.searchFriends(userId: Id[User])
GET     /internal/shoebox/database/unfriends          @com.keepit.controllers.internal.ShoeboxController.getUnfriends(userId: Id[User])

GET     /internal/shoebox/database/getOrganizationMembers          @com.keepit.controllers.internal.ShoeboxController.getOrganizationMembers(orgId: Id[Organization])
GET     /internal/shoebox/database/getOrganizationInviteViews      @com.keepit.controllers.internal.ShoeboxController.getOrganizationInviteViews(orgId: Id[Organization])
GET     /internal/shoebox/database/hasOrganizationMembership       @com.keepit.controllers.internal.ShoeboxController.hasOrganizationMembership(orgId: Id[Organization], userId: Id[User])
POST    /internal/shoebox/database/getOrganizationsForUsers        @com.keepit.controllers.internal.ShoeboxController.getOrganizationsForUsers()
GET     /internal/shoebox/database/getOrgTrackingValues            @com.keepit.controllers.internal.ShoeboxController.getOrgTrackingValues(orgId: Id[Organization])
POST    /internal/shoebox/database/getBasicOrganizationsByIds            @com.keepit.controllers.internal.ShoeboxController.getBasicOrganizationsByIds()
GET     /internal/shoebox/database/getOrganizationUserRelationship       @com.keepit.controllers.internal.ShoeboxController.getOrganizationUserRelationship(orgId: Id[Organization], userId: Id[User])
POST    /internal/shoebox/database/getUserPermissionsByOrgId       @com.keepit.controllers.internal.ShoeboxController.getUserPermissionsByOrgId()

POST    /internal/shoebox/logEvent                    @com.keepit.controllers.ext.ExtEventController.logEvent()

POST    /internal/geckoboard/refresh                  @com.keepit.reports.GeckoboardReporterController.refreshAll()

GET     /internal/shoebox/database/getFriendRequestRecipientIdBySender         @com.keepit.controllers.internal.ShoeboxController.getFriendRequestsRecipientIdBySender(senderId: Id[User])
GET     /internal/shoebox/database/userValue                                   @com.keepit.controllers.internal.ShoeboxController.getUserValue(userId: Id[User], key: UserValueName)
POST    /internal/shoebox/database/userValue                                   @com.keepit.controllers.internal.ShoeboxController.setUserValue(userId: Id[User], key: UserValueName)
GET     /internal/shoebox/database/userSegment                                 @com.keepit.controllers.internal.ShoeboxController.getUserSegment(userId: Id[User])
GET     /internal/shoebox/database/extensionVersion                            @com.keepit.controllers.internal.ShoeboxController.getExtensionVersion(installationId: ExternalId[KifiInstallation])
POST    /internal/shoebox/database/triggerRawKeepImport                        @com.keepit.controllers.internal.ShoeboxController.triggerRawKeepImport()
POST    /internal/shoebox/database/triggerSocialGraphFetch                     @com.keepit.controllers.internal.ShoeboxController.triggerSocialGraphFetch(id: Id[SocialUserInfo])
GET     /internal/shoebox/database/getLapsedUsersForDelighted                  @com.keepit.controllers.internal.ShoeboxController.getLapsedUsersForDelighted(maxCount: Int, skipCount: Int, after: DateTime, before: Option[DateTime] ?= None)

GET      /internal/shoebox/emailSenderTest                 @com.keepit.controllers.internal.EmailTestController.testEmailSender(name: String)

GET      /internal/shoebox/database/getAllFakeUsers                             @com.keepit.controllers.internal.ShoeboxController.getAllFakeUsers()
GET      /internal/shoebox/database/getInvitations                              @com.keepit.controllers.internal.ShoeboxController.getInvitations(senderId: Id[User])
GET      /internal/shoebox/database/getSocialConnections                        @com.keepit.controllers.internal.ShoeboxController.getSocialConnections(userId: Id[User])

GET      /internal/shoebox/image/getUserImageUrl                   @com.keepit.controllers.internal.ShoeboxController.getUserImageUrl(id: Id[User], width: Int)
POST     /internal/shoebox/database/canViewLibrary                 @com.keepit.controllers.internal.ShoeboxController.canViewLibrary()
POST     /internal/shoebox/database/getPersonalKeeps               @com.keepit.controllers.internal.ShoeboxController.getPersonalKeeps(userId: Id[User])
POST     /internal/shoebox/database/getCrossServiceKeepsByIds      @com.keepit.controllers.internal.ShoeboxDataPipeController.getCrossServiceKeepsByIds()
POST     /internal/shoebox/database/getDiscussionKeepsByIds        @com.keepit.controllers.internal.ShoeboxController.getDiscussionKeepsByIds()
POST     /internal/shoebox/database/getBasicLibraryDetails         @com.keepit.controllers.internal.ShoeboxController.getBasicLibraryDetails()
POST     /internal/shoebox/database/getLibraryCardInfos            @com.keepit.controllers.internal.ShoeboxController.getLibraryCardInfos()
POST     /internal/shoebox/database/getKeepCounts                  @com.keepit.controllers.internal.ShoeboxController.getKeepCounts()
POST     /internal/shoebox/database/getKeepImages                  @com.keepit.controllers.internal.ShoeboxController.getKeepImages()
GET      /internal/shoebox/database/getLibrariesWithWriteAccess    @com.keepit.controllers.internal.ShoeboxController.getLibrariesWithWriteAccess(userId: Id[User])
GET      /internal/shoebox/database/getLibraryMembershipView       @com.keepit.controllers.internal.ShoeboxController.getLibraryMembershipView(libraryId: Id[Library], userId: Id[User])
POST     /internal/shoebox/database/getIntegrationsBySlackChannel      @com.keepit.controllers.internal.ShoeboxController.getIntegrationsBySlackChannel()
POST     /internal/shoebox/database/getSourceAttributionForKeeps       @com.keepit.controllers.internal.ShoeboxController.getSourceAttributionForKeeps()
POST     /internal/shoebox/database/getRelevantKeepsByUserAndUri       @com.keepit.controllers.internal.ShoeboxController.getRelevantKeepsByUserAndUri()
POST     /internal/shoebox/database/getPersonalKeepRecipientsOnUris    @com.keepit.controllers.internal.ShoeboxController.getPersonalKeepRecipientsOnUris()
POST     /internal/shoebox/database/getSlackTeamIds                @com.keepit.controllers.internal.ShoeboxController.getSlackTeamIds()
GET      /internal/shoebox/database/getSlackTeamInfo               @com.keepit.controllers.internal.ShoeboxController.getSlackTeamInfo(slackTeamId: SlackTeamId)

POST     /internal/shoebox/database/internKeep              @com.keepit.controllers.internal.ShoeboxController.internKeep()
POST     /internal/shoebox/database/editRecipientsOnKeep    @com.keepit.controllers.internal.ShoeboxController.editRecipientsOnKeep(editorId: Id[User], keepId: Id[Keep])
POST     /internal/shoebox/database/persistModifyRecipients @com.keepit.controllers.internal.ShoeboxController.persistModifyRecipients()
POST     /internal/shoebox/database/registerMessageOnKeep   @com.keepit.controllers.internal.ShoeboxController.registerMessageOnKeep()

GET      /internal/shoebox/email/getUnsubscribeUrlForEmail @com.keepit.controllers.website.EmailOptOutController.getUnsubscribeUrlForEmail(email: EmailAddress)

GET     /internal/shoebox/database/getUsersByExperiment     @com.keepit.controllers.internal.ShoeboxController.getUsersByExperiment(experiment: UserExperimentType)

POST    /internal/shoebox/user/addInteractions            @com.keepit.controllers.internal.ShoeboxController.addInteractions(userId: Id[User])

# Angular assets
GET     /dist/*file                com.keepit.controllers.website.AngularDistAssets.at(path = "/public/ng/dist", file)
GET     /img/*file                 com.keepit.controllers.website.AngularImgAssets.at(path = "/public/ng/img", file)

->  / commonService.Routes
->  / admin.Routes
->  / shoeboxClient.Routes
->  / site.Routes

GET     /:handle/:slug/rss        @com.keepit.controllers.website.LibraryFeedController.libraryRSSFeed(handle: Handle, slug, authToken: Option[String] ?= None, count: Int ?= 20, offset: Int ?= 0)
GET     /:handle/:slug/atom       @com.keepit.controllers.website.LibraryFeedController.libraryAtomFeed(handle: Handle, slug, authToken: Option[String] ?= None, count: Int ?= 20, offset: Int ?= 0)
