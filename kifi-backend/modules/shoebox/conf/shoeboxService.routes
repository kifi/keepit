

GET     /login                      @com.keepit.controllers.core.AuthController.loginPage
GET     /ss/login                   com.keepit.social.providers.LoginPage.login
GET     /logout                     com.keepit.social.providers.LoginPage.logout

GET     /-ss/login                   securesocial.controllers.LoginPage.login
GET     /-logout                     securesocial.controllers.LoginPage.logout

GET     /contacts/import            @com.keepit.controllers.core.OAuth2Controller.importContacts(provider:Option[String], approvalPromptOpt:Option[String], redirectUrl:Option[String])
GET     /contacts/import/success    @com.keepit.controllers.website.ContactsImportController.importContactsSuccess(redirectUrl: Option[String], numContacts: Option[Int])
GET     /contacts/import/failure    @com.keepit.controllers.website.ContactsImportController.importContactsFailure(redirectUrl: Option[String])
GET     /contacts/refresh           @com.keepit.controllers.core.OAuth2Controller.refreshContacts(abookId:ExternalId[ABookInfo], provider:Option[String])
GET     /oauth2/start/:provider     @com.keepit.controllers.core.OAuth2Controller.start(provider:String, stateToken:Option[String], approvalPromptOpt:Option[String])
GET     /oauth2/callback/:provider  @com.keepit.controllers.core.OAuth2Controller.callback(provider:String)
POST    /oauth2/callback/:provider  @com.keepit.controllers.core.OAuth2Controller.accessTokenCallback(provider:String)
GET     /oauth2/slack               @com.keepit.controllers.website.SlackController.registerSlackAuthorization(code: Option[String] ?= None, state: String)

GET     /signup                     @com.keepit.controllers.core.AuthController.signupPage()

# End new signup pages

POST    /auth/sign-up               @com.keepit.controllers.core.AuthController.userPasswordSignup()
POST    /auth/email-finalize        @com.keepit.controllers.core.AuthController.userPassFinalizeAccountAction()
POST    /auth/social-finalize       @com.keepit.controllers.core.AuthController.socialFinalizeAccountAction()
POST    /auth/token-login/:provider  @com.keepit.controllers.core.AuthController.accessTokenLogin(provider: String)
POST    /auth/token-signup/:provider @com.keepit.controllers.core.AuthController.accessTokenSignup(provider: String)
POST    /auth/oauth1-login/:provider  @com.keepit.controllers.core.AuthController.oauth1TokenLogin(provider: String)
POST    /auth/oauth1-signup/:provider @com.keepit.controllers.core.AuthController.oauth1TokenSignup(provider: String)
POST    /auth/token-finalize         @com.keepit.controllers.core.AuthController.tokenFinalizeAccountAction()
POST    /auth/email-signup           @com.keepit.controllers.core.AuthController.emailSignup()
POST    /auth/upload-binary-image   @com.keepit.controllers.core.AuthController.uploadBinaryPicture()
POST    /auth/upload-multipart-image @com.keepit.controllers.core.AuthController.uploadFormEncodedPicture()
POST    /auth/cancel                @com.keepit.controllers.core.AuthController.cancelAuth()

# See common.routes for our better ProviderController routes.

# SecureSocial routes need to exist, or it complains and dies.
GET     /-authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)
POST    /-authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)

# custom auth routes which set some session state

GET     /login/after                @com.keepit.controllers.core.AuthController.afterLogin()
GET     /login/close                @com.keepit.controllers.core.AuthController.afterLoginClosePopup()
GET     /login/:provider            @com.keepit.controllers.core.AuthController.loginSocial(provider, close: Boolean ?= false)
POST    /auth/log-in                @com.keepit.controllers.core.AuthController.logInWithUserPass(link: String ?= "")

GET     /connect/:provider          @com.keepit.controllers.core.AuthController.popupBeforeLinkSocial(provider)
GET     /connect/:provider/done     @com.keepit.controllers.core.AuthController.popupAfterLinkSocial(provider)
GET     /link/:provider             @com.keepit.controllers.core.AuthController.link(provider: String, redirect: Option[String] ?= None)

GET     /signup/:provider           @com.keepit.controllers.core.AuthController.signup(provider: String, intent: Option[String] ?= None, modelPubId: Option[String] ?= None, authToken: Option[String] ?= None)
# do we still use this endpoint?
POST    /mobileauth/:provider       @com.keepit.controllers.mobile.MobileAuthController.accessTokenLogin(provider)

GET     /verify/:code               @com.keepit.controllers.core.AuthController.verifyEmail(code: EmailVerificationCode, orgPubId: Option[String] ?= None)

POST    /password/forgot            @com.keepit.controllers.core.AuthController.forgotPassword()
GET     /password/:code             @com.keepit.controllers.core.AuthController.setPasswordPage(code: String)
POST    /password/set               @com.keepit.controllers.core.AuthController.setPassword()

POST    /disconnect/:provider       @com.keepit.controllers.website.HomeController.disconnect(provider)

GET     /unsubscribe/*token         @com.keepit.controllers.website.EmailOptOutController.optOut(token: String)
POST    /unsubscribe/*token         @com.keepit.controllers.website.EmailOptOutController.optOutAction(token: String)
GET     /admin/unsubscribe          @com.keepit.controllers.website.EmailOptOutController.getToken(email: EmailAddress)

GET     /extmsg/email/mute          @com.keepit.controllers.website.EmailNonUserMuteController.optOut(publicId: String)
POST    /extmsg/email/mute          @com.keepit.controllers.website.EmailNonUserMuteController.optOutAction(publicId: String)


GET     /get                        @com.keepit.controllers.website.HomeController.get()


POST    /up/report                  @com.keepit.controllers.tracking.EventProxyController.report()


##########################################
# Special projects
##########################################

GET     /site/twitterQueuePosition  @com.keepit.controllers.website.TwitterWaitlistController.getFakeWaitlistPosition()

GET     /integrations/twitter         @com.keepit.controllers.website.TwitterWaitlistController.twitterWaitlistLandingRedirectHack()
GET     /integrations/twitter/request @com.keepit.controllers.website.TwitterWaitlistController.requestToTwitterWaitlistRedirectHack()
GET     /integrations/twitter/thanks  @com.keepit.controllers.website.TwitterWaitlistController.thanksForTwitterWaitlistRedirectHack()

GET     /twitter                    @com.keepit.controllers.website.TwitterWaitlistController.twitterWaitlistLanding()
GET     /twitter/request            @com.keepit.controllers.website.TwitterWaitlistController.requestToTwitterWaitlist()
GET     /twitter/thanks             @com.keepit.controllers.website.TwitterWaitlistController.thanksForTwitterWaitlist()

GET     /i/:id                      @com.keepit.controllers.website.InviteController.userInvite(id: ExternalId[User])
GET     /join/:creditCodeStr        @com.keepit.controllers.website.InviteController.creditInvite(creditCodeStr: String)
GET     /k/cached                   @com.keepit.controllers.website.KeepCacheController.getCachedKeep(id: ExternalId[Keep])

##########################################
# Extension API
##########################################

POST    /ext/events                 @com.keepit.controllers.tracking.EventProxyController.track()
GET     /ext/guide                  @com.keepit.controllers.ext.ExtUserController.getGuideInfo

POST    /ext/start                  @com.keepit.controllers.ext.ExtAuthController.start
POST    /ext/auth/:provider         @com.keepit.controllers.ext.ExtAuthController.jsTokenLogin(provider: String)
GET     /ext/auth                   @com.keepit.controllers.ext.ExtAuthController.getLoggedIn()
DELETE  /ext/auth                   @com.keepit.controllers.ext.ExtAuthController.logOut

POST    /ext/page                   @com.keepit.controllers.ext.ExtPageController.getPageInfo()

GET     /ext/pref/rules             @com.keepit.controllers.ext.ExtPreferenceController.getRules()
GET     /ext/prefs                  @com.keepit.controllers.ext.ExtPreferenceController.getPrefs(version: Int ?= 1)
POST    /ext/pref/keeperPosition    @com.keepit.controllers.ext.ExtPreferenceController.setKeeperPositionOnSite()
POST    /ext/pref/keeperHidden      @com.keepit.controllers.ext.ExtPreferenceController.setKeeperHiddenOnSite()
POST    /ext/pref/lookHereMode      @com.keepit.controllers.ext.ExtPreferenceController.setLookHereMode(on: Boolean)
POST    /ext/pref/enterToSend       @com.keepit.controllers.ext.ExtPreferenceController.setEnterToSend(enterToSend: Boolean)
POST    /ext/pref/maxResults        @com.keepit.controllers.ext.ExtPreferenceController.setMaxResults(n: Int)
POST    /ext/pref/showExtMsgIntro   @com.keepit.controllers.ext.ExtPreferenceController.setShowExtMsgIntro(show: Boolean)
POST    /ext/pref/showLibraryIntro  @com.keepit.controllers.ext.ExtPreferenceController.setShowLibraryIntro(show: Boolean)
POST    /ext/pref/email/:kind/:send @com.keepit.controllers.ext.ExtPreferenceController.setEmailNotifyPreference(kind: com.keepit.common.mail.ElectronicMailCategory, send: Boolean)

GET     /ext/contacts/search        @com.keepit.controllers.ext.ExtUserController.searchForContacts(query:Option[String], limit:Option[Int])
POST    /ext/contacts/hide          @com.keepit.controllers.ext.ExtNonUserSearchController.hideEmailFromUser()

GET     /ext/libraries              @com.keepit.controllers.ext.ExtLibraryController.getLibraries(allowOpenCollab: Boolean ?= false)
POST    /ext/libraries              @com.keepit.controllers.ext.ExtLibraryController.createLibrary()
GET     /ext/libraries/:id          @com.keepit.controllers.ext.ExtLibraryController.getLibrary(id: PublicId[Library])
DELETE  /ext/libraries/:id          @com.keepit.controllers.ext.ExtLibraryController.deleteLibrary(id: PublicId[Library])
POST    /ext/libraries/:id/join     @com.keepit.controllers.ext.ExtLibraryController.joinLibrary(id: PublicId[Library])
POST    /ext/libraries/:id/leave    @com.keepit.controllers.ext.ExtLibraryController.leaveLibrary(id: PublicId[Library])
POST    /ext/libraries/:id/bookmarks @com.keepit.controllers.ext.ExtLibraryController.importBrowserBookmarks(id: PublicId[Library])
POST    /ext/libraries/:id/keeps    @com.keepit.controllers.ext.ExtLibraryController.addKeep(id: PublicId[Library])
GET     /ext/libraries/:id/keeps/:k @com.keepit.controllers.ext.ExtLibraryController.getKeep(id: PublicId[Library], k: ExternalId[Keep], is: Option[String] = None)
POST    /ext/libraries/:id/keeps/:k @com.keepit.controllers.ext.ExtLibraryController.updateKeep(id: PublicId[Library], k: ExternalId[Keep])
DELETE  /ext/libraries/:id/keeps/:k @com.keepit.controllers.ext.ExtLibraryController.removeKeep(id: PublicId[Library], k: ExternalId[Keep])
POST    /ext/libraries/:id/keeps/:k/note  @com.keepit.controllers.ext.ExtLibraryController.editKeepNote(id: PublicId[Library], k: ExternalId[Keep])
POST    /ext/libraries/:id/subscription @com.keepit.controllers.ext.ExtLibraryController.setSubscribedToUpdates(id: PublicId[Library], subscribed: Boolean)


GET     /ext/libraries/:id/keeps/:k/tags/suggest  @com.keepit.controllers.ext.ExtLibraryController.suggestTags(id: PublicId[Library], k: ExternalId[Keep],  q: Option[String] ?= None, n: Int ?= 5)
POST    /ext/libraries/:id/keeps/:k/image/upload @com.keepit.controllers.ext.ExtKeepImageController.uploadKeepImage(id: PublicId[Library], k: ExternalId[Keep])
GET     /ext/libraries/:id/keeps/:k/image/:token @com.keepit.controllers.ext.ExtKeepImageController.checkImageStatus(id: PublicId[Library], k: ExternalId[Keep], token: String)
POST    /ext/libraries/:id/keeps/:k/image @com.keepit.controllers.ext.ExtKeepImageController.changeKeepImage(id: PublicId[Library], k: ExternalId[Keep], is: Option[String] = None)

##########################################
# Mobile
##########################################

POST    /m/1/events                         @com.keepit.controllers.tracking.EventProxyController.track()

GET     /m/1/whatismyip                     @com.keepit.controllers.mobile.MobileAuthController.whatIsMyIp()

POST    /m/1/reportData                     @com.keepit.controllers.mobile.MobileUserController.reportData()

GET     /m/1/user/friendsDetails            @com.keepit.controllers.mobile.MobileUserController.friends(page: Int ?= 0, pageSize: Int ?= 1000)
GET     /m/1/user/networks                  @com.keepit.controllers.mobile.MobileUserController.socialNetworkInfo()
POST    /m/1/user/:origin/uploadContacts    @com.keepit.controllers.mobile.MobileUserController.uploadContacts(origin:ABookOriginType)
GET     /m/1/user/abooks                    @com.keepit.controllers.mobile.MobileUserController.abookInfo()
GET     /m/1/user/friends/recommended       @com.keepit.controllers.mobile.MobilePeopleRecommendationController.getFriendRecommendations(offset: Int ?= 0, limit: Int ?= 5)
POST    /m/1/user/friends/:id/hide          @com.keepit.controllers.mobile.MobilePeopleRecommendationController.hideFriendRecommendation(id: ExternalId[User])

POST    /m/1/page/details                   @com.keepit.controllers.mobile.MobilePageController.getPageDetails()
POST    /m/1/page/extensionQuery            @com.keepit.controllers.mobile.MobilePageController.queryExtension(page: Int ?= 0, pageSize: Int ?= 1000)

GET     /m/1/keeps/all                      @com.keepit.controllers.mobile.MobileKeepsController.allKeepsV1(before: Option[String], after: Option[String], collection: Option[String], helprank: Option[String], count: Int ?= Integer.MAX_VALUE, withPageInfo: Boolean ?= false)
GET     /m/2/keeps/all                      @com.keepit.controllers.mobile.MobileKeepsController.allKeepsV2(before: Option[String], after: Option[String], collection: Option[String], helprank: Option[String], count: Int ?= Integer.MAX_VALUE, withPageInfo: Boolean ?= false)

GET     /m/1/keeps/stream                   @com.keepit.controllers.mobile.MobileKeepsController.getKeepStream(limit: Int ?= 10, beforeId: Option[String], afterId: Option[String], filterKind: Option[String] ?= None, filterId: Option[String] ?= None)

GET     /m/1/keeps/:id                      @com.keepit.controllers.mobile.MobileKeepsController.getKeepInfoV1(id: ExternalId[Keep], withFullInfo: Boolean ?= false, imageWidth: Option[Int] ?= None, imageHeight: Option[Int] ?= None)
GET     /m/2/keeps/:id                      @com.keepit.controllers.mobile.MobileKeepsController.getKeepInfoV2(id: ExternalId[Keep], withFullInfo: Boolean ?= false, imageWidth: Option[Int] ?= None, imageHeight: Option[Int] ?= None)
POST    /m/2/keeps/:id                      @com.keepit.controllers.mobile.MobileKeepsController.editKeepInfoV2(id: ExternalId[Keep])

GET     /m/1/collections/all                @com.keepit.controllers.mobile.MobileKeepsController.allCollections(sort: String ?= "last_kept")
GET     /m/1/user/me                        @com.keepit.controllers.mobile.MobileUserController.currentUser()
POST    /m/1/user/me                        @com.keepit.controllers.mobile.MobileUserController.updateCurrentUser()
POST    /m/1/user/me/name                   @com.keepit.controllers.mobile.MobileUserController.updateName()
POST    /m/1/user/me/biography              @com.keepit.controllers.mobile.MobileUserController.updateBiography()
GET     /m/1/user/prefs                     @com.keepit.controllers.mobile.MobileUserController.getPrefs()
POST    /m/1/user/notifyPrefs               @com.keepit.controllers.mobile.MobilePreferenceController.setNotifyPreferences()
POST    /m/1/user/pic/upload                @com.keepit.controllers.mobile.MobileUserController.uploadBinaryUserPicture()
GET     /m/1/tags/suggest                   @com.keepit.controllers.mobile.MobileKeepsController.suggestTags(keepId: Option[String], query: Option[String] ?= None, limit: Int ?= 5)

POST    /m/1/auth/accessTokenSignup/:provider   @com.keepit.controllers.mobile.MobileAuthController.accessTokenSignup(provider)
POST    /m/1/auth/accessTokenLogin/:provider    @com.keepit.controllers.mobile.MobileAuthController.accessTokenLogin(provider)
POST    /m/1/auth/oauth1TokenSignup/:provider   @com.keepit.controllers.mobile.MobileAuthController.oauth1TokenSignup(provider)
POST    /m/1/auth/oauth1TokenLogin/:provider    @com.keepit.controllers.mobile.MobileAuthController.oauth1TokenLogin(provider)
POST    /m/1/auth/log-in                        @com.keepit.controllers.mobile.MobileAuthController.loginWithUserPass(link: String ?= "")
POST    /m/1/auth/upload-binary-image           @com.keepit.controllers.mobile.MobileAuthController.uploadBinaryPicture()
POST    /m/1/auth/upload-multipart-image        @com.keepit.controllers.mobile.MobileAuthController.uploadFormEncodedPicture()
POST    /m/1/auth/sign-up                       @com.keepit.controllers.mobile.MobileAuthController.userPasswordSignup()
POST    /m/1/auth/email-finalize                @com.keepit.controllers.mobile.MobileAuthController.userPassFinalizeAccountAction()
POST    /m/1/auth/social-finalize               @com.keepit.controllers.mobile.MobileAuthController.socialFinalizeAccountAction()

POST    /m/1/social-link/:provider              @com.keepit.controllers.mobile.MobileAuthController.linkSocialNetwork(provider)

POST    /m/1/password/forgot                    @com.keepit.controllers.mobile.MobileAuthController.forgotPassword()
POST    /m/1/password/change                    @com.keepit.controllers.mobile.MobileUserController.changePassword()

POST    /m/1/iphone/version/register            @com.keepit.controllers.mobile.MobileAuthController.registerIPhoneVersion()
POST    /m/1/android/version/register           @com.keepit.controllers.mobile.MobileAuthController.registerAndroidVersion()
POST    /m/1/android/store/params               @com.keepit.controllers.mobile.AndroidAppStoreParamsController.processAppStoreParams()

GET     /m/1/user/connections/all               @com.keepit.controllers.mobile.MobileUserController.queryAll(search: Option[String], network: Option[String], limit: Int ?= 50000000, pictureUrl: Boolean ?= false)

GET     /m/1/contacts/search                    @com.keepit.controllers.mobile.MobileContactsController.searchForNonUserContacts(q: String, n: Int ?= 4)
GET     /m/2/contacts/search                    @com.keepit.controllers.mobile.MobileContactsController.searchForAllContacts(query:Option[String], limit:Option[Int])


POST    /m/1/invite                             @com.keepit.controllers.mobile.MobileInviteController.inviteConnection

# Profile Page
GET     /m/1/user/:username/profile             @com.keepit.controllers.mobile.MobileUserProfileController.profile(username)
GET     /m/2/user/:id/profile                   @com.keepit.controllers.mobile.MobileUserProfileController.profileFromUserId(id: ExternalId[User])
GET     /m/1/user/:username/connections         @com.keepit.controllers.mobile.MobileUserProfileController.getProfileConnections(username: Username, limit: Int)
GET     /m/1/user/:username/libraries           @com.keepit.controllers.mobile.MobileUserProfileController.getProfileLibraries(username: Username, page: Int ?= 0, size: Int ?= 12, filter: String ?= "own")
GET     /m/1/user/:username/followers           @com.keepit.controllers.mobile.MobileUserProfileController.getProfileFollowers(username: Username, page: Int ?= 0, size: Int ?= 12)

GET     /m/2/user/:id/libraries                 @com.keepit.controllers.mobile.MobileUserProfileController.getProfileLibrariesV2(id: ExternalId[User], page: Int ?= 0, size: Int ?= 12, filter: LibraryFilter ?= LibraryFilter.OWN, ordering: Option[LibraryOrdering] ?= None, sortDirection: Option[SortDirection] ?= None, starredFirst: Boolean)

POST    /m/1/user/:id/unfriend                  @com.keepit.controllers.mobile.MobileUserController.unfriend(id: ExternalId[User])
POST    /m/1/user/:id/friend                    @com.keepit.controllers.mobile.MobileUserController.friend(id: ExternalId[User])
POST    /m/1/user/:id/ignoreRequest             @com.keepit.controllers.mobile.MobileUserController.ignoreFriendRequest(id: ExternalId[User])
GET     /m/1/user/:id/connections/mutual        @com.keepit.controllers.mobile.MobileMutualUserController.getMutualConnections(id: ExternalId[User], page: Int ?= 0, size: Int ?= 10)
GET     /m/1/user/:id/libraries/mutual          @com.keepit.controllers.mobile.MobileMutualUserController.getMutualLibraries(id: ExternalId[User], page: Int ?= 0, size: Int ?= 10)
GET     /m/1/user/outgoingFriendRequests        @com.keepit.controllers.mobile.MobileUserController.outgoingFriendRequests
GET     /m/1/user/incomingFriendRequests        @com.keepit.controllers.mobile.MobileUserController.incomingFriendRequests
POST    /m/1/user/delighted/answer              @com.keepit.controllers.mobile.MobileUserController.postDelightedAnswer()
POST    /m/1/user/delighted/cancel              @com.keepit.controllers.mobile.MobileUserController.cancelDelightedSurvey()
GET     /m/1/user/$id<[0-9a-f-]{36}> 			@com.keepit.controllers.mobile.MobileUserController.basicUserInfo(id: ExternalId[User], friendCount: Boolean ?= false)
POST    /m/1/user/:id/include                   @com.keepit.controllers.mobile.MobileUserController.includeFriend(id: ExternalId[User])
POST    /m/1/user/:id/exclude                   @com.keepit.controllers.mobile.MobileUserController.excludeFriend(id: ExternalId[User])
GET     /m/1/user/settings                      @com.keepit.controllers.mobile.MobileUserController.getSettings()
POST    /m/1/user/settings                      @com.keepit.controllers.mobile.MobileUserController.setSettings()
GET     /m/1/user/pending                       @com.keepit.controllers.mobile.MobileUserController.getPendingRequests(before: Option[DateTime] ?= None, limit: Int ?= 10)

POST    /m/1/attribution/appsflyer              @com.keepit.controllers.mobile.MobileUserController.setAppsflyerAttribution()

POST    /m/1/disconnect/:provider               @com.keepit.controllers.mobile.MobileUserController.disconnect(provider)

GET     /m/2/recos/top                          @com.keepit.controllers.mobile.MobileRecommendationsController.topRecosV2(recency: Float, more: Boolean ?= false)
GET     /m/3/recos/top                          @com.keepit.controllers.mobile.MobileRecommendationsController.topRecosV3(recency: Float, uriContext: Option[String] ?= None, libContext: Option[String] ?= None, uctx: Option[String] ?= None, lctx: Option[String] ?= None)
POST    /m/3/recos/top                          @com.keepit.controllers.mobile.MobileRecommendationsController.topRecosV3Post()
GET     /m/1/recos/public                       @com.keepit.controllers.mobile.MobileRecommendationsController.topPublicRecos()
POST    /m/1/recos/trash                        @com.keepit.controllers.mobile.MobileRecommendationsController.trash(id: ExternalId[NormalizedURI])
POST    /m/1/recos/feedback                     @com.keepit.controllers.website.RecommendationsController.updateUriRecommendationFeedback(id: ExternalId[NormalizedURI])

#DEPRECATED: use instead /m/1/keeps/stream
GET     /m/1/recos/keepUpdates                  @com.keepit.controllers.mobile.MobileRecommendationsController.keepUpdates(limit: Int ?= 10, beforeId: Option[String], afterId: Option[String])

POST    /m/1/feed                               @com.keepit.controllers.mobile.MobileRecommendationsController.feedV1Post()

GET     /m/1/libraries/marketing-suggestions    @com.keepit.controllers.mobile.MobileLibraryController.marketingSiteSuggestedLibraries()

GET     /m/1/users/:handle/libraries/:slug     @com.keepit.controllers.mobile.MobileLibraryController.getLibraryByPathV1(handle: Handle, slug: LibrarySlug, is: Option[String] ?= None)
GET     /m/2/users/:handle/libraries/:slug     @com.keepit.controllers.mobile.MobileLibraryController.getLibraryByPathV2(handle: Handle, slug: LibrarySlug, is: Option[String] ?= None)
POST    /m/1/libraries/add                      @com.keepit.controllers.mobile.MobileLibraryController.createLibrary()
POST    /m/1/libraries/:id/modify               @com.keepit.controllers.mobile.MobileLibraryController.modifyLibrary(id: PublicId[Library])
POST    /m/2/libraries/:id/modify               @com.keepit.controllers.mobile.MobileLibraryController.modifyLibraryV2(id: PublicId[Library])
POST    /m/1/libraries/:id/delete               @com.keepit.controllers.mobile.MobileLibraryController.deleteLibrary(id: PublicId[Library])
GET     /m/1/libraries                          @com.keepit.controllers.mobile.MobileLibraryController.getLibrarySummariesByUser()
POST    /m/1/libraries                          @com.keepit.controllers.mobile.MobileLibraryController.getWriteableLibrariesWithUrlV1()
POST    /m/2/libraries                          @com.keepit.controllers.mobile.MobileLibraryController.getWriteableLibrariesWithUrlV2()
POST    /m/3/libraries                          @com.keepit.controllers.mobile.MobileLibraryController.getWriteableLibrariesWithUrlV3()
GET     /m/1/libraries/:id                      @com.keepit.controllers.mobile.MobileLibraryController.getLibraryByIdV1(id: PublicId[Library], is: Option[String] ?= None)
GET     /m/2/libraries/:id                      @com.keepit.controllers.mobile.MobileLibraryController.getLibraryByIdV2(id: PublicId[Library], is: Option[String] ?= None)
POST    /m/1/libraries/:id/join                 @com.keepit.controllers.mobile.MobileLibraryController.joinLibrary(id: PublicId[Library])
POST    /m/1/libraries/joinMultiple             @com.keepit.controllers.mobile.MobileLibraryController.joinLibraries()
POST    /m/1/libraries/:id/decline              @com.keepit.controllers.mobile.MobileLibraryController.declineLibrary(id: PublicId[Library])
POST    /m/1/libraries/:id/leave                @com.keepit.controllers.mobile.MobileLibraryController.leaveLibrary(id: PublicId[Library])
GET     /m/1/libraries/:id/keeps                @com.keepit.controllers.mobile.MobileLibraryController.getKeepsV1(id: PublicId[Library], offset: Int ?= 0, limit: Int ?= 10, imageWidth: Option[Int] ?= None, imageHeight: Option[Int] ?= None)
GET     /m/2/libraries/:id/keeps                @com.keepit.controllers.mobile.MobileLibraryController.getKeepsV2(id: PublicId[Library], offset: Int ?= 0, limit: Int ?= 10, imageWidth: Option[Int] ?= None, imageHeight: Option[Int] ?= None)
POST    /m/2/libraries/:id/keeps                @com.keepit.controllers.mobile.MobileLibraryController.keepToLibraryV2(id: PublicId[Library])
DELETE  /m/1/libraries/:id/keeps/:kId           @com.keepit.controllers.mobile.MobileLibraryController.unkeepFromLibrary(id: PublicId[Library], kId: ExternalId[Keep])
DELETE  /m/1/libraries/:id/invite               @com.keepit.controllers.mobile.MobileLibraryController.revokeLibraryInvitation(id: PublicId[Library])
POST    /m/1/libraries/:id/invite               @com.keepit.controllers.mobile.MobileLibraryController.inviteUsersToLibrary(id: PublicId[Library])
POST    /m/1/libraries/:id/invite/link          @com.keepit.controllers.mobile.MobileLibraryController.createAnonymousInviteToLibrary(id: PublicId[Library])
# ↓↓↓ deprecated, do not use anymore ↓↓↓
GET     /m/1/libraries/:id/inviteInfo           @com.keepit.controllers.website.InviteController.getLibraryInviteInfo(id: PublicId[Library])
POST    /m/1/libraries/:id/subscription         @com.keepit.controllers.mobile.MobileLibraryController.setSubscribedToUpdates(id: PublicId[Library], subscribed: Boolean)
POST    /m/1/libraries/:id/image/upload         @com.keepit.controllers.mobile.MobileLibraryImageController.uploadLibraryImage(id: PublicId[Library], imageSize: Option[String] ?= None, posX: Option[Int] ?= None, posY: Option[Int] ?= None)
DELETE  /m/1/libraries/:id/image                @com.keepit.controllers.mobile.MobileLibraryImageController.removeLibraryImage(id: PublicId[Library])

GET     /m/1/libraries/:id/members              @com.keepit.controllers.mobile.MobileLibraryController.getLibraryMembersV1(id: PublicId[Library], offset: Int ?= 0, limit: Int ?= 20)
GET     /m/2/libraries/:id/members              @com.keepit.controllers.mobile.MobileLibraryController.getLibraryMembersV2(id: PublicId[Library], offset: Int ?= 0, limit: Int ?= 20)
GET     /m/1/libraries/:id/members/suggest      @com.keepit.controllers.mobile.MobileLibraryController.suggestMembers(id: PublicId[Library], q: Option[String] ?= None, n: Int ?= 5)
POST    /m/1/libraries/:id/members/:uId/access  @com.keepit.controllers.mobile.MobileLibraryController.updateLibraryMembership(id: PublicId[Library], uId: ExternalId[User])

POST    /m/1/content/flagUrl                @com.keepit.controllers.mobile.MobileUriController.flagContent()
GET     /m/1/inviteInfo                     @com.keepit.controllers.website.InviteController.getGeneralInviteInfo()

GET     /m/1/user/:id/organizations                      @com.keepit.controllers.mobile.MobileOrganizationController.getOrganizationsForUser(id: ExternalId[User])
GET     /m/1/organizations/invites                       @com.keepit.controllers.mobile.MobileOrganizationInviteController.getPendingOrganizationsForUser()
POST    /m/1/organizations/create                        @com.keepit.controllers.mobile.MobileOrganizationController.createOrganization()
GET     /m/1/organizations/sendCreateTeamEmail           @com.keepit.controllers.mobile.MobileOrganizationController.sendCreateTeamEmail(email: String)
GET     /m/1/organizations/:id                           @com.keepit.controllers.mobile.MobileOrganizationController.getOrganization(id: PublicId[Organization])
POST    /m/1/organizations/:id/modify                    @com.keepit.controllers.mobile.MobileOrganizationController.modifyOrganization(id: PublicId[Organization])
DELETE  /m/1/organizations/:id/delete                    @com.keepit.controllers.mobile.MobileOrganizationController.deleteOrganization(id: PublicId[Organization])
GET     /m/1/organizations/:id/members                   @com.keepit.controllers.mobile.MobileOrganizationMembershipController.getMembers(id: PublicId[Organization], offset: Int ?= 0, limit: Int ?= 20)
POST    /m/1/organizations/:id/members/invite            @com.keepit.controllers.mobile.MobileOrganizationInviteController.inviteUsers(id: PublicId[Organization])
POST    /m/1/organizations/:id/members/invites/accept    @com.keepit.controllers.mobile.MobileOrganizationInviteController.acceptInvitation(id: PublicId[Organization], authToken: Option[String] ?= None)
POST    /m/1/organizations/:id/members/invites/decline   @com.keepit.controllers.mobile.MobileOrganizationInviteController.declineInvitation(id: PublicId[Organization])
POST    /m/1/organizations/:id/members/invites/link      @com.keepit.controllers.mobile.MobileOrganizationInviteController.createAnonymousInviteToOrganization(id: PublicId[Organization])
POST    /m/1/organizations/:id/members/modify            @com.keepit.controllers.mobile.MobileOrganizationMembershipController.modifyMember(id: PublicId[Organization])
POST    /m/1/organizations/:id/members/remove            @com.keepit.controllers.mobile.MobileOrganizationMembershipController.removeMember(id: PublicId[Organization])
GET     /m/1/organizations/:id/libraries                 @com.keepit.controllers.mobile.MobileOrganizationController.getOrganizationLibraries(id: PublicId[Organization], offset: Int, limit: Int)

##########################################
# Website
##########################################

GET     /                           @com.keepit.controllers.website.HomeController.home
GET     /robots.txt                 @com.keepit.controllers.website.HomeController.robots
GET     /google25ae05cb8bf5b064.html @com.keepit.controllers.website.HomeController.googleWebmasterToolsSiteVerification
GET     /blog                       @com.keepit.controllers.website.HomeController.moved(uri = "http://blog.kifi.com")
GET     /blog/                      @com.keepit.controllers.website.HomeController.moved(uri = "http://blog.kifi.com")
GET     /about                      @com.keepit.controllers.website.HomeController.route(path = "about")
GET     /about.html                 @com.keepit.controllers.website.HomeController.moved(uri = "/about")
GET     /about/                     @com.keepit.controllers.website.HomeController.moved(uri = "/about")
GET     /about/mission              @com.keepit.controllers.website.HomeController.moved(uri = "/about")
GET     /about/mission.html         @com.keepit.controllers.website.HomeController.moved(uri = "/about")
GET     /about/culture              @com.keepit.controllers.website.HomeController.moved(uri = "/about")
GET     /about/investors            @com.keepit.controllers.website.HomeController.moved(uri = "/about")
GET     /about/team                 @com.keepit.controllers.website.HomeController.moved(uri = "/")
GET     /about/team.html            @com.keepit.controllers.website.HomeController.moved(uri = "/")
GET     /about/join_us              @com.keepit.controllers.website.HomeController.route(path = "about/join_us")
GET     /about/join_us.html         @com.keepit.controllers.website.HomeController.moved(uri = "/about/join_us")
GET     /about/user_feedback        @com.keepit.controllers.website.HomeController.route(path = "about/user_feedback")
GET     /how_it_works               @com.keepit.controllers.website.HomeController.route(path = "how_it_works")
GET     /integrations/slack         @com.keepit.controllers.website.HomeController.route(path = "integrations/slackv2")
GET     /getting-started/slack      @com.keepit.controllers.website.HomeController.route(path = "integrations/slack")
GET     /imports/pinboard           @com.keepit.controllers.website.HomeController.route(path = "imports/pinboard")
GET     /imports/kippt              @com.keepit.controllers.website.HomeController.route(path = "imports/kippt")
GET     /imports/instapaper         @com.keepit.controllers.website.HomeController.route(path = "imports/instapaper")
GET     /imports/evernote           @com.keepit.controllers.website.HomeController.route(path = "imports/evernote")
GET     /imports/diigo              @com.keepit.controllers.website.HomeController.route(path = "imports/diigo")
GET     /imports/pocket             @com.keepit.controllers.website.HomeController.route(path = "imports/pocket")
GET     /imports/delicious          @com.keepit.controllers.website.HomeController.route(path = "imports/delicious")
GET     /getting-started            @com.keepit.controllers.website.HomeController.route(path = "getting-started/users")
GET     /teams                      @com.keepit.controllers.website.HomeController.teams
GET     /teams-confirmation         @com.keepit.controllers.website.HomeController.route(path = "teams-confirmation")
GET     /install                    @com.keepit.controllers.website.HomeController.install
GET     /getting-started            @com.keepit.controllers.website.HomeController.gettingStarted
GET     /terms                      @com.keepit.controllers.website.HomeController.route(path = "terms")
GET     /about/pricing              @com.keepit.controllers.website.HomeController.route(path = "about/pricing")
GET     /privacy                    @com.keepit.controllers.website.HomeController.route(path = "privacy")
GET     /parenting                  @com.keepit.controllers.website.HomeController.route(path = "parenting")
GET     /iphone                     @com.keepit.controllers.website.HomeController.iPhoneAppStoreRedirect
GET     /unsupported                @com.keepit.controllers.website.HomeController.unsupported
GET     /libraries/featured         @com.keepit.controllers.website.HomeController.route(path = "libraries/featured")

POST    /invite                     @com.keepit.controllers.website.InviteController.inviteConnection
GET     /invite/:id                 @com.keepit.controllers.website.InviteController.acceptInvite(id: ExternalId[Invitation])
GET     /invite/confirm/:id         @com.keepit.controllers.website.InviteController.confirmInvite(id:ExternalId[Invitation], source: String, error_msg: Option[String], error_code: Option[Int])

GET     /feedback                   @com.keepit.controllers.website.FeedbackController.feedback
GET     /feedback/form              @com.keepit.controllers.website.FeedbackController.feedbackForm

POST    /waitlist                   @com.keepit.controllers.website.FeatureWaitlistController.waitList
POST    /friends/invite/refresh     @com.keepit.controllers.website.InviteController.refreshAllSocialInfo

GET     /get-the-kifi-extension-on-your-iphone @com.keepit.controllers.website.HomeController.getKifiExtensionIPhone(s: String ?= "the other one is wrong")
GET     /get-the-kifi-extension-on-you-iphone @com.keepit.controllers.website.HomeController.getKifiExtensionIPhone(s: String ?= "this is wrong")

# This should match the output format of S3ImageConfig#keyByExternalId
GET     /users/:id/pics/:size/0.jpg @com.keepit.controllers.assets.UserPictureController.get(size: Int, id: ExternalId[User])
GET     /users/:id/pics/:size/:name @com.keepit.controllers.assets.UserPictureController.getPic(size: String, id: ExternalId[User], name: String)

GET     /default-pic/:name          @com.keepit.controllers.assets.UserPictureController.hackyRedirectForiOSv3(name: String)

##########################################
# Feeds (RSS)
##########################################
GET     /feeds/libraries/top        @com.keepit.controllers.website.FeedController.getTopLibraries()
GET     /feeds/libraries/new        @com.keepit.controllers.website.FeedController.getNewLibraries()

##########################################
# Web API
##########################################

POST    /site/events                @com.keepit.controllers.tracking.EventProxyController.track()

GET     /assets/sitemap.xml                     @com.keepit.controllers.website.SiteMapController.librariesSitemapLegacy()
GET     /assets/sitemap-libraries-0.xml         @com.keepit.controllers.website.SiteMapController.librariesSitemap()
GET     /assets/sitemap-users-0.xml             @com.keepit.controllers.website.SiteMapController.usersSitemap()

GET     /site/keeps/stream               @com.keepit.controllers.website.KeepsController.getKeepStream(limit: Int ?= 10, beforeId: Option[String], afterId: Option[String], filterKind: Option[String] ?= None, filterId: Option[String] ?= None)
POST    /site/keeps/personalExport       @com.keepit.controllers.website.KeepsController.exportPersonalKeeps()
POST    /site/keeps/organizationExport   @com.keepit.controllers.website.KeepsController.exportOrganizationKeeps()
GET     /site/keeps/:id                  @com.keepit.controllers.website.KeepsController.getKeepInfo(id: InternalOrExternalId[Keep], authToken: Option[String] ?= None)

POST    /site/keeps/markAsRead                @com.keepit.controllers.website.DiscussionController.markKeepsAsRead()
POST    /site/keeps/:keepId/messages          @com.keepit.controllers.website.DiscussionController.sendMessageOnKeep(keepId: PublicId[Keep])
GET     /site/keeps/:keepId/messages          @com.keepit.controllers.website.DiscussionController.getMessagesOnKeep(keepId: PublicId[Keep], limit: Int ?= 10, fromId: Option[String] ?= None)
POST    /site/keeps/:keepId/messages/edit     @com.keepit.controllers.website.DiscussionController.editMessageOnKeep(keepId: PublicId[Keep])
POST    /site/keeps/:keepId/messages/delete   @com.keepit.controllers.website.DiscussionController.deleteMessageOnKeep(keepId: PublicId[Keep])
POST    /site/keeps/:keepId/participants/edit @com.keepit.controllers.website.DiscussionController.editParticipantsOnKeep(keepId: PublicId[Keep])

GET     /site/collections/page      @com.keepit.controllers.website.KeepsController.pageCollections(sort: String ?= "last_kept", offset : Int ?= 0, pageSize: Int ?= 0)
POST    /site/collections/delete    @com.keepit.controllers.website.KeepsController.deleteCollectionByTag(tag: String)
POST    /site/collections/rename    @com.keepit.controllers.website.KeepsController.renameCollectionByTag()
GET     /site/collections/search    @com.keepit.controllers.website.KeepsController.searchUserTags(query: String, limit: Option[Int] = None)

# Legacy:
POST    /site/collections/:id/delete @com.keepit.controllers.website.KeepsController.deleteCollection(id: ExternalId[Collection])
POST    /site/collections/:id/rename @com.keepit.controllers.website.KeepsController.renameCollection(id: ExternalId[Collection])

# Profile pages
GET     /site/user/:name/profile    @com.keepit.controllers.website.UserProfileController.getProfile(name: Username)
GET     /site/user/:name/libraries  @com.keepit.controllers.website.UserProfileController.getProfileLibraries(name: Username, page: Int ?= 0, size: Int ?= 12, filter: String ?= "own")
GET     /site/users/:name/connections @com.keepit.controllers.website.UserProfileController.getProfileConnections(name: Username, n: Int ?= 12)
GET     /site/users/:name/followers  @com.keepit.controllers.website.UserProfileController.getProfileFollowers(name: Username, n: Int ?= 12)
GET     /site/users/:ids            @com.keepit.controllers.website.UserProfileController.getProfileUsers(ids)
GET     /site/users/:id/connections/mutual @com.keepit.controllers.website.UserProfileController.getMutualConnections(id: ExternalId[User])
GET     /site/users/:id/libraries/mutual  @com.keepit.controllers.website.UserProfileController.getMutualLibraries(id: ExternalId[User], page: Int ?= 0, size: Int ?= 12)

GET     /site/libraries             @com.keepit.controllers.website.LibraryController.getLibrarySummariesByUser()
GET     /site/keepableLibraries     @com.keepit.controllers.website.LibraryController.getKeepableLibraries(includeOrgLibraries: Boolean ?= false)
POST    /site/libraries/add         @com.keepit.controllers.website.LibraryController.addLibrary()
POST    /site/libraries/copy        @com.keepit.controllers.website.LibraryController.copyKeeps()
POST    /site/libraries/move        @com.keepit.controllers.website.LibraryController.moveKeeps()

GET     /site/libraries/marketing-suggestions   @com.keepit.controllers.website.LibraryController.marketingSiteSuggestedLibraries()

GET     /site/libraries/:id         @com.keepit.controllers.website.LibraryController.getLibraryById(id: PublicId[Library], showPublishedLibraries: Boolean ?= false, is: Option[String] ?= None)
GET     /site/libraries/:id/summary         @com.keepit.controllers.website.LibraryController.getLibrarySummaryById(id: PublicId[Library])
GET     /site/libraries/:id/updates         @com.keepit.controllers.website.LibraryController.getLibraryUpdates(id: PublicId[Library], since: DateTime)
POST    /site/libraries/:id/modify  @com.keepit.controllers.website.LibraryController.modifyLibrary(id: PublicId[Library])
POST    /site/libraries/:id/delete  @com.keepit.controllers.website.LibraryController.removeLibrary(id: PublicId[Library])
POST    /site/libraries/:id/invite  @com.keepit.controllers.website.LibraryController.inviteUsersToLibrary(id: PublicId[Library])
DELETE  /site/libraries/:id/invite  @com.keepit.controllers.website.LibraryController.revokeLibraryInvitation(id: PublicId[Library])
POST    /site/libraries/:id/join    @com.keepit.controllers.website.LibraryController.joinLibrary(id: PublicId[Library], authToken: Option[String] ?= None, subscribed: Option[Boolean] ?= None)
POST    /site/libraries/joinMultiple    @com.keepit.controllers.website.LibraryController.joinLibraries()
POST    /site/libraries/:id/decline @com.keepit.controllers.website.LibraryController.declineLibrary(id: PublicId[Library])
POST    /site/libraries/:id/leave   @com.keepit.controllers.website.LibraryController.leaveLibrary(id: PublicId[Library])
POST    /site/libraries/:id/subscription @com.keepit.controllers.website.LibraryController.setSubscribedToUpdates(id: PublicId[Library], subscribed: Boolean)

GET     /site/libraries/:id/keeps   @com.keepit.controllers.website.LibraryController.getKeeps(id: PublicId[Library], offset: Int ?= 0, limit: Int ?= 10, showPublishedLibraries: Boolean ?= false)
POST    /site/libraries/:id/keeps   @com.keepit.controllers.website.LibraryController.addKeeps(id: PublicId[Library])
POST    /site/libraries/:id/keeps/delete   @com.keepit.controllers.website.LibraryController.removeKeeps(id: PublicId[Library])
DELETE  /site/libraries/:id/keeps/:k   @com.keepit.controllers.website.LibraryController.removeKeep(id: PublicId[Library], k: ExternalId[Keep])
GET     /site/libraries/:id/keeps/:k/tags/suggest  @com.keepit.controllers.website.LibraryController.suggestTags(id: PublicId[Library], k: ExternalId[Keep], q: Option[String] ?= None, n: Int ?= 5)
GET     /site/libraries/:id/tags/suggest  @com.keepit.controllers.website.LibraryController.suggestTagsSimple(id: PublicId[Library], n: Int ?= 5)
POST    /site/libraries/:id/keeps/:k/note         @com.keepit.controllers.website.LibraryController.editKeepNote(id: PublicId[Library], k: ExternalId[Keep])
POST    /site/libraries/:id/keeps/:k/image        @com.keepit.controllers.website.LibraryController.changeKeepImage(id: PublicId[Library], k: ExternalId[Keep], is: Option[String] = None)

GET     /site/libraries/:id/related                @com.keepit.controllers.website.LibraryController.relatedLibraries(id: PublicId[Library])

GET     /site/libraries/:id/members               @com.keepit.controllers.website.LibraryController.getLibraryMembers(id: PublicId[Library], offset: Int ?= 0, limit: Int ?= 10)
GET     /site/libraries/:id/members/suggest       @com.keepit.controllers.website.LibraryController.suggestMembers(id: PublicId[Library], q: Option[String] ?= None, n: Int ?= 5)
POST    /site/libraries/:id/members/:uId/access   @com.keepit.controllers.website.LibraryController.updateLibraryMembership(id: PublicId[Library], uId: ExternalId[User])

POST    /site/libraries/:id/importTag   @com.keepit.controllers.website.LibraryController.copyKeepsFromCollectionToLibrary(id: PublicId[Library], tag: String)
POST    /site/libraries/:id/moveTag     @com.keepit.controllers.website.LibraryController.moveKeepsFromCollectionToLibrary(id: PublicId[Library], tag: String)
POST    /site/libraries/:id/import-file  @com.keepit.controllers.website.BookmarkImporter.importFileToLibrary(id: PublicId[Library])

POST    /site/libraries/:id/image/upload    @com.keepit.controllers.website.LibraryImageController.uploadLibraryImage(id: PublicId[Library], is: Option[String] ?= None, x: Option[Int] ?= None, y: Option[Int] ?= None)
POST    /site/libraries/:id/image/position  @com.keepit.controllers.website.LibraryImageController.positionLibraryImage(id: PublicId[Library])
DELETE  /site/libraries/:id/image           @com.keepit.controllers.website.LibraryImageController.removeLibraryImage(id: PublicId[Library])
GET     /site/libraries/:ids/images         @com.keepit.controllers.website.LibraryImageController.getLibraryImages(ids: String, is: Option[String] ?= None)

## endpoints only for testing, should be deleted by 2016-01-10
POST    /site/rpb/setArrangement           @com.keepit.controllers.website.UserController.setPreferredLibraryArrangement()
GET     /site/rpb/user/:userId/libraries   @com.keepit.controllers.website.UserController.rpbGetUserLibraries(userId: ExternalId[User], fromId: Option[String] ?= None, limit: Int ?= 10)
GET     /site/rpb/org/:orgId/libraries     @com.keepit.controllers.website.UserController.rpbGetOrgLibraries(orgId: PublicId[Organization], fromId: Option[String] ?= None, limit: Int ?= 10)

POST  /site/libraries/:id/slack/modify      @com.keepit.controllers.website.SlackController.modifyIntegrations(id: PublicId[Library])
POST  /site/libraries/:id/slack/delete      @com.keepit.controllers.website.SlackController.deleteIntegrations(id: PublicId[Library])


GET     /site/user/me               @com.keepit.controllers.website.UserController.currentUser()
POST    /site/user/me               @com.keepit.controllers.website.UserController.updateCurrentUser()
POST    /site/user/me/username      @com.keepit.controllers.website.UserController.updateUsername()
POST    /site/user/me/name          @com.keepit.controllers.website.UserController.updateName()
POST    /site/user/me/biography     @com.keepit.controllers.website.UserController.updateBiography()
POST    /site/user/me/email        @com.keepit.controllers.website.UserController.addEmail()
PUT     /site/user/me/email        @com.keepit.controllers.website.UserController.changePrimaryEmail()
DELETE  /site/user/me/email        @com.keepit.controllers.website.UserController.removeEmail()
GET     /site/user/email            @com.keepit.controllers.website.UserController.getEmailInfo(email: EmailAddress)
POST    /site/user/password         @com.keepit.controllers.website.UserController.changePassword()
GET     /site/user/import-status    @com.keepit.controllers.website.UserController.importStatus()
GET     /site/user/networks         @com.keepit.controllers.website.UserController.socialNetworkInfo()
GET     /site/user/abooks           @com.keepit.controllers.website.UserController.abookInfo()
GET     /site/user/settings         @com.keepit.controllers.website.UserController.getSettings()
POST    /site/user/settings         @com.keepit.controllers.website.UserController.setSettings()

# regex below prevents route from usurping requests intended for other routes, like /site/user/friends
GET     /site/user/$id<[0-9a-f-]{36}> @com.keepit.controllers.website.UserController.basicUserInfo(id: ExternalId[User], friendCount: Boolean ?= false)
GET     /site/user/:id/networks     @com.keepit.controllers.website.UserController.friendNetworkInfo(id: ExternalId[User])
POST    /site/user/:id/unfriend     @com.keepit.controllers.website.UserController.unfriend(id: ExternalId[User])
POST    /site/user/:id/friend       @com.keepit.controllers.website.UserController.friend(id: ExternalId[User])
POST    /site/user/:id/ignoreRequest @com.keepit.controllers.website.UserController.ignoreFriendRequest(id: ExternalId[User])
POST    /site/user/:id/cancelRequest @com.keepit.controllers.website.UserController.cancelFriendRequest(id: ExternalId[User])
POST    /site/user/:id/exclude      @com.keepit.controllers.website.UserController.excludeFriend(id: ExternalId[User])
POST    /site/user/:id/include      @com.keepit.controllers.website.UserController.includeFriend(id: ExternalId[User])
GET     /site/user/outgoingFriendRequests @com.keepit.controllers.website.UserController.outgoingFriendRequests
GET     /site/user/incomingFriendRequests @com.keepit.controllers.website.UserController.incomingFriendRequests

POST    /site/user/hideOrgDomain   @com.keepit.controllers.website.UserController.hideOrganizationDomain(orgId: PublicId[Organization])

GET     /site/user/friends          @com.keepit.controllers.website.UserController.friends(page: Int ?= 0, pageSize: Int ?= 1000)
GET     /site/user/friends/recommended   @com.keepit.controllers.website.PeopleRecommendationController.getFriendRecommendations(offset: Int ?= 0, limit: Int ?= 5)
GET     /site/user/friends/recommended/cards @com.keepit.controllers.website.UserProfileController.getFriendRecommendations(n: Int ?= 12, ids: Int ?= 12)
GET     /site/user/invite/recommended    @com.keepit.controllers.website.PeopleRecommendationController.getInviteRecommendations(offset: Int ?= 0, limit: Int ?= 5)
POST    /site/user/invite/hide           @com.keepit.controllers.website.PeopleRecommendationController.hideInviteRecommendation()
POST    /site/user/:id/hide              @com.keepit.controllers.website.PeopleRecommendationController.hideFriendRecommendation(id: ExternalId[User])

POST    /site/user/invite           @com.keepit.controllers.website.InviteController.inviteV2()
POST    /site/user/delighted/answer @com.keepit.controllers.website.UserController.postDelightedAnswer()
POST    /site/user/delighted/cancel @com.keepit.controllers.website.UserController.cancelDelightedSurvey()
POST    /site/user/close            @com.keepit.controllers.website.UserController.closeAccount()

GET     /site/user/connections/all/search    @com.keepit.controllers.website.TypeaheadController.searchWithInviteStatus(query:Option[String], limit:Option[Int], pictureUrl:Boolean ?= true)
GET     /site/user/contacts/search  @com.keepit.controllers.website.TypeaheadController.searchForContacts(query:Option[String], limit:Option[Int])

GET     /site/user/prefs            @com.keepit.controllers.website.UserController.getPrefs()
POST    /site/user/prefs            @com.keepit.controllers.website.UserController.savePrefs()
POST    /site/user/pic/upload       @com.keepit.controllers.website.UserController.uploadBinaryUserPicture()
POST    /site/user/pic              @com.keepit.controllers.website.UserController.setUserPicture()
POST    /site/user/resend-verification @com.keepit.controllers.website.UserController.resendVerificationEmail(email: EmailAddress)

POST    /site/sms                   @com.keepit.controllers.website.HomeController.sendSmsToGetKifi()

POST          /site/organizations/create                        @com.keepit.controllers.website.OrganizationController.createOrganization()
GET           /site/user/:id/organizations                      @com.keepit.controllers.website.OrganizationController.getOrganizationsForUser(id: ExternalId[User])
GET           /site/organizations/:id                           @com.keepit.controllers.website.OrganizationController.getOrganization(id: PublicId[Organization])
POST          /site/organizations/:id/modify                    @com.keepit.controllers.website.OrganizationController.modifyOrganization(id: PublicId[Organization])
POST          /site/organizations/:id/transfer                  @com.keepit.controllers.website.OrganizationController.transferOrganization(id: PublicId[Organization])
DELETE        /site/organizations/:id/delete                    @com.keepit.controllers.website.OrganizationController.deleteOrganization(id: PublicId[Organization])
GET           /site/organizations/:id/members                   @com.keepit.controllers.website.OrganizationMembershipController.getMembers(id: PublicId[Organization], offset: Int ?= 0, limit: Int ?= 20)
POST          /site/organizations/:id/members/invite            @com.keepit.controllers.website.OrganizationInviteController.inviteUsers(id: PublicId[Organization])
POST          /site/organizations/:id/members/invites/cancel    @com.keepit.controllers.website.OrganizationInviteController.cancelInvites(id: PublicId[Organization])
POST          /site/organizations/:id/members/invites/accept    @com.keepit.controllers.website.OrganizationInviteController.acceptInvitation(id: PublicId[Organization], authToken: Option[String] ?= None)
POST          /site/organizations/:id/members/invites/decline   @com.keepit.controllers.website.OrganizationInviteController.declineInvitation(id: PublicId[Organization])
POST          /site/organizations/:id/members/invites/link      @com.keepit.controllers.website.OrganizationInviteController.createAnonymousInviteToOrganization(id: PublicId[Organization])
POST          /site/organizations/:id/members/modify            @com.keepit.controllers.website.OrganizationMembershipController.modifyMember(id: PublicId[Organization])
POST          /site/organizations/:id/members/remove            @com.keepit.controllers.website.OrganizationMembershipController.removeMember(id: PublicId[Organization])
GET           /site/organizations/:id/members/suggest           @com.keepit.controllers.website.OrganizationInviteController.suggestMembers(id: PublicId[Organization], query: Option[String], limit: Int)
GET           /site/organizations/:id/libraries                 @com.keepit.controllers.website.OrganizationController.getOrganizationLibraries(id: PublicId[Organization], offset: Int ?= 0, limit: Int ?= 20)
POST          /site/organizations/:id/avatar/upload             @com.keepit.controllers.website.OrganizationAvatarController.uploadAvatar(id: PublicId[Organization], x: Int, y: Int, s: Int)
GET           /site/organizations/:id/featureSettings           @com.keepit.controllers.website.PaymentsController.getAccountFeatureSettings(id: PublicId[Organization])
POST          /site/organizations/:id/featureSettings           @com.keepit.controllers.website.PaymentsController.setAccountFeatureSettings(id: PublicId[Organization])
GET           /site/organizations/:id/getDomains                @com.keepit.controllers.website.OrganizationDomainOwnershipController.getDomains(id: PublicId[Organization])
POST          /site/organizations/:id/addDomain                 @com.keepit.controllers.website.OrganizationDomainOwnershipController.addDomain(id: PublicId[Organization])
POST          /site/organizations/:id/removeDomain              @com.keepit.controllers.website.OrganizationDomainOwnershipController.removeDomain(id: PublicId[Organization])
POST          /site/organizations/:id/addDomainAfterVerification  @com.keepit.controllers.website.OrganizationDomainOwnershipController.addDomainOwnershipAfterVerification(id: PublicId[Organization])
POST          /site/organizations/:id/sendMemberConfirmationEmail @com.keepit.controllers.website.OrganizationDomainOwnershipController.sendMemberConfirmationEmail(id: PublicId[Organization])

GET           /site/organizations/:id/referralCode              @com.keepit.controllers.website.PaymentsController.getReferralCode(id: PublicId[Organization])
POST          /site/organizations/:id/redeemCode                @com.keepit.controllers.website.PaymentsController.redeemCreditCode(id: PublicId[Organization])
GET           /site/organizations/:id/rewards                   @com.keepit.controllers.website.PaymentsController.getRewards(id: PublicId[Organization])

GET          /site/organizations/create/slack                  @com.keepit.controllers.website.SlackController.createOrganizationForSlackTeam(slackTeamId: String)
GET          /site/organizations/:id/slack/connect             @com.keepit.controllers.website.SlackController.connectSlackTeamToOrganization(id: PublicId[Organization], slackTeamId: String)

GET           /site/user-or-org/:handle                   @com.keepit.controllers.website.UserOrOrganizationController.getByHandle(handle: Handle, authToken: Option[String] ?= None)
GET           /site/user-or-org/:handle/libraries         @com.keepit.controllers.website.UserOrOrganizationController.getLibrariesByHandle(handle: Handle, page: Int ?= 0, size: Int ?= 12, filter: String ?= "own")
GET           /site/user-or-org/:handle/libraries/:slug   @com.keepit.controllers.website.LibraryController.getLibraryByHandleAndSlug(handle: Handle, slug: LibrarySlug, authToken: Option[String] ?= None)

GET           /site/admin/billing/state                         @com.keepit.controllers.website.PaymentsController.getAccountState(pubId: PublicId[Organization])
POST          /site/admin/billing/state                         @com.keepit.controllers.website.PaymentsController.updateAccountState(pubId: PublicId[Organization], newPlanId: PublicId[com.keepit.payments.PaidPlan], newCardId: PublicId[com.keepit.payments.PaymentMethod])
GET           /site/admin/billing/state/preview                 @com.keepit.controllers.website.PaymentsController.previewAccountState(pubId: PublicId[Organization], newPlanId: PublicId[com.keepit.payments.PaidPlan], newCardId: PublicId[com.keepit.payments.PaymentMethod])
GET           /site/admin/billing/plans                         @com.keepit.controllers.website.PaymentsController.getAvailablePlans(pubId: PublicId[Organization])
GET           /site/admin/billing/ccToken                       @com.keepit.controllers.website.PaymentsController.getDefaultCreditCard(pubId: PublicId[Organization])
POST          /site/admin/billing/ccToken                       @com.keepit.controllers.website.PaymentsController.setCreditCardToken(pubId: PublicId[Organization])
POST          /site/admin/billing/card/add                      @com.keepit.controllers.website.PaymentsController.addCreditCard(pubId: PublicId[Organization])
POST          /site/admin/billing/card/default                  @com.keepit.controllers.website.PaymentsController.setDefaultCreditCard(pubId: PublicId[Organization])
GET           /site/admin/billing/card/default                  @com.keepit.controllers.website.PaymentsController.getDefaultCreditCard(pubId: PublicId[Organization])
GET           /site/admin/billing/contacts                      @com.keepit.controllers.website.PaymentsController.getAccountContacts(pubId: PublicId[Organization])
POST          /site/admin/billing/contacts                      @com.keepit.controllers.website.PaymentsController.setAccountContacts(pubId: PublicId[Organization])
GET           /site/admin/billing/featureSettings               @com.keepit.controllers.website.PaymentsController.getAccountFeatureSettings(pubId: PublicId[Organization])
POST          /site/admin/billing/featureSettings               @com.keepit.controllers.website.PaymentsController.setAccountFeatureSettings(pubId: PublicId[Organization])
POST          /site/admin/billing/plan                          @com.keepit.controllers.website.PaymentsController.updatePlan(pubId: PublicId[Organization], planPubId: PublicId[com.keepit.payments.PaidPlan])
GET           /site/admin/billing/events                        @com.keepit.controllers.website.PaymentsController.getEvents(pubId: PublicId[Organization], limit: Int, fromId: Option[String] ?= None, inclusive: Boolean ?= false)
##########################################
# Email-Link API
##########################################

GET     /r/$token<[0-9a-f-]{36}>    @com.keepit.controllers.email.EmailDeepLinkController.handle(token: String)
GET     /mr/:token                  @com.keepit.controllers.email.EmailDeepLinkController.handleMobile(token: String)
GET     /ir/:token                  @com.keepit.controllers.email.EmailDeepLinkController.handleIPhoneTempForDev(token: String)

##########################################
# External Services API
##########################################
POST    /api/sendgrid/webhook       @com.keepit.controllers.api.SendgridController.parseEvent()
GET     /api/desk/isLoggedIn        @com.keepit.controllers.api.DeskController.isLoggedIn

##########################################
# Routes for testing purposes only
##########################################

GET     /test/me                    @com.keepit.controllers.testing.ForTestingOnlyController.me

##########################################
# Admin
##########################################

GET     /admin                      @com.keepit.controllers.admin.AdminDashboardController.index
GET     /admin/graphs/users.json    @com.keepit.controllers.admin.AdminDashboardController.usersByDate
GET     /admin/engineering/overview @com.keepit.controllers.admin.AdminEngineeringDashboardController.overview

GET     /admin/abooks               @com.keepit.controllers.admin.ABookAdminController.allABooksView
GET     /admin/abooks/page/:page    @com.keepit.controllers.admin.ABookAdminController.abooksView(page:Int)

GET     /admin/bookmarks/page/:page @com.keepit.controllers.admin.AdminBookmarksController.bookmarksView(page: Int)
GET     /admin/bookmarks/edit       @com.keepit.controllers.admin.AdminBookmarksController.edit(id: Id[Keep])
GET     /admin/bookmarks/editWithUri @com.keepit.controllers.admin.AdminBookmarksController.editFirstBookmarkForUri(id: Id[NormalizedURI])
POST    /admin/uri/disable/:id      @com.keepit.controllers.admin.AdminBookmarksController.disableUrl(id: Id[NormalizedURI])
POST    /admin/bookmarks/inactive   @com.keepit.controllers.admin.AdminBookmarksController.inactive(id: Id[Keep])
POST    /admin/bookmarks/special    @com.keepit.controllers.admin.AdminBookmarksController.www$youtube$com$watch$v$otCpCn0l4Wo(id: Id[Keep])
POST    /admin/bookmarks/reprocessNotes @com.keepit.controllers.admin.AdminBookmarksController.reprocessNotesOfKeeps(appendTagsToNote: Boolean)
POST    /admin/bookmarks/replaceTags @com.keepit.controllers.admin.AdminBookmarksController.replaceTagOnKeeps()
POST    /admin/bookmarks/removeTag  @com.keepit.controllers.admin.AdminBookmarksController.removeTagFromKeeps()
GET     /admin/bookmarks/userKeywords @com.keepit.controllers.admin.AdminBookmarksController.userBookmarkKeywords
GET     /admin/bookmarksKeywords/page/:page @com.keepit.controllers.admin.AdminBookmarksController.bookmarksKeywordsPageView(page: Int)
DELETE  /admin/users/:id/tags/:name @com.keepit.controllers.admin.AdminBookmarksController.deleteTag(id: Id[User], name: String)
GET     /admin/bookmarks/checkLibraryKeepVisibility             @com.keepit.controllers.admin.AdminBookmarksController.checkLibraryKeepVisibility(libId: Id[Library])

GET     /admin/uri/:uriId           @com.keepit.controllers.admin.UrlController.getURIInfo(uriId: Id[NormalizedURI])
#GET     /admin/uri/article/        @com.keepit.controllers.admin.UrlController.getArticle(uriId: Id[NormalizedURI], kind: ArticleKind[_ <: Article], version: ArticleVersion)
GET     /admin/uri/:uriId/article/:kind @com.keepit.controllers.admin.UrlController.getBestArticle(uriId: Id[NormalizedURI], kind: ArticleKind[_ <: Article])
GET     /admin/uri/:uriId/fetchAsap @com.keepit.controllers.admin.UrlController.fetchAsap(uriId: Id[NormalizedURI])

GET     /admin/domains/find            @com.keepit.controllers.admin.UrlController.searchDomain
GET     /admin/domains/:name             @com.keepit.controllers.admin.UrlController.getDomain(name: String)
POST    /admin/domains/:id/toggleEmailProvider @com.keepit.controllers.admin.UrlController.domainToggleEmailProvider(id: Id[com.keepit.classify.Domain])
GET     /admin/domains/tags            @com.keepit.controllers.admin.UrlController.getDomainTags
POST    /admin/domains/tags            @com.keepit.controllers.admin.UrlController.saveDomainTags
GET     /admin/domains/overrides       @com.keepit.controllers.admin.UrlController.getDomainOverrides
POST    /admin/domains/overrides       @com.keepit.controllers.admin.UrlController.saveDomainOverrides

GET     /admin/keepDiscoveries/page/:page @com.keepit.controllers.admin.AdminAttributionController.keepDiscoveriesView(page:Int, size:Int ?= 50, showImage:Boolean ?= false)
GET     /admin/keepClicks/page/:page @com.keepit.controllers.admin.AdminAttributionController.keepDiscoveriesView(page:Int, size:Int ?= 50, showImage:Boolean ?= false)
GET     /admin/rekeeps/page/:page    @com.keepit.controllers.admin.AdminAttributionController.rekeepsView(page:Int, size:Int ?= 50, showImage:Boolean ?= false)
GET     /admin/keepInfos/:id         @com.keepit.controllers.admin.AdminAttributionController.keepInfos(id:Id[User])
GET     /admin/reKeeps/:id           @com.keepit.controllers.admin.AdminAttributionController.reKeepInfos(id:Id[User])
GET     /admin/topReKeeps            @com.keepit.controllers.admin.AdminAttributionController.topReKeeps(degree:Int ?= 3)
GET     /admin/keepAttribution       @com.keepit.controllers.admin.AdminAttributionController.topReKeeps(degree:Int ?= 3)

POST    /admin/reKeepStats/update       @com.keepit.controllers.admin.AdminAttributionController.updateReKeepStats
POST    /admin/reKeepStats/user/update  @com.keepit.controllers.admin.AdminAttributionController.updateUserReKeepStats
POST    /admin/reKeepStats/users/update @com.keepit.controllers.admin.AdminAttributionController.updateUsersReKeepStats
POST    /admin/reKeepStats/all/update   @com.keepit.controllers.admin.AdminAttributionController.updateAllReKeepStats

GET     /admin/sitemap/library          @com.keepit.controllers.admin.AdminSiteMapController.generateLibrarySitemap()
GET     /admin/sitemap/user             @com.keepit.controllers.admin.AdminSiteMapController.generateUserSitemap()

GET     /admin/data/orphan                                                     @com.keepit.controllers.admin.UrlController.orphanCleanup(readOnly: Boolean ?= true)
GET     /admin/data/orphanFull                                                 @com.keepit.controllers.admin.UrlController.orphanCleanupFull(readOnly: Boolean ?= true)
GET     /admin/data/renormalize                                                @com.keepit.controllers.admin.UrlController.renormalize(readOnly: Boolean ?= true, clearSeq: Boolean ?= false, domainRegex: Option[String] ?= None)
GET     /admin/data/renormalizeConsole                                         @com.keepit.controllers.admin.UrlController.urlRenormalizeConsole()
POST    /admin/data/renormalizeConsole/submit                                  @com.keepit.controllers.admin.UrlController.urlRenormalizeConsoleSubmit()
POST    /admin/data/pornDomainFlag                                             @com.keepit.controllers.admin.UrlController.pornDomainFlag()
GET     /admin/data/clearRedirects/:toUriId                                    @com.keepit.controllers.admin.UrlController.clearRedirects(toUriId: Id[NormalizedURI])
GET     /admin/data/setFixDuplicateKeepsSeq/:seq                               @com.keepit.controllers.admin.UrlController.setFixDuplicateKeepsSeq(seq: Long)
GET     /admin/data/normalization/:page                                        @com.keepit.controllers.admin.UrlController.normalizationView(page: Int)
GET     /admin/data/renormalization/:page                                      @com.keepit.controllers.admin.UrlController.renormalizationView(page: Int)
GET     /admin/data/batchURIMigration                                          @com.keepit.controllers.admin.UrlController.batchURIMigration
POST    /admin/data/normalization/submit                                       @com.keepit.controllers.admin.UrlController.submitNormalization
GET     /admin/data/patterns                                                   @com.keepit.controllers.admin.UrlController.getPatterns
POST    /admin/data/patterns                                                   @com.keepit.controllers.admin.UrlController.savePatterns
GET     /admin/data/remigrate                                                  @com.keepit.controllers.admin.UrlController.fixRedirectedUriStates(doIt: Boolean ?= false)
POST    /admin/data/clearRestriction                                           @com.keepit.controllers.admin.UrlController.clearRestriction(uriId: Id[NormalizedURI])
POST    /admin/data/flagAsAdult                                                @com.keepit.controllers.admin.UrlController.flagAsAdult(uriId: Id[NormalizedURI])
GET     /admin/data/cleanKeepsByUri                                            @com.keepit.controllers.admin.UrlController.cleanKeepsByUri(firstPage: Int ?= 0, pageSize: Int ?= 100)

GET     /admin/article/index        @com.keepit.controllers.admin.AdminArticleIndexerController.index
GET     /admin/article/reindex      @com.keepit.controllers.admin.AdminArticleIndexerController.reindex
GET     /admin/article/sequenceNumber @com.keepit.controllers.admin.AdminArticleIndexerController.getSequenceNumber
GET     /admin/article/refreshSearcher @com.keepit.controllers.admin.AdminArticleIndexerController.refreshSearcher
GET     /admin/article/dumpDoc/:uriId  @com.keepit.controllers.admin.AdminArticleIndexerController.dumpLuceneDocument(uriId: Id[NormalizedURI], deprecated: Boolean ?= false)

GET     /admin/indexInfo/all        @com.keepit.controllers.admin.AdminIndexInfoController.all
GET     /admin/indexInfo/growth     @com.keepit.controllers.admin.AdminIndexInfoController.viewIndexGrowth

GET     /admin/search/performance/viewPerformance @com.keepit.controllers.admin.AdminSearchPerformanceController.viewSearchPerformance

GET     /admin/users/reindex        @com.keepit.controllers.admin.AdminUserIndexController.reindex()
GET     /admin/users                @com.keepit.controllers.admin.AdminUserController.allUsersView
GET     /admin/users/message        @com.keepit.controllers.admin.AdminUserController.bulkMessageUsers()
POST    /admin/users/reNormalizedUsername        @com.keepit.controllers.admin.AdminUserController.reNormalizedUsername(readOnly: Boolean ?= true, max: Int ?= 10)
GET     /admin/realUsers            @com.keepit.controllers.admin.AdminUserController.allRegisteredUsersView
GET     /admin/fakeUsers            @com.keepit.controllers.admin.AdminUserController.allFakeUsersView
POST    /admin/users/merge          @com.keepit.controllers.admin.AdminUserController.merge
GET     /admin/users/page/:page     @com.keepit.controllers.admin.AdminUserController.usersView(page: Int)
GET     /admin/realUsers/page/:page @com.keepit.controllers.admin.AdminUserController.registeredUsersView(page: Int)
GET     /admin/fakeUsers/page/:page @com.keepit.controllers.admin.AdminUserController.fakeUsersView(page: Int)
POST    /admin/users/search         @com.keepit.controllers.admin.AdminUserController.searchUsers()
GET     /admin/user/:id             @com.keepit.controllers.admin.AdminUserController.userViewByEitherId(id: String, showPrivates: Boolean ?= false)
GET     /admin/user/:id/keeps       @com.keepit.controllers.admin.AdminUserController.userKeepsView(id: Id[User], showPrivates: Boolean ?= false)
GET     /admin/user/:id/libraries   @com.keepit.controllers.admin.AdminUserController.userLibrariesView(id: Id[User], showSecrets: Boolean ?= false)
GET     /admin/user/:id/ips         @com.keepit.controllers.admin.AdminUserController.userIpAddressesView(id: Id[User])
GET     /admin/user/:id/json        @com.keepit.controllers.admin.AdminUserController.userJsonByEitherId(id: String)
POST    /admin/user/:id             @com.keepit.controllers.admin.AdminUserController.userView(id: Id[User], showPrivates: Boolean ?= false)
GET     /admin/user/:id/more-info   @com.keepit.controllers.admin.AdminUserController.moreUserInfoView(id: Id[User], showPrivates: Boolean ?= false)
GET     /admin/user/:id/prefixSearch @com.keepit.controllers.admin.AdminUserController.prefixSearch(id:Id[User], query:String ?= "")
GET     /admin/user/:id/prefixSocialSearch  @com.keepit.controllers.admin.AdminUserController.prefixSocialSearch(id:Id[User], query:String ?= "")
GET     /admin/user/:id/prefixContactSearch @com.keepit.controllers.admin.AdminUserController.prefixContactSearch(id:Id[User], query:String ?= "")
POST    /admin/user/:user1/connect  @com.keepit.controllers.admin.AdminUserController.connectUsers(user1: Id[User])
POST    /admin/user/:id/createLibrary  @com.keepit.controllers.admin.AdminUserController.createLibrary(id: Id[User])
POST    /admin/user/:id/experiment/:exp  @com.keepit.controllers.admin.AdminUserController.addExperimentAction(id: Id[User], exp: String)
POST    /admin/user/bookmarks/:id/collections @com.keepit.controllers.admin.AdminUserController.updateCollectionsForBookmark(id: Id[Keep])
DELETE  /admin/user/:id/experiment/:exp  @com.keepit.controllers.admin.AdminUserController.removeExperimentAction(id: Id[User], exp: String)
POST    /admin/user/:id/name        @com.keepit.controllers.admin.AdminUserController.changeUsersName(id: Id[User])
POST    /admin/user/:id/pic         @com.keepit.controllers.admin.AdminUserController.setUserPicture(id: Id[User], pictureId: Id[UserPicture])
POST    /admin/user/:id/picUpdate   @com.keepit.controllers.admin.AdminUserController.updateUserPicture(id: Id[User])
POST    /admin/user/:id/state/:state  @com.keepit.controllers.admin.AdminUserController.changeState(id: Id[User], state: String)
POST    /admin/user/:id/update      @com.keepit.controllers.admin.AdminUserController.updateUser(id: Id[User])
POST    /admin/user/:id/setInvitesCount      @com.keepit.controllers.admin.AdminUserController.setInvitesCount(id: Id[User])
GET     /admin/user/:id/social_users/refresh @com.keepit.controllers.admin.AdminUserController.refreshAllSocialInfo(id: Id[User])
POST    /admin/user/:id/impersonate @com.keepit.controllers.admin.AdminAuthController.impersonate(id: Id[User])
POST    /admin/user/:id/deactivate  @com.keepit.controllers.admin.AdminUserController.deactivate(id: Id[User])
GET     /admin/user/:id/mixpanel/reset    @com.keepit.controllers.admin.AdminUserController.resetMixpanelProfile(id: Id[User])
POST    /admin/user/:id/uservalue   @com.keepit.controllers.admin.AdminUserController.userValue(id: Id[User])
POST    /admin/user/:id/username   @com.keepit.controllers.admin.AdminUserController.setUsername(id: Id[User])
GET     /admin/user/:id/clientFlush @com.keepit.controllers.admin.AdminUserController.flushClients(id: Id[User])
POST    /admin/unimpersonate        @com.keepit.controllers.admin.AdminAuthController.unimpersonate()
GET    /admin/users/bumpSeq          @com.keepit.controllers.admin.AdminUserController.bumpUserSeq()
GET     /admin/users/bumpConnSeq     @com.keepit.controllers.admin.AdminUserController.bumpUpSeqNumForConnections()
GET    /admin/users/mixpanel/reset          @com.keepit.controllers.admin.AdminUserController.resetAllMixpanelProfiles()
GET    /admin/users/mixpanel/delete          @com.keepit.controllers.admin.AdminUserController.deleteAllMixpanelProfiles()
POST    /admin/user/:id/emails/:code/send    @com.keepit.controllers.admin.AdminUserController.sendEmail(id: Id[User], code: String)
POST    /admin/user/:id/ignorePotentialOrgs      @com.keepit.controllers.admin.AdminUserController.setIgnoreForPotentialOrganizations(id: Id[User])
POST    /admin/user/:userId/hideOrganizationRecommendation @com.keepit.controllers.admin.AdminUserController.hideOrganizationRecoForUser(userId: Id[User], orgId: Id[Organization])
POST    /admin/experiment/:exp/add  @com.keepit.controllers.admin.AdminUserController.addExperimentForUsers(exp: String)


GET     /admin/organization/:id                              @com.keepit.controllers.admin.AdminOrganizationController.organizationViewByEitherId(id: String, numMemberRecos: Int ?= 60)
GET     /admin/organization/id/:id                           @com.keepit.controllers.admin.AdminOrganizationController.organizationViewBy(id: Id[Organization], numMemberRecos: Int ?= 60)
POST    /admin/organization/:id/setName                      @com.keepit.controllers.admin.AdminOrganizationController.setName(id: Id[Organization])
POST    /admin/organization/:id/setHandle                    @com.keepit.controllers.admin.AdminOrganizationController.setHandle(id: Id[Organization])
POST    /admin/organization/:id/setDescription               @com.keepit.controllers.admin.AdminOrganizationController.setDescription(id: Id[Organization])
POST    /admin/organization/:id/addCandidate                 @com.keepit.controllers.admin.AdminOrganizationController.addCandidate(id: Id[Organization])
POST    /admin/organization/:id/removeCandidate              @com.keepit.controllers.admin.AdminOrganizationController.removeCandidate(id: Id[Organization])
POST    /admin/organization/:id/inviteCandidateToOrg         @com.keepit.controllers.admin.AdminOrganizationController.inviteCandidateToOrg(id: Id[Organization])
POST    /admin/organization/:id/addMember                    @com.keepit.controllers.admin.AdminOrganizationController.addMember(id: Id[Organization])
POST    /admin/organization/:id/removeMember                 @com.keepit.controllers.admin.AdminOrganizationController.removeMember(id: Id[Organization])
POST    /admin/organization/:id/transferOwner                @com.keepit.controllers.admin.AdminOrganizationController.transferOwner(id: Id[Organization])
POST    /admin/organization/:id/ownDomain                    @com.keepit.controllers.admin.AdminOrganizationController.addDomainOwnership(id: Id[Organization])
GET     /admin/organization/:id/disownDomain/:domainHostname @com.keepit.controllers.admin.AdminOrganizationController.removeDomainOwnership(id: Id[Organization], domainHostname: String)
POST    /admin/organization/:id/forceDeactivate              @com.keepit.controllers.admin.AdminOrganizationController.forceDeactivate(id: Id[Organization])
POST    /admin/organization/:id/experiment/:exp              @com.keepit.controllers.admin.AdminOrganizationController.addExperimentAction(id: Id[Organization], exp: String)
DELETE  /admin/organization/:id/experiment/:exp              @com.keepit.controllers.admin.AdminOrganizationController.removeExperimentAction(id: Id[Organization], exp: String)
GET     /admin/organizations                                 @com.keepit.controllers.admin.AdminOrganizationController.organizationsView(page: Int = 0)
GET     /admin/organizations/:page                           @com.keepit.controllers.admin.AdminOrganizationController.organizationsView(page: Int)
GET     /admin/fakeOrganizations                             @com.keepit.controllers.admin.AdminOrganizationController.fakeOrganizationsView(page: Int = 0)
GET     /admin/fakeOrganizations/:page                       @com.keepit.controllers.admin.AdminOrganizationController.fakeOrganizationsView(page: Int)
GET     /admin/realOrganizations                             @com.keepit.controllers.admin.AdminOrganizationController.realOrganizationsView(page: Int = 0)
GET     /admin/realOrganizations/:page                       @com.keepit.controllers.admin.AdminOrganizationController.realOrganizationsView(page: Int)
GET     /admin/liveOrganizations                             @com.keepit.controllers.admin.AdminOrganizationController.liveOrganizationsView()
GET     /admin/findOrganizationByName                        @com.keepit.controllers.admin.AdminOrganizationController.findOrganizationByName(orgName: String)
GET     /admin/findOrganizationByNameJson                    @com.keepit.controllers.admin.AdminOrganizationController.findOrganizationByNameJson(orgName: String)
POST    /admin/organizations/create                          @com.keepit.controllers.admin.AdminOrganizationController.createOrganization()
POST    /admin/organizations/addOrCreateByUser/:userId       @com.keepit.controllers.admin.AdminOrganizationController.addCandidateOrCreateByName(userId: Id[User])
POST    /admin/organizations/importOrgsFromLinkedIn          @com.keepit.controllers.admin.AdminOrganizationController.importOrgsFromLinkedIn()
POST    /admin/organizations/applyDefaultSettingsToOrgConfigs           @com.keepit.controllers.admin.AdminOrganizationController.applyDefaultSettingsToOrgConfigs()
POST    /admin/organizations/cleanUpEmailAddresses           @com.keepit.controllers.admin.AdminOrganizationController.cleanUpEmailAddresses()


GET     /admin/topKeepersNotInOrg   @com.keepit.controllers.admin.AdminUserController.topKeepersNotInOrg
GET     /admin/usersPotentialOrgs       @com.keepit.controllers.admin.AdminUserController.allUsersPotentialOrgsView
GET     /admin/linkedInUsersWithoutOrgs   @com.keepit.controllers.admin.AdminUserController.allLinkedInUsersWithoutOrgsView
GET     /admin/usersPotentialOrgs/page/:page @com.keepit.controllers.admin.AdminUserController.usersPotentialOrgsView(page: Int)
GET     /admin/linkedInUsersWithoutOrgs/page/:page @com.keepit.controllers.admin.AdminUserController.linkedInUsersWithoutOrgsView(page: Int)

POST    /admin/social_users/migrateHashColumn               @com.keepit.controllers.admin.AdminSocialUserController.migrateHashColumn(page: Int, iters: Int)
POST    /admin/social_users/smoothLastGraphRefreshTimes     @com.keepit.controllers.admin.AdminSocialUserController.smoothLastGraphRefreshTimes(minutesFromNow: Int)
GET     /admin/social_users/:page   @com.keepit.controllers.admin.AdminSocialUserController.socialUsersView(page: Int)
GET     /admin/social_user/:id      @com.keepit.controllers.admin.AdminSocialUserController.socialUserView(id: Id[SocialUserInfo])
POST     /admin/social_user/:id/disconnect      @com.keepit.controllers.admin.AdminSocialUserController.disconnectSocialUser(id: Id[SocialUserInfo], revoke: Boolean ?= false)
GET     /admin/social_user/:id/refresh @com.keepit.controllers.admin.AdminSocialUserController.refreshSocialInfo(id: Id[SocialUserInfo])
GET     /admin/social_user/:id/reset @com.keepit.controllers.admin.AdminSocialUserController.resetSocialUser(id: Id[SocialUserInfo])

GET     /admin/ec2-instance         @com.keepit.controllers.admin.AmazonInstanceController.instanceInfo()
GET     /admin/cache                @com.keepit.controllers.admin.AdminCacheController.serviceView
GET     /admin/cache/modify     @com.keepit.controllers.admin.AdminCacheController.modifyCache
GET     /admin/cache/modify/entry  @com.keepit.controllers.admin.AdminCacheController.getCacheEntry(key: String)
DELETE  /admin/cache/modify/entry  @com.keepit.controllers.admin.AdminCacheController.deleteCacheEntry(key: String)
PUT     /admin/cache/modify/entry  @com.keepit.controllers.admin.AdminCacheController.setCacheEntry(key: String, value: String, duration: Int)

GET     /admin/cache/clearLocalCaches          @com.keepit.controllers.admin.AdminCacheController.clearLocalCaches(service: String ?= "all", prefix: String ?= "")
GET     /admin/websocket            @com.keepit.controllers.admin.AdminWebSocketController.serviceView

GET     /admin/searchConfig/:id     @com.keepit.controllers.admin.AdminSearchConfigController.showUserConfig(id: Id[User])
POST    /admin/searchConfig/:id/set   @com.keepit.controllers.admin.AdminSearchConfigController.setUserConfig(id: Id[User])
GET     /admin/searchConfig/:id/reset @com.keepit.controllers.admin.AdminSearchConfigController.resetUserConfig(id: Id[User])

GET     /admin/explainUriResult        @com.keepit.controllers.admin.AdminSearchController.explainUriResult(query: String, uriId: Id[NormalizedURI], libraryId: Option[Long], lang: String, debug: Option[String], disablePrefixSearch: Boolean ?= false, disableFullTextSearch: Boolean ?= false)
GET     /admin/explainLibraryResult        @com.keepit.controllers.admin.AdminSearchController.explainLibraryResult(query: String, libraryId: PublicId[Library], debug: Option[String], disablePrefixSearch: Boolean ?= false, disableFullTextSearch: Boolean ?= false)
GET     /admin/explainUserResult        @com.keepit.controllers.admin.AdminSearchController.explainUserResult(query: String, userId: Id[User], debug: Option[String], disablePrefixSearch: Boolean ?= false, disableFullTextSearch: Boolean ?= false)

GET     /admin/search/results/:id   @com.keepit.controllers.admin.AdminSearchController.articleSearchResult(id: ExternalId[ArticleSearchResult])

GET     /admin/slider/patterns      @com.keepit.controllers.admin.SliderAdminController.getPatterns
POST    /admin/slider/patterns      @com.keepit.controllers.admin.SliderAdminController.savePatterns
GET     /admin/slider/version       @com.keepit.controllers.admin.SliderAdminController.getVersionForm
POST    /admin/slider/version       @com.keepit.controllers.admin.SliderAdminController.broadcastLatestVersion(ver: String)
POST    /admin/slider/killVersion   @com.keepit.controllers.admin.SliderAdminController.killVersion(ver: String)
POST    /admin/slider/unkillVersion @com.keepit.controllers.admin.SliderAdminController.unkillVersion(ver: String)
POST    /admin/slider/goldenVersion @com.keepit.controllers.admin.SliderAdminController.goldenVersion(ver: String)

GET     /admin/libraries                    @com.keepit.controllers.admin.AdminLibraryController.index(page: Int ?= 0)
GET     /admin/libraries/:id                @com.keepit.controllers.admin.AdminLibraryController.libraryView(id: Id[Library], transfer: Boolean ?= false)
GET     /admin/libraries/:id/indexed        @com.keepit.controllers.admin.AdminLibraryController.getLuceneDocument(id: Id[Library])
GET     /admin/libraries/:id/keeps          @com.keepit.controllers.admin.AdminLibraryController.libraryKeepsView(id: Id[Library], page: Int ?= 0, showPrivates: Boolean ?= false, showInactives: Boolean ?= false)
POST    /admin/libraries/internForUser      @com.keepit.controllers.admin.AdminLibraryController.internUserSystemLibraries(userId: Id[User])
POST    /admin/libraries/internForAllUsers  @com.keepit.controllers.admin.AdminLibraryController.internAllUserSystemLibraries(startingUserId: Id[User], endingUserId: Id[User])
POST    /admin/libraries/:id/state/:state   @com.keepit.controllers.admin.AdminLibraryController.changeState(id: Id[Library], state: String)
POST    /admin/libraries/update             @com.keepit.controllers.admin.AdminLibraryController.updateLibraries
POST    /admin/libraries/migrateKeepImages  @com.keepit.controllers.ext.ExtKeepImageController.loadPrevImageForKeep(startUserId: Long, endUserId: Long)
POST    /admin/libraries/updateLibraryOwner @com.keepit.controllers.admin.AdminLibraryController.updateLibraryOwner(libraryId: Id[Library], fromUserId: Id[User], toUserId: Id[User])
POST    /admin/libraries/saveSuggestedSearches          @com.keepit.controllers.admin.AdminLibraryController.saveSuggestedSearches
POST    /admin/libraries/setLibraryOwner                @com.keepit.controllers.admin.AdminLibraryController.setLibraryOwner(libId: Id[Library])
POST    /admin/libraries/forceAddMember                 @com.keepit.controllers.admin.AdminLibraryController.unsafeAddMember
POST    /admin/libraries/forceMoveLibraryKeeps          @com.keepit.controllers.admin.AdminLibraryController.unsafeMoveLibraryKeeps
POST    /admin/libraries/forceModify                    @com.keepit.controllers.admin.AdminLibraryController.unsafeModifyLibrary
POST    /admin/libraries/changeWhoCanComment            @com.keepit.controllers.admin.AdminLibraryController.changeWhoCanComment()

GET     /admin/typeahead                    @com.keepit.controllers.admin.TypeaheadAdminController.index
GET     /admin/typeahead/userSearch         @com.keepit.controllers.admin.TypeaheadAdminController.userSearch(userId:Id[User], query:String ?= "")
GET     /admin/typeahead/socialSearch       @com.keepit.controllers.admin.TypeaheadAdminController.socialSearch(userId:Id[User], query:String ?= "")
GET     /admin/typeahead/contactSearch      @com.keepit.controllers.admin.TypeaheadAdminController.contactSearch(userId:Id[User], query:String ?= "")
GET     /admin/typeahead/search             @com.keepit.controllers.admin.TypeaheadAdminController.search(userId:Id[User], query:String ?= "", limit:Int ?= 5, pictureUrl:Boolean ?= true)

POST    /admin/typeahead/:filterType/refreshPrefixFilter        @com.keepit.controllers.admin.TypeaheadAdminController.refreshPrefixFilter(filterType:String)
POST    /admin/typeahead/:filterType/refreshPrefixFiltersByIds  @com.keepit.controllers.admin.TypeaheadAdminController.refreshPrefixFiltersByIds(filterType:String)
POST    /admin/typeahead/:filterType/refreshAll                 @com.keepit.controllers.admin.TypeaheadAdminController.refreshAll(filterType:String)

POST    /admin/typeahead/refreshAllPrefixFilters                @com.keepit.controllers.admin.TypeaheadAdminController.refreshAllPrefixFilters()

GET     /admin/phrases              @com.keepit.controllers.admin.PhraseController.displayPhrases(page: Int ?= 0)
POST    /admin/phrases/add          @com.keepit.controllers.admin.PhraseController.addPhrase
POST    /admin/phrases/refresh      @com.keepit.controllers.admin.PhraseController.refreshPhrases
POST    /admin/phrases/save         @com.keepit.controllers.admin.PhraseController.savePhrases

GET     /admin/clusters/overview        @com.keepit.controllers.admin.AdminClusterController.clustersView
GET     /admin/clusters/zooKeeperInspector        @com.keepit.controllers.admin.AdminClusterController.zooKeeperInspector

GET     /admin/experiments/overview   @com.keepit.controllers.admin.AdminExperimentController.overview
GET     /admin/experiments/users/:exp/page/:page @com.keepit.controllers.admin.AdminUserController.byExperimentUsersView(page: Int, exp: String)
POST     /admin/experiments/saveGenerator @com.keepit.controllers.admin.AdminExperimentController.saveGenerator
GET    /admin/experiments/removeConditions  @com.keepit.controllers.admin.AdminExperimentController.removeConditions(exId: Id[ProbabilisticExperimentGenerator])

GET     /admin/learning/pornDetect/model    @com.keepit.controllers.admin.AdminPornDetectorController.getPornDetectorModel
GET     /admin/learning/pornDetect          @com.keepit.controllers.admin.AdminPornDetectorController.index
POST    /admin/learning/pornDetect/detect   @com.keepit.controllers.admin.AdminPornDetectorController.detect
GET     /admin/learning/pornDetect/uris/:page                   @com.keepit.controllers.admin.AdminPornDetectorController.pornUrisView(page: Int, publicOnly: Boolean ?= false)
GET     /admin/learning/pornDetect/bms/:page                    @com.keepit.controllers.admin.AdminPornDetectorController.pornUrisView(page: Int, publicOnly: Boolean ?= true)
POST    /admin/learning/pornDetect/removeRestrictions      @com.keepit.controllers.admin.AdminPornDetectorController.removeRestrictions
POST    /admin/learning/pornDetect/whitelist               @com.keepit.controllers.admin.AdminPornDetectorController.whitelist

GET     /adimin/cortex/lda                                 @com.keepit.controllers.admin.AdminLDAController.index
GET     /adimin/cortex/lda/version                         @com.keepit.controllers.admin.AdminLDAController.versionPage(version: ModelVersion[DenseLDA])
POST    /admin/cortex/lda/showTopics                       @com.keepit.controllers.admin.AdminLDAController.showTopics
POST    /admin/cortex/lda/wordTopic                        @com.keepit.controllers.admin.AdminLDAController.wordTopic
POST    /admin/cortex/lda/docTopic                         @com.keepit.controllers.admin.AdminLDAController.docTopic
POST    /admin/cortex/lda/saveEdits                        @com.keepit.controllers.admin.AdminLDAController.saveEdits
POST    /admin/cortex/lda/userUriInterest                  @com.keepit.controllers.admin.AdminLDAController.userUriInterest
POST    /admin/cortex/lda/userTopicMean                    @com.keepit.controllers.admin.AdminLDAController.userTopicMean
GET     /admin/cortex/lda/topicDetail                      @com.keepit.controllers.admin.AdminLDAController.topicDetail(topicId: Int, version: Int)
GET     /admin/cortex/lda/peopleLikeYou                    @com.keepit.controllers.admin.AdminLDAController.peopleLikeYou(topK: Int ?= 20)
GET     /admin/cortex/lda/unamedTopics                     @com.keepit.controllers.admin.AdminLDAController.unamedTopics(limit: Int ?= 5, version: Option[Int] ?= None)
POST    /admin/cortex/lda/libraryTopic                     @com.keepit.controllers.admin.AdminLDAController.libraryTopic
POST    /admin/cortex/lda/userLibraryScore                 @com.keepit.controllers.admin.AdminLDAController.userLibraryScore

GET     /admin/graph/statistics                            @com.keepit.controllers.admin.GraphAdminController.statistics
GET     /admin/graph/wander                                @com.keepit.controllers.admin.WanderingAdminController.wander()
POST    /admin/graph/wander                                @com.keepit.controllers.admin.WanderingAdminController.wander()

GET     /admin/twitter                                     @com.keepit.controllers.admin.AdminTwitterWaitlistController.getWaitlist()
GET     /admin/twitter/accept                              @com.keepit.controllers.admin.AdminTwitterWaitlistController.acceptUser(userId: Id[User], handle: String)
GET     /admin/twitter/email                               @com.keepit.controllers.admin.AdminTwitterWaitlistController.sendAcceptEmail(syncStateId: Id[TwitterSyncState], userId: Id[User], safe: Boolean ?= true)

GET           /admin/rover/searchUrl                                                 @com.keepit.controllers.admin.AdminRoverController.searchUrl()
POST          /admin/rover/searchUrl                                                 @com.keepit.controllers.admin.AdminRoverController.findUrl()
GET           /admin/rover/proxies                                                   @com.keepit.controllers.admin.AdminRoverController.getAllProxies()
POST          /admin/rover/proxies                                                   @com.keepit.controllers.admin.AdminRoverController.saveProxies()
POST          /admin/rover/proxies/create                                            @com.keepit.controllers.admin.AdminRoverController.createProxy
GET           /admin/rover/urlRules                                                  @com.keepit.controllers.admin.AdminRoverController.getAllUrlRules()
POST          /admin/rover/urlRules                                                  @com.keepit.controllers.admin.AdminRoverController.saveUrlRules()
POST          /admin/rover/urlRules/create                                           @com.keepit.controllers.admin.AdminRoverController.createUrlRule

GET           /admin/goodies/testRegex                                               @com.keepit.controllers.admin.AdminGoodiesController.testRegex
GET           /admin/goodies/testRegexFilled                                         @com.keepit.controllers.admin.AdminGoodiesController.testRegexFilled(regex: String, test: Option[String])
POST          /admin/goodies/performRegexTest                                        @com.keepit.controllers.admin.AdminGoodiesController.performRegexTest
GET           /admin/goodies/externalIdById                                          @com.keepit.controllers.admin.AdminGoodiesController.externalIdById(name: String, id: Long)
GET           /admin/goodies/externalIdsByPublicId                                   @com.keepit.controllers.admin.AdminGoodiesController.externalIdByPublicId(name: String, id: String)

POST          /admin/payments/grantExtraCredit             @com.keepit.controllers.admin.AdminPaymentsController.grantExtraCredit(orgId: Id[Organization])
POST          /admin/payments/processOrgNow                @com.keepit.controllers.admin.AdminPaymentsController.processOrgNow(orgId: Id[Organization])
POST          /admin/payments/changePlanForOrg             @com.keepit.controllers.admin.AdminPaymentsController.changePlanForOrg(orgId: Id[Organization])
GET           /admin/payments/addCreditCard                @com.keepit.controllers.admin.AdminPaymentsController.addCreditCardView(orgId: Id[Organization])
POST          /admin/payments/addCreditCard                @com.keepit.controllers.admin.AdminPaymentsController.addCreditCard(orgId: Id[Organization])
GET           /admin/payments/getAccountActivity           @com.keepit.controllers.admin.AdminPaymentsController.getAccountActivity(orgId: Id[Organization], page: Int)
GET           /admin/payments/refundCharge                 @com.keepit.controllers.admin.AdminPaymentsController.refundCharge(eventId: Id[com.keepit.payments.AccountEvent])
POST          /admin/payments/unfreezeAccount              @com.keepit.controllers.admin.AdminPaymentsController.unfreezeAccount(orgId: Id[Organization])

GET           /admin/payments/checkIntegrity               @com.keepit.controllers.admin.AdminPaymentsController.checkIntegrity(orgId: Id[Organization], doIt: Boolean ?= false)
GET           /admin/payments/resetAccount                 @com.keepit.controllers.admin.AdminPaymentsController.resetAccount(orgId: Id[Organization], doIt: Boolean ?= false)
GET           /admin/payments/resetAllAccounts             @com.keepit.controllers.admin.AdminPaymentsController.resetAllAccounts(doIt: Boolean ?= false)
GET           /admin/payments/dashboard  @com.keepit.controllers.admin.AdminPaymentsController.paymentsDashboard
GET           /admin/payments/activity   @com.keepit.controllers.admin.AdminPaymentsController.activityOverview(page: Int ?= 0, kind: Option[String] ?= None)
POST          /admin/payments/createCode @com.keepit.controllers.admin.AdminPaymentsController.createCode()


##########################################
# Common Healthcheck / service routes
##########################################
# Using a get so we can invoke from browser and have it take care of the auth part
GET     /admin/server               @com.keepit.controllers.admin.AdminHealthController.serviceView()
GET     /admin/benchmark            @com.keepit.controllers.admin.AdminBenchmarkController.benchmarks()
GET     /admin/healthcheck/error    @com.keepit.controllers.admin.AdminHealthController.causeError()
GET     /admin/healthcheck/reportDeployment    @com.keepit.controllers.admin.AdminHealthController.reportDeployment()
GET     /admin/healthcheck/causeAirbrakeError @com.keepit.controllers.admin.AdminHealthController.causeAirbrakeError(message: String ?= "[No Worry] Fake Airbrake Exception triggered from admin")
GET     /admin/healthcheck/emailErrors         @com.keepit.controllers.admin.AdminHealthController.reportErrors()
GET     /admin/healthcheck/errors              @com.keepit.controllers.admin.AdminHealthController.getErrors()
GET     /admin/healthcheck/resetErrorCount     @com.keepit.controllers.admin.AdminHealthController.resetErrorCount()

##########################################
#INTERNAL ROUTES/Shoebox
##########################################

GET     /internal/shoebox/auth/getUserIdentity                         @com.keepit.controllers.internal.ShoeboxController.getUserIdentity(providerId: String, id: String)
GET     /internal/shoebox/auth/getUserIdentityByUserId                 @com.keepit.controllers.internal.ShoeboxController.getUserIdentityByUserId(userId: Id[User])
GET     /internal/shoebox/database/getNormalizedURI   @com.keepit.controllers.internal.ShoeboxController.getNormalizedURI(id: Id[NormalizedURI])
POST    /internal/shoebox/database/getNormalizedURIByURL               @com.keepit.controllers.internal.ShoeboxController.getNormalizedURIByURL()
POST    /internal/shoebox/database/getNormalizedUriByUrlOrPrenormalize @com.keepit.controllers.internal.ShoeboxController.getNormalizedUriByUrlOrPrenormalize()
POST    /internal/shoebox/database/internNormalizedURI                 @com.keepit.controllers.internal.ShoeboxController.internNormalizedURI()
GET     /internal/shoebox/database/getUsers                            @com.keepit.controllers.internal.ShoeboxController.getUsers(ids: String)
POST    /internal/shoebox/database/userIdsByExternalIds                @com.keepit.controllers.internal.ShoeboxController.getUserIdsByExternalIds()
POST    /internal/shoebox/database/getBasicUsers                       @com.keepit.controllers.internal.ShoeboxController.getBasicUsers()
POST    /internal/shoebox/database/getEmailAddressesForUsers           @com.keepit.controllers.internal.ShoeboxController.getEmailAddressesForUsers()
POST    /internal/shoebox/database/getEmailAddressForUsers             @com.keepit.controllers.internal.ShoeboxController.getEmailAddressForUsers()
GET     /internal/shoebox/database/getUserOpt                          @com.keepit.controllers.internal.ShoeboxController.getUserOpt(id: ExternalId[User])
GET     /internal/shoebox/database/getUserExperiments                  @com.keepit.controllers.internal.ShoeboxController.getUserExperiments(id: Id[User])
POST    /internal/shoebox/database/getExperimentsByUserIds             @com.keepit.controllers.internal.ShoeboxController.getExperimentsByUserIds()
GET     /internal/shoebox/database/getExperimentGenerators             @com.keepit.controllers.internal.ShoeboxController.getExperimentGenerators()
GET     /internal/shoebox/database/getNormalizedUriUpdates             @com.keepit.controllers.internal.ShoeboxDataPipeController.getNormalizedUriUpdates(lowSeq: SequenceNumber[ChangedURI], highSeq: SequenceNumber[ChangedURI])

GET     /internal/shoebox/database/getConnectedUsers  @com.keepit.controllers.internal.ShoeboxController.getConnectedUsers(userId: Id[User])
GET     /internal/shoebox/database/changedBookmark    @com.keepit.controllers.internal.ShoeboxDataPipeController.getBookmarksChanged(seqNum: SequenceNumber[Keep], fetchSize: Int)
GET     /internal/shoebox/database/bookmarkByUriUser  @com.keepit.controllers.internal.ShoeboxController.getBookmarkByUriAndUser(uriId: Id[NormalizedURI], userId: Id[User])
POST    /internal/shoebox/database/sendMail           @com.keepit.controllers.internal.ShoeboxController.sendMail
POST    /internal/shoebox/database/processAndSendMail @com.keepit.controllers.internal.ShoeboxController.processAndSendMail
GET     /internal/shoebox/database/getPhrasesChanged  @com.keepit.controllers.internal.ShoeboxDataPipeController.getPhrasesChanged(seqNum: SequenceNumber[Phrase], fetchSize: Int)
GET     /internal/shoebox/database/getIndexableUris   @com.keepit.controllers.internal.ShoeboxDataPipeController.getIndexableUris(seqNum: SequenceNumber[NormalizedURI], fetchSize: Int)
GET     /internal/shoebox/database/getIndexableUrisWithContent     @com.keepit.controllers.internal.ShoeboxDataPipeController.getIndexableUrisWithContent(seqNum: SequenceNumber[NormalizedURI], fetchSize: Int)
GET     /internal/shoebox/database/getHighestUriSeq   @com.keepit.controllers.internal.ShoeboxDataPipeController.getHighestUriSeq()
GET     /internal/shoebox/database/getUserIndexable   @com.keepit.controllers.internal.ShoeboxDataPipeController.getUserIndexable(seqNum: SequenceNumber[User], fetchSize: Int)
GET     /internal/shoebox/database/getUserConnectionsChanged       @com.keepit.controllers.internal.ShoeboxDataPipeController.getUserConnectionsChanged(seqNum: SequenceNumber[UserConnection], fetchSize: Int)
GET     /internal/shoebox/database/getSearchFriendsChanged         @com.keepit.controllers.internal.ShoeboxDataPipeController.getSearchFriendsChanged(seqNum: SequenceNumber[SearchFriend], fetchSize: Int)
GET     /internal/shoebox/database/getIndexableSocialConnections   @com.keepit.controllers.internal.ShoeboxDataPipeController.getIndexableSocialConnections(seqNum: SequenceNumber[SocialConnection], fetchSize: Int)
GET     /internal/shoebox/database/getIndexableSocialUserInfos     @com.keepit.controllers.internal.ShoeboxDataPipeController.getIndexableSocialUserInfos(seqNum: SequenceNumber[SocialUserInfo], fetchSize: Int)
GET     /internal/shoebox/database/getEmailAccountUpdates          @com.keepit.controllers.internal.ShoeboxDataPipeController.getEmailAccountUpdates(seqNum: SequenceNumber[EmailAccountUpdate], fetchSize: Int)
GET     /internal/shoebox/database/getKeepsAndTagsChanged                  @com.keepit.controllers.internal.ShoeboxDataPipeController.getKeepsAndTagsChanged(seqNum: SequenceNumber[Keep], fetchSize: Int)
GET     /internal/shoebox/database/getLibrariesChanged                     @com.keepit.controllers.internal.ShoeboxDataPipeController.getLibrariesChanged(seqNum: SequenceNumber[Library], fetchSize: Int)
GET     /internal/shoebox/database/getDetailedLibrariesChanged             @com.keepit.controllers.internal.ShoeboxDataPipeController.getDetailedLibrariesChanged(seqNum: SequenceNumber[Library], fetchSize: Int)
GET     /internal/shoebox/database/getLibraryMembershipsChanged            @com.keepit.controllers.internal.ShoeboxDataPipeController.getLibraryMembershipsChanged(seqNum: SequenceNumber[LibraryMembership], fetchSize: Int)
GET     /internal/shoebox/database/newKeepsInLibraryForEmail               @com.keepit.controllers.internal.ShoeboxController.newKeepsInLibraryForEmail(userId: Id[User], max: Int)
GET     /internal/shoebox/database/dumpLibraryURIIds                       @com.keepit.controllers.internal.ShoeboxDataPipeController.dumpLibraryURIIds(libId: Id[Library])
GET     /internal/shoebox/database/getIngestableOrganizations              @com.keepit.controllers.internal.ShoeboxDataPipeController.getIngestableOrganizations(seqNum: SequenceNumber[Organization], fetchSize: Int)
GET     /internal/shoebox/database/getIngestableOrganizationMemberships                 @com.keepit.controllers.internal.ShoeboxDataPipeController.getIngestableOrganizationMemberships(seqNum: SequenceNumber[OrganizationMembership], fetchSize: Int)
GET     /internal/shoebox/database/getIngestableOrganizationMembershipCandidates        @com.keepit.controllers.internal.ShoeboxDataPipeController.getIngestableOrganizationMembershipCandidates(seqNum: SequenceNumber[OrganizationMembershipCandidate], fetchSize: Int)
GET     /internal/shoebox/database/getIngestableUserIpAddresses           @com.keepit.controllers.internal.ShoeboxDataPipeController.getIngestableUserIpAddresses(seqNum: SequenceNumber[UserIpAddress], fetchSize: Int)
POST     /internal/shoebox/database/internDomainsByDomainNames            @com.keepit.controllers.internal.ShoeboxDataPipeController.internDomainsByDomainNames()
GET     /internal/shoebox/database/getIngestableOrganizationDomainOwnerships            @com.keepit.controllers.internal.ShoeboxDataPipeController.getIngestableOrganizationDomainOwnerships(seqNum: SequenceNumber[OrganizationDomainOwnership], fetchSize: Int)

POST    /internal/shoebox/database/createDeepLink     @com.keepit.controllers.internal.ShoeboxDeepLinkController.createDeepLink()
POST    /internal/shoebox/database/getDeepUrl         @com.keepit.controllers.internal.ShoeboxDeepLinkController.getDeepUrl()

GET     /internal/shoebox/database/getActiveExperiments @com.keepit.controllers.internal.ShoeboxController.getActiveExperiments
GET     /internal/shoebox/database/getExperiments     @com.keepit.controllers.internal.ShoeboxController.getExperiments
GET     /internal/shoebox/database/getExperiment      @com.keepit.controllers.internal.ShoeboxController.getExperiment(id: Id[SearchConfigExperiment])
POST    /internal/shoebox/database/saveExperiment     @com.keepit.controllers.internal.ShoeboxController.saveExperiment
GET     /internal/shoebox/database/socialUserInfosByUserId @com.keepit.controllers.internal.ShoeboxController.getSocialUserInfosByUserId(id: Id[User])
GET     /internal/shoebox/database/getPrimaryOrg      @com.keepit.controllers.internal.ShoeboxController.getPrimaryOrg(id: Id[User])
GET     /internal/shoebox/database/sessionViewByExternalId @com.keepit.controllers.internal.ShoeboxController.getSessionViewByExternalId(sessionId: UserSessionExternalId)
GET     /internal/shoebox/database/searchFriends      @com.keepit.controllers.internal.ShoeboxController.searchFriends(userId: Id[User])
GET     /internal/shoebox/database/unfriends          @com.keepit.controllers.internal.ShoeboxController.getUnfriends(userId: Id[User])

GET     /internal/shoebox/database/getOrganizationMembers          @com.keepit.controllers.internal.ShoeboxController.getOrganizationMembers(orgId: Id[Organization])
GET     /internal/shoebox/database/getOrganizationInviteViews      @com.keepit.controllers.internal.ShoeboxController.getOrganizationInviteViews(orgId: Id[Organization])
GET     /internal/shoebox/database/hasOrganizationMembership       @com.keepit.controllers.internal.ShoeboxController.hasOrganizationMembership(orgId: Id[Organization], userId: Id[User])
POST    /internal/shoebox/database/getOrganizationsForUsers        @com.keepit.controllers.internal.ShoeboxController.getOrganizationsForUsers()
GET     /internal/shoebox/database/getOrgTrackingValues            @com.keepit.controllers.internal.ShoeboxController.getOrgTrackingValues(orgId: Id[Organization])
POST    /internal/shoebox/database/getBasicOrganizationsByIds            @com.keepit.controllers.internal.ShoeboxController.getBasicOrganizationsByIds()
GET     /internal/shoebox/database/getOrganizationUserRelationship       @com.keepit.controllers.internal.ShoeboxController.getOrganizationUserRelationship(orgId: Id[Organization], userId: Id[User])
POST    /internal/shoebox/database/getUserPermissionsByOrgId       @com.keepit.controllers.internal.ShoeboxController.getUserPermissionsByOrgId()

POST    /internal/shoebox/logEvent                    @com.keepit.controllers.ext.ExtEventController.logEvent()

POST    /internal/geckoboard/refresh                  @com.keepit.reports.GeckoboardReporterController.refreshAll()

GET     /internal/shoebox/database/getFriendRequestRecipientIdBySender         @com.keepit.controllers.internal.ShoeboxController.getFriendRequestsRecipientIdBySender(senderId: Id[User])
GET     /internal/shoebox/database/userValue                                   @com.keepit.controllers.internal.ShoeboxController.getUserValue(userId: Id[User], key: UserValueName)
POST    /internal/shoebox/database/userValue                                   @com.keepit.controllers.internal.ShoeboxController.setUserValue(userId: Id[User], key: UserValueName)
GET     /internal/shoebox/database/userSegment                                 @com.keepit.controllers.internal.ShoeboxController.getUserSegment(userId: Id[User])
GET     /internal/shoebox/database/extensionVersion                            @com.keepit.controllers.internal.ShoeboxController.getExtensionVersion(installationId: ExternalId[KifiInstallation])
POST    /internal/shoebox/database/triggerRawKeepImport                        @com.keepit.controllers.internal.ShoeboxController.triggerRawKeepImport()
POST    /internal/shoebox/database/triggerSocialGraphFetch                     @com.keepit.controllers.internal.ShoeboxController.triggerSocialGraphFetch(id: Id[SocialUserInfo])
GET     /internal/shoebox/database/getLapsedUsersForDelighted                  @com.keepit.controllers.internal.ShoeboxController.getLapsedUsersForDelighted(maxCount: Int, skipCount: Int, after: DateTime, before: Option[DateTime] ?= None)

GET      /internal/shoebox/emailSenderTest                 @com.keepit.controllers.internal.EmailTestController.testEmailSender(name: String)

GET      /internal/shoebox/database/getAllFakeUsers                             @com.keepit.controllers.internal.ShoeboxController.getAllFakeUsers()
GET      /internal/shoebox/database/getInvitations                              @com.keepit.controllers.internal.ShoeboxController.getInvitations(senderId: Id[User])
GET      /internal/shoebox/database/getSocialConnections                        @com.keepit.controllers.internal.ShoeboxController.getSocialConnections(userId: Id[User])

GET      /internal/shoebox/image/getUserImageUrl                   @com.keepit.controllers.internal.ShoeboxController.getUserImageUrl(id: Id[User], width: Int)
POST     /internal/shoebox/database/canViewLibrary                 @com.keepit.controllers.internal.ShoeboxController.canViewLibrary()
POST     /internal/shoebox/database/getPersonalKeeps               @com.keepit.controllers.internal.ShoeboxController.getPersonalKeeps(userId: Id[User])
POST     /internal/shoebox/database/getBasicKeepsByIds             @com.keepit.controllers.internal.ShoeboxController.getBasicKeepsByIds()
POST     /internal/shoebox/database/getCrossServiceKeepsByIds      @com.keepit.controllers.internal.ShoeboxController.getCrossServiceKeepsByIds()
POST     /internal/shoebox/database/getDiscussionKeepsByIds        @com.keepit.controllers.internal.ShoeboxController.getDiscussionKeepsByIds()
POST     /internal/shoebox/database/getBasicLibraryDetails         @com.keepit.controllers.internal.ShoeboxController.getBasicLibraryDetails()
POST     /internal/shoebox/database/getLibraryCardInfos            @com.keepit.controllers.internal.ShoeboxController.getLibraryCardInfos()
POST     /internal/shoebox/database/getKeepCounts                  @com.keepit.controllers.internal.ShoeboxController.getKeepCounts()
POST     /internal/shoebox/database/getKeepImages                  @com.keepit.controllers.internal.ShoeboxController.getKeepImages()
GET      /internal/shoebox/database/getLibrariesWithWriteAccess    @com.keepit.controllers.internal.ShoeboxController.getLibrariesWithWriteAccess(userId: Id[User])
GET      /internal/shoebox/database/getLibraryMembershipView       @com.keepit.controllers.internal.ShoeboxController.getLibraryMembershipView(libraryId: Id[Library], userId: Id[User])
POST     /internal/shoebox/database/getIntegrationsBySlackChannel      @com.keepit.controllers.internal.ShoeboxController.getIntegrationsBySlackChannel()
POST     /internal/shoebox/database/getSourceAttributionForKeeps       @com.keepit.controllers.internal.ShoeboxController.getSourceAttributionForKeeps()

POST     /internal/shoebox/database/internKeep       @com.keepit.controllers.internal.ShoeboxController.internKeep()

GET      /internal/shoebox/email/getUnsubscribeUrlForEmail @com.keepit.controllers.website.EmailOptOutController.getUnsubscribeUrlForEmail(email: EmailAddress)

GET     /internal/shoebox/database/getUsersByExperiment     @com.keepit.controllers.internal.ShoeboxController.getUsersByExperiment(experiment: UserExperimentType)

POST    /internal/shoebox/user/addInteractions            @com.keepit.controllers.internal.ShoeboxController.addInteractions(userId: Id[User])

# Angular assets
GET     /dist/*file                com.keepit.controllers.website.AngularDistAssets.at(path = "/public/ng/dist", file)
GET     /img/*file                 com.keepit.controllers.website.AngularImgAssets.at(path = "/public/ng/img", file)

->  / commonService.Routes
->  / site.Routes

GET     /:handle/:slug/rss        @com.keepit.controllers.website.LibraryFeedController.libraryRSSFeed(handle: Handle, slug, authToken: Option[String] ?= None, count: Int ?= 20, offset: Int ?= 0)
GET     /:handle/:slug/atom       @com.keepit.controllers.website.LibraryFeedController.libraryAtomFeed(handle: Handle, slug, authToken: Option[String] ?= None, count: Int ?= 20, offset: Int ?= 0)
