# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           com.keepit.controllers.HomeController.home

GET     /bookmarks                  com.keepit.controllers.BookmarksController.bookmarksFirstPageView
GET     /bookmarks/page/:page       com.keepit.controllers.BookmarksController.bookmarksView(page: Int)

POST    /bookmarks/add              com.keepit.controllers.BookmarksController.addBookmarks
GET     /bookmarks/all              com.keepit.controllers.BookmarksController.all
GET     /bookmarks/edit             com.keepit.controllers.BookmarksController.edit(id: Id[Bookmark])
POST    /bookmarks/delete           com.keepit.controllers.BookmarksController.delete(id: Id[Bookmark])
GET     /bookmarks/check            com.keepit.controllers.BookmarksController.checkIfExists(externalId: ExternalId[User], uri: String)

#POST    /download/extension         com.keepit.controllers.BookmarksController.delete(id: Id[Bookmark])

GET     /users/keepurl              com.keepit.controllers.UserController.usersKeptUrl(url: String)

GET     /search                     com.keepit.controllers.SearchController.search(term: String, externalId: ExternalId[User])
GET     /search2                    com.keepit.controllers.SearchController.search2(term: String, externalId: ExternalId[User], maxHits:Int, lastUUID: Option[String], context: Option[String])

GET     /welcome                    com.keepit.controllers.AuthController.welcome
GET     /isLoggedIn                 com.keepit.controllers.AuthController.isLoggedIn

POST    /chat/:recipientId          com.keepit.controllers.ChatController.chat(recipientId: ExternalId[User])

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

##########################################
# Admin
##########################################

GET     /admin/scrape               com.keepit.controllers.admin.ScraperController.scrape
GET     /admin/scrape/:state        com.keepit.controllers.admin.ScraperController.scrapeByState(state: State[NormalizedURI])
GET     /admin/scraped/:uriId       com.keepit.controllers.admin.ScraperController.getScraped(uriId: Id[NormalizedURI])
GET     /admin/article/index        com.keepit.controllers.admin.ArticleIndexerController.index
GET     /admin/article/index/:state com.keepit.controllers.admin.ArticleIndexerController.indexByState(state: State[NormalizedURI])
GET     /admin/article/indexInfo    com.keepit.controllers.admin.ArticleIndexerController.indexInfo
GET     /admin/article/refreshSearcher com.keepit.controllers.admin.ArticleIndexerController.refreshSearcher
GET     /admin/uriGraph/load        com.keepit.controllers.admin.URIGraphController.load
GET     /admin/uriGraph/update/:userId com.keepit.controllers.admin.URIGraphController.update(userId: Id[User])
GET     /admin/users                com.keepit.controllers.UserController.usersView
GET     /admin/user                 com.keepit.controllers.UserController.userView(userId: Id[User])
GET     /admin/social_users         com.keepit.controllers.SocialUserController.socialUsersView
GET     /admin/social_user          com.keepit.controllers.SocialUserController.socialUserView(socialUserId: Id[SocialUserInfo])
GET     /admin/social_user/refresh  com.keepit.controllers.SocialUserController.refreshSocialInfo(socialUserInfoId: Id[SocialUserInfo])
GET     /admin/social_user/refresh_all com.keepit.controllers.UserController.refreshAllSocialInfo(userId: Id[User])
GET     /admin/social_user/reset    com.keepit.controllers.SocialUserController.resetSocialUser(socialUserId: Id[SocialUserInfo])


##########################################
# Secure social routes
##########################################

# Login page
GET     /login                      securesocial.controllers.LoginPage.login
GET     /logout                     securesocial.controllers.LoginPage.logout

# User Registration
GET     /signup                     securesocial.controllers.Registration.signUp
POST    /signup                     securesocial.controllers.Registration.handleSignUp

# Providers entry points
GET     /authenticate/:provider     securesocial.controllers.LoginPage.authenticate(provider)
POST    /authenticate/:provider     securesocial.controllers.LoginPage.authenticateByPost(provider)

