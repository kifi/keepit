# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

##########################################
# Website
##########################################

GET     /                           @com.keepit.controllers.website.HomeController.home
GET     /install                    @com.keepit.controllers.website.HomeController.install
GET     /getting-started            @com.keepit.controllers.website.HomeController.gettingStarted

GET     /invite                     @com.keepit.controllers.website.InviteController.invite
POST    /invite                     @com.keepit.controllers.website.InviteController.inviteConnection
GET     /invite/:id                 @com.keepit.controllers.website.InviteController.acceptInvite(id: ExternalId[Invitation])
GET     /invite/confirm/:id         @com.keepit.controllers.website.InviteController.confirmInvite(id: ExternalId[Invitation])
GET     /sign-up                    @com.keepit.controllers.website.OnboardingController.signup(inviteId: String ?= "")
GET     /sign-up/terms              @com.keepit.controllers.website.OnboardingController.tos
POST    /sign-up/terms              @com.keepit.controllers.website.OnboardingController.tosAccept

GET     /feedback                   @com.keepit.controllers.website.FeedbackController.feedback
GET     /feedback/form              @com.keepit.controllers.website.FeedbackController.feedbackForm

GET     /login                      securesocial.controllers.ProviderController.authenticate(provider = "facebook")
GET     /login/social               securesocial.controllers.LoginPage.login
GET     /logout                     securesocial.controllers.LoginPage.logout

# Relevant when we support traditional user signups:
GET     /register                   securesocial.controllers.Registration.signUp(token: String)
POST    /register                   securesocial.controllers.Registration.handleSignUp(token: String)

##########################################
# Web API
##########################################
GET     /r/:id                      @com.keepit.controllers.ext.ExtDeepLinkController.handle(id: String)

GET     /site/keeps/all             @com.keepit.controllers.website.BookmarksController.allKeeps(before: Option[String], after: Option[String], collection: Option[String], count: Int ?= Integer.MAX_VALUE)
GET     /site/collections/all       @com.keepit.controllers.website.BookmarksController.allCollections()
POST    /site/collections/create @com.keepit.controllers.website.BookmarksController.saveCollection(id = "")
POST    /site/collections/:id/update @com.keepit.controllers.website.BookmarksController.saveCollection(id: String)
POST    /site/collections/:id/delete @com.keepit.controllers.website.BookmarksController.deleteCollection(id: ExternalId[Collection])
POST    /site/collections/:id/removeKeeps @com.keepit.controllers.website.BookmarksController.removeKeepsFromCollection(id: ExternalId[Collection])
POST    /site/collections/:id/addKeeps @com.keepit.controllers.website.BookmarksController.keepToCollection(id: ExternalId[Collection], removeOthers: Boolean = false)
POST    /site/collections/:id/setKeeps @com.keepit.controllers.website.BookmarksController.keepToCollection(id: ExternalId[Collection], removeOthers: Boolean = true)
GET     /site/keeps/mutual/:id      @com.keepit.controllers.website.BookmarksController.mutualKeeps(id: ExternalId[User])
GET     /site/keeps/count           @com.keepit.controllers.website.BookmarksController.numKeeps()

GET     /site/user/me               @com.keepit.controllers.website.UserController.currentUser()
GET     /site/user/connections      @com.keepit.controllers.website.UserController.connections()
GET     /site/user/all-connections  @com.keepit.controllers.website.UserController.getAllConnections()
POST    /site/user/update-email     @com.keepit.controllers.website.UserController.updateEmail

# OAuth provider entry points (e.g. "facebook")
GET     /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)
POST    /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)

##########################################
# External Services API
##########################################
#todo(eishay): change routes and callback in sendgrid
POST    /admin/logging/emails       @com.keepit.controllers.admin.ElectronicMailLoggingController.doLog()
# todo(eishay): We should move the paths of the following two and update pingdom
GET     /admin/healthcheck/ping     @com.keepit.common.healthcheck.WebsiteHealthController.ping()
GET     /admin/healthcheck/isHealthy    @com.keepit.common.healthcheck.WebsiteHealthController.isHealthy()

##########################################
# Extension API
##########################################

POST    /bookmarks/add              @com.keepit.controllers.ext.ExtBookmarksController.addBookmarks
POST    /bookmarks/remove           @com.keepit.controllers.ext.ExtBookmarksController.remove()
POST    /bookmarks/private          @com.keepit.controllers.ext.ExtBookmarksController.updatePrivacy()
GET     /bookmarks/mutual/:id       @com.keepit.controllers.ext.ExtBookmarksController.getNumMutualKeeps(id: ExternalId[User])

POST    /comments/add               @com.keepit.controllers.ext.ExtCommentController.createComment()
POST    /comments/:id/remove        @com.keepit.controllers.ext.ExtCommentController.removeComment(id: ExternalId[Comment])
POST    /comments/follow            @com.keepit.controllers.ext.ExtCommentController.startFollowing()
POST    /comments/unfollow          @com.keepit.controllers.ext.ExtCommentController.stopFollowing()

POST    /comments                   @com.keepit.controllers.ext.ExtCommentController.postCommentAction()
POST    /messages                   @com.keepit.controllers.ext.ExtCommentController.sendMessageAction()
POST    /messages/:parentId         @com.keepit.controllers.ext.ExtCommentController.sendMessageReplyAction(parentId: ExternalId[Comment])

POST    /users/slider/suppress      @com.keepit.controllers.ext.ExtUserController.suppressSliderForSite

POST    /users/events               @com.keepit.controllers.ext.ExtEventController.logUserEvents
POST    /error/report               @com.keepit.controllers.ext.ExtErrorReportController.addErrorReport

# This should match the output format of S3ImageConfig#keyByExternalId
GET     /users/:id/pics/:size/0.jpg @com.keepit.controllers.assets.UserPictureController.get(size: Int, id: ExternalId[User])
POST    /users/pics/update      @com.keepit.controllers.assets.UserPictureController.update()

GET     /search                     @com.keepit.controllers.ext.ExtSearchController.search(q: String, f: Option[String], maxHits: Int, lastUUID: Option[String], context: Option[String], kifiVersion: Option[KifiVersion] ?= None, start: Option[String], end: Option[String], tz: Option[String], coll: Option[String])
GET     /search/chatter             @com.keepit.controllers.ext.ExtCommentController.getCounts(ids: String)

POST    /kifi/start                 @com.keepit.controllers.ext.ExtAuthController.start
GET     /whois                      @com.keepit.controllers.ext.ExtAuthController.whois
GET     /session/end                @com.keepit.controllers.ext.ExtAuthController.logOut

GET     /ext/ws                     @com.keepit.controllers.ext.ExtStreamController.ws()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

# Temporary hack for kifi.com site before we fully integrate it with Play!
GET     /site/                      @com.keepit.controllers.website.HomeController.kifiSite(path = "index.html")
GET     /site/*path                 @com.keepit.controllers.website.HomeController.kifiSite(path: String)

##########################################
# Admin
##########################################

GET     /admin                      @com.keepit.controllers.admin.AdminDashboardController.index
GET     /admin/graphs/users.json    @com.keepit.controllers.admin.AdminDashboardController.usersByDate
GET     /admin/graphs/bookmarks.json    @com.keepit.controllers.admin.AdminDashboardController.bookmarksByDate

GET     /admin/events               @com.keepit.controllers.admin.AdminEventController.reportList
POST    /admin/events/buildReport   @com.keepit.controllers.admin.AdminEventController.buildReport
GET     /admin/events/report        @com.keepit.controllers.admin.AdminEventController.getReport(reportName: String)
GET     /admin/events/activityData  @com.keepit.controllers.admin.AdminEventController.activityDataAsCsv

GET     /admin/realtime/event       @com.keepit.controllers.admin.AdminEventController.eventViewer
GET     /admin/realtime/event/stream      @com.keepit.controllers.admin.AdminEventController.eventStream
GET     /admin/realtime/activity    @com.keepit.controllers.admin.AdminEventController.activityViewer
GET     /admin/realtime/activity/stream   @com.keepit.controllers.admin.AdminEventController.activityStream

GET     /admin/bookmarks/page/:page @com.keepit.controllers.admin.AdminBookmarksController.bookmarksView(page: Int)
GET     /admin/bookmarks/edit       @com.keepit.controllers.admin.AdminBookmarksController.edit(id: Id[Bookmark])
POST    /admin/bookmarks/rescrape   @com.keepit.controllers.admin.AdminBookmarksController.rescrape
POST    /admin/bookmarks/update     @com.keepit.controllers.admin.AdminBookmarksController.updateBookmarks
POST    /admin/bookmarks/delete     @com.keepit.controllers.admin.AdminBookmarksController.delete(id: Id[Bookmark])

GET     /admin/scrape               @com.keepit.controllers.admin.ScraperController.scrape
GET     /admin/scraped/:uriId       @com.keepit.controllers.admin.ScraperController.getScraped(uriId: Id[NormalizedURI])

GET     /admin/data/integrity       @com.keepit.controllers.admin.ScraperController.documentIntegrity(page: Int ?= 0, size: Int ?= 50)
GET     /admin/data/dupe            @com.keepit.controllers.admin.ScraperController.duplicateDocumentDetection
GET     /admin/data/orphan          @com.keepit.controllers.admin.ScraperController.orphanCleanup
GET     /admin/data/unscrapable     @com.keepit.controllers.admin.ScraperController.getUnscrapable()
POST    /admin/data/previewUnscrapable     @com.keepit.controllers.admin.ScraperController.previewUnscrapable()
POST    /admin/data/unscrapable     @com.keepit.controllers.admin.ScraperController.createUnscrapable()
GET     /admin/data/renormalize     @com.keepit.controllers.admin.UrlController.renormalize(readOnly: Boolean ?= true, domain: Option[String] ?= None)
POST    /admin/data/handleDuplicate @com.keepit.controllers.admin.ScraperController.handleDuplicate
POST    /admin/data/handleDuplicates @com.keepit.controllers.admin.ScraperController.handleDuplicates

GET     /admin/article/index        @com.keepit.controllers.admin.AdminArticleIndexerController.index
GET     /admin/article/reindex      @com.keepit.controllers.admin.AdminArticleIndexerController.reindex
GET     /admin/article/sequenceNumber @com.keepit.controllers.admin.AdminArticleIndexerController.getSequenceNumber
GET     /admin/article/index/:state @com.keepit.controllers.admin.AdminArticleIndexerController.indexByState(state: State[NormalizedURI])
GET     /admin/article/indexInfo    @com.keepit.controllers.admin.AdminArticleIndexerController.indexInfo
GET     /admin/article/refreshSearcher @com.keepit.controllers.admin.AdminArticleIndexerController.refreshSearcher
GET     /admin/article/dumpDoc/:uriId  @com.keepit.controllers.admin.AdminArticleIndexerController.dumpLuceneDocument(uriId: Id[NormalizedURI])

POST     /admin/search/spell/buildDict         @com.keepit.controllers.admin.AdminSpellCorrectorController.buildDictionary
GET     /admin/search/spell         @com.keepit.controllers.admin.AdminSpellCorrectorController.spellController
GET     /admin/search/spell/test-correct  @com.keepit.controllers.admin.AdminSpellCorrectorController.correctSpelling(query: String)
GET     /admin/search/scrape        @com.keepit.controllers.admin.ScraperController.searchScraper
GET     /admin/search/scrape/regex  @com.keepit.controllers.admin.ScraperController.rescrapeByRegex(urlRegex: String ?= "", withinHours: Int ?= 8)
GET     /admin/search/performance/viewPerformance @com.keepit.controllers.admin.AdminSearchPerformanceController.viewSearchPerformance

GET     /admin/uriGraph/reindex     @com.keepit.controllers.admin.AdminURIGraphController.reindex
GET     /admin/uriGraph/load        @com.keepit.controllers.admin.AdminURIGraphController.load
GET     /admin/uriGraph/update/:userId @com.keepit.controllers.admin.AdminURIGraphController.update(userId: Id[User])
GET     /admin/uriGraph/dumpDoc/:userId  @com.keepit.controllers.admin.AdminURIGraphController.dumpLuceneDocument(userId: Id[User])

GET     /admin/users                @com.keepit.controllers.admin.AdminUserController.usersView
GET     /admin/user/:id             @com.keepit.controllers.admin.AdminUserController.userView(id: Id[User])
POST    /admin/user/:id             @com.keepit.controllers.admin.AdminUserController.userView(id: Id[User])
GET     /admin/user/:id/more-info   @com.keepit.controllers.admin.AdminUserController.moreUserInfoView(id: Id[User])
POST    /admin/user/:id/experiment/:exp  @com.keepit.controllers.admin.AdminUserController.addExperiment(id: Id[User], exp: String)
POST    /admin/user/bookmarks/:id/collections @com.keepit.controllers.admin.AdminUserController.updateCollectionsForBookmark(id: Id[Bookmark])
DELETE  /admin/user/:id/experiment/:exp  @com.keepit.controllers.admin.AdminUserController.removeExperiment(id: Id[User], exp: String)
POST    /admin/user/:id/state/:state  @com.keepit.controllers.admin.AdminUserController.changeState(id: Id[User], state: String)
POST    /admin/user/:id/update      @com.keepit.controllers.admin.AdminUserController.updateUser(id: Id[User])
POST    /admin/user/:id/setInvitesCount      @com.keepit.controllers.admin.AdminUserController.setInvitesCount(id: Id[User])
GET     /admin/user/:id/social_users/refresh @com.keepit.controllers.admin.AdminUserController.refreshAllSocialInfo(id: Id[User])
POST    /admin/user/:id/impersonate @com.keepit.controllers.admin.AdminAuthController.impersonate(id: Id[User])
POST    /admin/unimpersonate        @com.keepit.controllers.admin.AdminAuthController.unimpersonate()
POST    /admin/users/sendNotification @com.keepit.controllers.admin.AdminUserController.sendNotificationToAllUsers()

GET     /admin/social_users/:page   @com.keepit.controllers.admin.AdminSocialUserController.socialUsersView(page: Int)
GET     /admin/social_user/:id      @com.keepit.controllers.admin.AdminSocialUserController.socialUserView(id: Id[SocialUserInfo])
GET     /admin/social_user/:id/refresh @com.keepit.controllers.admin.AdminSocialUserController.refreshSocialInfo(id: Id[SocialUserInfo])
GET     /admin/social_user/:id/reset @com.keepit.controllers.admin.AdminSocialUserController.resetSocialUser(id: Id[SocialUserInfo])

GET     /admin/server               @com.keepit.common.healthcheck.AdminHealthController.serviceView()
GET     /admin/benchmark            @com.keepit.common.healthcheck.AdminBenchmarkController.benchmarks()
GET     /admin/ec2-instance         @com.keepit.controllers.admin.AmazonInstanceController.instanceInfo()

GET     /admin/emails/comment       @com.keepit.controllers.admin.AdminEmailPreviewController.newComment
GET     /admin/emails/message       @com.keepit.controllers.admin.AdminEmailPreviewController.newMessage
GET     /admin/emails/message-reply @com.keepit.controllers.admin.AdminEmailPreviewController.newMessageReply

GET     /admin/electronicMails       @com.keepit.controllers.admin.ElectronicMailController.electronicMailsViewFirstPage
GET     /admin/electronicMails/:page @com.keepit.controllers.admin.ElectronicMailController.electronicMailsView(page: Int)

GET     /admin/follows              @com.keepit.controllers.admin.AdminCommentController.followsView
GET     /admin/comments             @com.keepit.controllers.admin.AdminCommentController.commentsViewFirstPage
GET     /admin/comments/:page       @com.keepit.controllers.admin.AdminCommentController.commentsView(page: Int)
GET     /admin/messages             @com.keepit.controllers.admin.AdminCommentController.messagesViewFirstPage
GET     /admin/messages/:page       @com.keepit.controllers.admin.AdminCommentController.messagesView(page: Int)
POST    /admin/notify/rebuild       @com.keepit.controllers.admin.AdminCommentController.recreateNotificationDetails(safeMode: Boolean ?= true)

GET     /admin/searchConfig/:id     @com.keepit.controllers.admin.AdminSearchConfigController.showUserConfig(id: Id[User])
POST    /admin/searchConfig/:id/set   @com.keepit.controllers.admin.AdminSearchConfigController.setUserConfig(id: Id[User])
GET     /admin/searchConfig/:id/reset @com.keepit.controllers.admin.AdminSearchConfigController.resetUserConfig(id: Id[User])

GET     /admin/searchExperiments    @com.keepit.controllers.admin.AdminSearchConfigController.getExperiments
POST    /admin/searchExperiments    @com.keepit.controllers.admin.AdminSearchConfigController.addNewExperiment
POST    /admin/searchExperiments/delete    @com.keepit.controllers.admin.AdminSearchConfigController.deleteExperiment
POST    /admin/searchExperiments/update    @com.keepit.controllers.admin.AdminSearchConfigController.updateExperiment
GET     /admin/searchExperiments/kvg/:id   @com.keepit.controllers.admin.AdminSearchConfigController.getKifiVsGoogle(id: Id[SearchConfigExperiment])
GET     /admin/searchExperiments/kifiHadResults/:id   @com.keepit.controllers.admin.AdminSearchConfigController.getKifiHadResults(id: Id[SearchConfigExperiment])

GET     /admin/explainResult        @com.keepit.controllers.admin.AdminSearchController.explain(query: String, uriId: Id[NormalizedURI])
GET     /admin/search/results/:id   @com.keepit.controllers.admin.AdminSearchController.articleSearchResult(id: ExternalId[ArticleSearchResultRef])

GET     /admin/slider/rules         @com.keepit.controllers.admin.SliderAdminController.getRules
POST    /admin/slider/rules         @com.keepit.controllers.admin.SliderAdminController.saveRules
GET     /admin/slider/patterns      @com.keepit.controllers.admin.SliderAdminController.getPatterns
POST    /admin/slider/patterns      @com.keepit.controllers.admin.SliderAdminController.savePatterns
GET     /admin/slider/domainTags    @com.keepit.controllers.admin.SliderAdminController.getDomainTags
POST    /admin/slider/domainTags    @com.keepit.controllers.admin.SliderAdminController.saveDomainTags
GET     /admin/slider/domains       @com.keepit.controllers.admin.SliderAdminController.getDomainOverrides
GET     /admin/slider/classifications @com.keepit.controllers.admin.SliderAdminController.getClassifications(domain: Option[String])
POST    /admin/slider/domains       @com.keepit.controllers.admin.SliderAdminController.saveDomainOverrides
POST    /admin/slider/domains/fetch @com.keepit.controllers.admin.SliderAdminController.refetchClassifications
GET     /admin/slider/importEvents  @com.keepit.controllers.admin.SliderAdminController.getImportEvents
GET     /admin/slider/version       @com.keepit.controllers.admin.SliderAdminController.getVersionForm
POST    /admin/slider/version       @com.keepit.controllers.admin.SliderAdminController.broadcastLatestVersion(ver: String)

GET     /admin/phrases              @com.keepit.controllers.admin.PhraseController.displayPhrases(page: Int ?= 0)
POST    /admin/phrases/add          @com.keepit.controllers.admin.PhraseController.addPhrase
POST    /admin/phrases/refresh      @com.keepit.controllers.admin.PhraseController.refreshPhrases
POST    /admin/phrases/save         @com.keepit.controllers.admin.PhraseController.savePhrases

GET     /admin/invites              @com.keepit.controllers.admin.AdminInvitationController.displayInvitations(page: Int ?= 0, show: String ?= "all")
POST    /admin/invites/accept       @com.keepit.controllers.admin.AdminInvitationController.acceptUser(id: Id[SocialUserInfo])
POST    /admin/invites/reject       @com.keepit.controllers.admin.AdminInvitationController.rejectUser(id: Id[SocialUserInfo])


# Using a get so we can invoke from browser and have it take care of the auth part
GET     /admin/healthcheck/error    @com.keepit.common.healthcheck.AdminHealthController.causeError()
GET     /admin/healthcheck/emailErrors    @com.keepit.common.healthcheck.AdminHealthController.reportErrors()
GET     /admin/healthcheck/errors   @com.keepit.common.healthcheck.AdminHealthController.getErrors()
GET     /admin/healthcheck/resetErrorCount    @com.keepit.common.healthcheck.AdminHealthController.resetErrorCount()

GET     /admin/labs/friendMap       @com.keepit.controllers.admin.AdminSearchLabsController.friendMap(q: Option[String] ?= None, minKeeps: Option[Int] ?= None)
GET     /admin/labs/friendMap.json  @com.keepit.controllers.admin.AdminSearchLabsController.friendMapJson(q: Option[String] ?= None, minKeeps: Option[Int] ?= None)

##########################################
#INTERNAL ROUTES/Shoebox
##########################################

GET     /internal/shoebox/database/getNormalizedURI   @com.keepit.controllers.shoebox.ShoeboxController.getNormalizedURI(id: Long)
GET     /internal/shoebox/database/getNormalizedURIs  @com.keepit.controllers.shoebox.ShoeboxController.getNormalizedURIs(ids: String)
GET     /internal/shoebox/database/getUsers           @com.keepit.controllers.shoebox.ShoeboxController.getUsers(ids: String)
GET     /internal/shoebox/database/userIdsByExternalIds @com.keepit.controllers.shoebox.ShoeboxController.getUserIdsByExternalIds(ids: String)
GET     /internal/shoebox/database/collectionIdsByExternalIds @com.keepit.controllers.shoebox.ShoeboxController.getCollectionIdsByExternalIds(ids: String)
GET     /internal/shoebox/database/getUserOpt         @com.keepit.controllers.shoebox.ShoeboxController.getUserOpt(id: ExternalId[User])
GET     /internal/shoebox/database/getUserExperiments           @com.keepit.controllers.shoebox.ShoeboxController.getUserExperiments(id: Id[User])

GET     /internal/shoebox/database/getConnectedUsers  @com.keepit.controllers.shoebox.ShoeboxController.getConnectedUsers(userId: Id[User])
GET     /internal/shoebox/tracker/browsingHistory     @com.keepit.controllers.shoebox.ShoeboxController.getBrowsingHistoryFilter(userId: Id[User])
GET     /internal/shoebox/tracker/clickHistory        @com.keepit.controllers.shoebox.ShoeboxController.getClickHistoryFilter(userId: Id[User])
GET     /internal/shoebox/database/bookmark           @com.keepit.controllers.shoebox.ShoeboxController.getBookmarks(userId: Id[User])
GET     /internal/shoebox/database/bookmarkByUriUser  @com.keepit.controllers.shoebox.ShoeboxController.getBookmarkByUriAndUser(uriId: Id[NormalizedURI], userId: Id[User])
GET     /internal/shoebox/database/changedUser        @com.keepit.controllers.shoebox.ShoeboxController.getUsersChanged(seqNum: Long)
POST    /internal/shoebox/persistServerSearchEvent    @com.keepit.controllers.shoebox.ShoeboxController.persistServerSearchEvent
POST    /internal/shoebox/database/sendMail           @com.keepit.controllers.shoebox.ShoeboxController.sendMail
GET     /internal/shoebox/database/getPhrasesByPage   @com.keepit.controllers.shoebox.ShoeboxController.getPhrasesByPage(page: Int, size: Int)
GET     /internal/shoebox/database/getCollectionsChanged @com.keepit.controllers.shoebox.ShoeboxController.getCollectionsChanged(seqNum: Long)
GET     /internal/shoebox/database/getBookmarksInCollection @com.keepit.controllers.shoebox.ShoeboxController.getBookmarksInCollection(collectionId: Id[Collection])
GET     /internal/shoebox/database/getCollectionsByUser @com.keepit.controllers.shoebox.ShoeboxController.getCollectionsByUser(userId: Id[User])
GET     /internal/shoebox/database/getIndexable       @com.keepit.controllers.shoebox.ShoeboxController.getIndexable(seqNum: Long, fetchSize: Int)
GET     /internal/shoebox/database/personalSearchInfo @com.keepit.controllers.shoebox.ShoeboxController.getPersonalSearchInfo(userId: Id[User], allUsers: String, formattedHits: String)

GET     /internal/shoebox/database/getActiveExperiments @com.keepit.controllers.shoebox.ShoeboxController.getActiveExperiments
GET     /internal/shoebox/database/getExperiments     @com.keepit.controllers.shoebox.ShoeboxController.getExperiments
GET     /internal/shoebox/database/getExperiment      @com.keepit.controllers.shoebox.ShoeboxController.getExperiment(id: Id[SearchConfigExperiment])
POST    /internal/shoebox/database/saveExperiment     @com.keepit.controllers.shoebox.ShoeboxController.saveExperiment
GET     /internal/shoebox/database/hasExperimenthas   @com.keepit.controllers.shoebox.ShoeboxController.hasExperiment(userId: Id[User], state: State[ExperimentType])
POST    /internal/shoebox/database/reportArticleSearchResult  @com.keepit.controllers.shoebox.ShoeboxController.reportArticleSearchResult
GET     /internal/shoebox/database/socialUserInfoByNetworkAndSocialId @com.keepit.controllers.shoebox.ShoeboxController.getSocialUserInfoByNetworkAndSocialId(id: String, networkType: String)
GET     /internal/shoebox/database/socialUserInfosByUserId @com.keepit.controllers.shoebox.ShoeboxController.getSocialUserInfosByUserId(id: Id[User])
GET     /internal/shoebox/database/sessionByExternalId @com.keepit.controllers.shoebox.ShoeboxController.getSessionByExternalId(sessionId: ExternalId[UserSession])

# INTERNAL ROUTES/Search
POST    /internal/search/events/resultClicked @com.keepit.controllers.search.SearchEventController.logResultClicked()

GET     /internal/search/uriGraph/info         @com.keepit.controllers.search.URIGraphController.indexInfo()
GET     /internal/search/uriGraph/sharingUserInfo @com.keepit.controllers.search.URIGraphController.sharingUserInfo(userId: Id[User], uriIds: String)
POST    /internal/search/uriGraph/update       @com.keepit.controllers.search.URIGraphController.updateURIGraph()
POST    /internal/search/uriGraph/reindex      @com.keepit.controllers.search.URIGraphController.reindex()
POST    /internal/search/uriGraph/dumpDoc/:id  @com.keepit.controllers.search.URIGraphController.dumpLuceneDocument(id: Id[User])

GET     /internal/search/index/info            @com.keepit.controllers.search.ArticleIndexerController.indexInfo()
POST    /internal/search/index/update          @com.keepit.controllers.search.ArticleIndexerController.index()
POST    /internal/search/index/reindex         @com.keepit.controllers.search.ArticleIndexerController.reindex()
GET     /internal/search/index/sequenceNumber  @com.keepit.controllers.search.ArticleIndexerController.getSequenceNumber()
POST    /internal/search/index/refreshSearcher @com.keepit.controllers.search.ArticleIndexerController.refreshSearcher()
POST    /internal/search/index/refreshPhrases  @com.keepit.controllers.search.ArticleIndexerController.refreshPhrases()
POST    /internal/search/index/dumpDoc/:id     @com.keepit.controllers.search.ArticleIndexerController.dumpLuceneDocument(id: Id[NormalizedURI])

POST    /internal/search/search/keeps          @com.keepit.controllers.search.SearchController.searchKeeps(userId: Id[User], query: String)
GET     /internal/search/search/explainResult  @com.keepit.controllers.search.SearchController.explain(query: String, userId: Id[User], uriId: Id[NormalizedURI])
GET     /internal/search/search/causeError  @com.keepit.controllers.search.SearchController.causeError()

POST    /internal/search/spell/buildDict       @com.keepit.controllers.search.SpellCorrectorController.buildDictionary()
GET     /internal/search/spell/buildStatus     @com.keepit.controllers.search.SpellCorrectorController.getBuildStatus()
GET     /internal/search/spell/make-correction     @com.keepit.controllers.search.SpellCorrectorController.correctSpelling(query: String)

POST     /internal/search/getSearchStatistics     @com.keepit.controllers.search.SearchStatisticsController.getSearchStatistics

GET     /internal/search/searchConfig/:id        @com.keepit.controllers.search.SearchConfigController.showUserConfig(id: Id[User])
POST    /internal/search/searchConfig/:id/set    @com.keepit.controllers.search.SearchConfigController.setUserConfig(id: Id[User])
GET     /internal/search/searchConfig/:id/reset  @com.keepit.controllers.search.SearchConfigController.resetUserConfig(id: Id[User])
GET     /internal/search/defaultSearchConfig/defaultSearchConfig  @com.keepit.controllers.search.SearchConfigController.getSearchDefaultConfig

GET     /internal/search/search/friendMapJson  @com.keepit.controllers.search.SearchController.friendMapJson(userId: Id[User], query: Option[String] ?= None, minKeeps: Option[Int] ?= None)

# INTERNAL ROUTES/GLOBAL
GET     /internal/benchmark                   @com.keepit.common.healthcheck.CommonBenchmarkController.benchmarksResults()
GET     /internal/version                     @com.keepit.common.healthcheck.CommonBenchmarkController.version()
