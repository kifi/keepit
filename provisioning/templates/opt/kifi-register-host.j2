#!/usr/bin/env python
# {{ ansible_managed }}

import sys
import boto.ec2
import requests
import os
import traceback
from subprocess import call

def who_am_i():
  ec2 = boto.ec2.connect_to_region("{{ ec2.defaults.region }}",
          aws_access_key_id="{{ aws_access_key_id }}",
          aws_secret_access_key="{{ aws_secret_access_key }}")
  myID = requests.get("http://169.254.169.254/latest/meta-data/instance-id", timeout=1.0).text
  instance = ec2.get_only_instances([myID])[0]
  spotRequestId = instance.spot_instance_request_id
  if spotRequestId is not None:
    log('Spot request detected')
    spotRequest = ec2.get_all_spot_instance_requests([spotRequestId])[0]
    tags = spotRequest.tags
    for key, value in tags.items():
      if key not in instance.tags:
        instance.add_tag(key, value)
        log('Added spot tag %s=%s' % (key, value))
  return ec2.get_only_instances([myID])[0].tags

# set hostname to EC2 Name
def set_hostname(name):
  with open("/etc/hostname", "w") as f:
    f.write(name + "\n")
  update_code = call(['hostname', '-F', '/etc/hostname'])
  if update_code != 0: log('Error updating hostname')
  else: log('Updated hostname %s' % name)

# make sure EC2 Name is in the hosts file
def update_hosts(name):
  with open("/etc/hosts", "a+") as f:
    existing_name = f.read()
    if name not in existing_name:
      f.write("\n127.0.0.1 " + name + "\n")

# the following is also handled in ansible, it is duplicated here because we
# need instances to register themselves on boot if they are launched via AMI
le_account_key = "ab262b73-aff4-4fd9-b83c-8ff7b510f7f9"
def register_logentries(name, service):
  daemon_code = call(["apt-get", "install", "-q", "-y", "logentries"])
  if daemon_code != 0: log("Failed to install logentries %s" % name)
  else: log("Installed logentries %s" % name)

  if not os.path.isfile('/etc/le/config'):
    register_code = call(["le", "register", "--name", name,
      "--account-key", le_account_key, "--hostname", name])
    if register_code != 0: log("Failed to register logentries host %s" % name)
    else: log("Registered logentries host %s" % name)

  daemon_code = call(["apt-get", "install", "-q", "-y", "logentries-daemon"])
  if daemon_code != 0: log("Failed to install logentries-daemon %s" % name)
  else: log("Installed logentries-daemon %s" % name)

  appDir = '/home/fortytwo/run/%s/log/' % service
  le_follow(appDir + 'app.log')
  le_follow(appDir + service + '.out')
  restart_code = call(['service', 'logentries', 'restart'])
  if restart_code != 0: log("Error restarting logentries")
  else: log("Restarted logentries")

def le_follow(path, name=None):
  name = os.path.basename(path) if not name else name
  exit_status = call(["le", "--account-key", le_account_key,
    "follow", path, "--name", name])
  if exit_status != 0: log('Failed logentires follow %s %s' % (path, name))
  else: log('Logentries follow %s %s' % (path, name))

def log(msg):
  call(["logger", "[kifi-register-host] %s" % msg])

if __name__ == "__main__":
  try:
    # figure out who I am
    me = who_am_i()
    name = me["Name"]
    service = me["Service"]
    set_hostname(name)
    update_hosts(name)
    register_logentries(name, service)
    log("Done registering name=%s service=%s" % (name, service))

  except Exception as e:
    log(str(e))
    print >>sys.stderr, e
    traceback.print_exc(file=sys.stderr)
    sys.exit(-1)
