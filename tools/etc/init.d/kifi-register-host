#!/usr/bin/env python

import boto.ec2
import requests
import os
from subprocess import call

def whoAmI():
  ec2 = boto.ec2.connect_to_region("us-west-1", aws_access_key_id="AKIAINZ2TABEYCFH7SMQ", aws_secret_access_key="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")
  myID = requests.get("http://169.254.169.254/latest/meta-data/instance-id", timeout=1.0).text
  instance = ec2.get_only_instances([myID])[0]
  spotRequestId = instance.spot_instance_request_id
  if spotRequestId is not None:
    spotRequest = ec2.get_all_spot_instance_requests([spotRequestId])[0]
    tags = spotRequest.tags
    for key, value in tags.items():
      if key not in instance.tags:
        instance.add_tag(key, value)
  return ec2.get_only_instances([myID])[0].tags

# set hostname to EC2 Name
def set_hostname(name):
  with open("/etc/hostname", "w") as f:
    print "setting hostname:", name
    f.write(name + "\n")

# make sure EC2 Name is in the hosts file
def update_hosts(name):
  with open("/etc/hosts", "a+") as f:
    existing_name = f.read()
    if name not in existing_name:
      print "appending to /etc/hosts:", name
      f.write("\n127.0.0.1 " + name + "\n")

le_account_key = "ab262b73-aff4-4fd9-b83c-8ff7b510f7f9"
def register_logentries(name, service):
  if not os.path.isfile('/etc/le/config'):
    register_code = call(["le", "register", "--name", name,
      "--account-key", le_account_key, "--hostname", name])
    if register_code != 0:
      print 'Failed to register logentries host', name

  appDir = '/home/fortytwo/run/%s/log/' % service
  le_follow(appDir + 'db.log')
  le_follow(appDir + 'app.log')
  le_follow(appDir + 'access.log')
  le_follow(appDir + 'cache.log')
  le_follow(appDir + service + '.out')
  le_follow('/var/log/syslog')
  le_follow('/var/log/nginx/access.log', 'nginx_access')
  le_follow('/var/log/nginx/error.log', 'nginx_error')
  le_follow('/var/log/lastlog')
  restart_code = call(['service', 'logentries', 'restart'])
  if restart_code != 0:
    print 'Error restarting logentries'

def le_follow(path, name=None):
  name = os.path.basename(path) if not name else name
  print 'le follow: %s => %s' % (name, path)
  exit_status = call(["le", "--account-key", le_account_key,
    "follow", path, "--name", name])
  if exit_status != 0:
    print 'Failed logentires follow'

if __name__ == "__main__":
  try:
    # figure out who I am
    me = whoAmI()
    name = me["Name"]
    service = me["Service"]
    set_hostname(name)
    update_hosts(name)
    register_logentries(name, service)

  except Exception as e:
    print e
